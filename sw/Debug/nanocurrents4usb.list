
nanocurrents4usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c7c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002d3c  08002d3c  00003d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002da8  08002da8  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002da8  08002da8  00003da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002db0  08002db0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002db0  08002db0  00003db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002db4  08002db4  00003db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002db8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  08002dc4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08002dc4  00004158  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000937f  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018fb  00000000  00000000  0000d3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  0000ecb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f8  00000000  00000000  0000f468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001069c  00000000  00000000  0000fa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7d8  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064b91  00000000  00000000  0002a8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008f465  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ac8  00000000  00000000  0008f4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00090f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d24 	.word	0x08002d24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d24 	.word	0x08002d24

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fa86 	bl	80009bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f80a 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f934 	bl	8000720 <MX_GPIO_Init>
  MX_DMA_Init();
 80004b8:	f000 f914 	bl	80006e4 <MX_DMA_Init>
  MX_ADC_Init();
 80004bc:	f000 f870 	bl	80005a0 <MX_ADC_Init>
  MX_USART2_UART_Init();
 80004c0:	f000 f8e0 	bl	8000684 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c4:	46c0      	nop			@ (mov r8, r8)
 80004c6:	e7fd      	b.n	80004c4 <main+0x1c>

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b099      	sub	sp, #100	@ 0x64
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	242c      	movs	r4, #44	@ 0x2c
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	0018      	movs	r0, r3
 80004d4:	2334      	movs	r3, #52	@ 0x34
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f002 fbf7 	bl	8002ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004de:	2318      	movs	r3, #24
 80004e0:	18fb      	adds	r3, r7, r3
 80004e2:	0018      	movs	r0, r3
 80004e4:	2314      	movs	r3, #20
 80004e6:	001a      	movs	r2, r3
 80004e8:	2100      	movs	r1, #0
 80004ea:	f002 fbef 	bl	8002ccc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ee:	003b      	movs	r3, r7
 80004f0:	0018      	movs	r0, r3
 80004f2:	2318      	movs	r3, #24
 80004f4:	001a      	movs	r2, r3
 80004f6:	2100      	movs	r1, #0
 80004f8:	f002 fbe8 	bl	8002ccc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004fc:	4b26      	ldr	r3, [pc, #152]	@ (8000598 <SystemClock_Config+0xd0>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a26      	ldr	r2, [pc, #152]	@ (800059c <SystemClock_Config+0xd4>)
 8000502:	401a      	ands	r2, r3
 8000504:	4b24      	ldr	r3, [pc, #144]	@ (8000598 <SystemClock_Config+0xd0>)
 8000506:	2180      	movs	r1, #128	@ 0x80
 8000508:	0109      	lsls	r1, r1, #4
 800050a:	430a      	orrs	r2, r1
 800050c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800050e:	0021      	movs	r1, r4
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2210      	movs	r2, #16
 8000514:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2201      	movs	r2, #1
 800051a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2200      	movs	r2, #0
 8000520:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	22a0      	movs	r2, #160	@ 0xa0
 8000526:	0212      	lsls	r2, r2, #8
 8000528:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000530:	187b      	adds	r3, r7, r1
 8000532:	0018      	movs	r0, r3
 8000534:	f001 f836 	bl	80015a4 <HAL_RCC_OscConfig>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800053c:	f000 f906 	bl	800074c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000540:	2118      	movs	r1, #24
 8000542:	187b      	adds	r3, r7, r1
 8000544:	220f      	movs	r2, #15
 8000546:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2100      	movs	r1, #0
 8000564:	0018      	movs	r0, r3
 8000566:	f001 fb99 	bl	8001c9c <HAL_RCC_ClockConfig>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800056e:	f000 f8ed 	bl	800074c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000572:	003b      	movs	r3, r7
 8000574:	2202      	movs	r2, #2
 8000576:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000578:	003b      	movs	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800057e:	003b      	movs	r3, r7
 8000580:	0018      	movs	r0, r3
 8000582:	f001 fdaf 	bl	80020e4 <HAL_RCCEx_PeriphCLKConfig>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800058a:	f000 f8df 	bl	800074c <Error_Handler>
  }
}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	b019      	add	sp, #100	@ 0x64
 8000594:	bd90      	pop	{r4, r7, pc}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	40007000 	.word	0x40007000
 800059c:	ffffe7ff 	.word	0xffffe7ff

080005a0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	003b      	movs	r3, r7
 80005a8:	0018      	movs	r0, r3
 80005aa:	2308      	movs	r3, #8
 80005ac:	001a      	movs	r2, r3
 80005ae:	2100      	movs	r1, #0
 80005b0:	f002 fb8c 	bl	8002ccc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005b4:	4b30      	ldr	r3, [pc, #192]	@ (8000678 <MX_ADC_Init+0xd8>)
 80005b6:	4a31      	ldr	r2, [pc, #196]	@ (800067c <MX_ADC_Init+0xdc>)
 80005b8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80005ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000678 <MX_ADC_Init+0xd8>)
 80005bc:	2200      	movs	r2, #0
 80005be:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80005c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000678 <MX_ADC_Init+0xd8>)
 80005c2:	22c0      	movs	r2, #192	@ 0xc0
 80005c4:	0612      	lsls	r2, r2, #24
 80005c6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000678 <MX_ADC_Init+0xd8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000678 <MX_ADC_Init+0xd8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005d4:	4b28      	ldr	r3, [pc, #160]	@ (8000678 <MX_ADC_Init+0xd8>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005da:	4b27      	ldr	r3, [pc, #156]	@ (8000678 <MX_ADC_Init+0xd8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b25      	ldr	r3, [pc, #148]	@ (8000678 <MX_ADC_Init+0xd8>)
 80005e2:	2220      	movs	r2, #32
 80005e4:	2100      	movs	r1, #0
 80005e6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80005e8:	4b23      	ldr	r3, [pc, #140]	@ (8000678 <MX_ADC_Init+0xd8>)
 80005ea:	2221      	movs	r2, #33	@ 0x21
 80005ec:	2100      	movs	r1, #0
 80005ee:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f0:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <MX_ADC_Init+0xd8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f6:	4b20      	ldr	r3, [pc, #128]	@ (8000678 <MX_ADC_Init+0xd8>)
 80005f8:	22c2      	movs	r2, #194	@ 0xc2
 80005fa:	32ff      	adds	r2, #255	@ 0xff
 80005fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <MX_ADC_Init+0xd8>)
 8000600:	222c      	movs	r2, #44	@ 0x2c
 8000602:	2100      	movs	r1, #0
 8000604:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000606:	4b1c      	ldr	r3, [pc, #112]	@ (8000678 <MX_ADC_Init+0xd8>)
 8000608:	2204      	movs	r2, #4
 800060a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800060c:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <MX_ADC_Init+0xd8>)
 800060e:	2200      	movs	r2, #0
 8000610:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000612:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <MX_ADC_Init+0xd8>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000618:	4b17      	ldr	r3, [pc, #92]	@ (8000678 <MX_ADC_Init+0xd8>)
 800061a:	2201      	movs	r2, #1
 800061c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800061e:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <MX_ADC_Init+0xd8>)
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000624:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <MX_ADC_Init+0xd8>)
 8000626:	0018      	movs	r0, r3
 8000628:	f000 fa38 	bl	8000a9c <HAL_ADC_Init>
 800062c:	1e03      	subs	r3, r0, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000630:	f000 f88c 	bl	800074c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000634:	003b      	movs	r3, r7
 8000636:	2201      	movs	r2, #1
 8000638:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800063a:	003b      	movs	r3, r7
 800063c:	2280      	movs	r2, #128	@ 0x80
 800063e:	0152      	lsls	r2, r2, #5
 8000640:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000642:	003a      	movs	r2, r7
 8000644:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <MX_ADC_Init+0xd8>)
 8000646:	0011      	movs	r1, r2
 8000648:	0018      	movs	r0, r3
 800064a:	f000 fb9b 	bl	8000d84 <HAL_ADC_ConfigChannel>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000652:	f000 f87b 	bl	800074c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000656:	003b      	movs	r3, r7
 8000658:	4a09      	ldr	r2, [pc, #36]	@ (8000680 <MX_ADC_Init+0xe0>)
 800065a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800065c:	003a      	movs	r2, r7
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <MX_ADC_Init+0xd8>)
 8000660:	0011      	movs	r1, r2
 8000662:	0018      	movs	r0, r3
 8000664:	f000 fb8e 	bl	8000d84 <HAL_ADC_ConfigChannel>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800066c:	f000 f86e 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000670:	46c0      	nop			@ (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b002      	add	sp, #8
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000028 	.word	0x20000028
 800067c:	40012400 	.word	0x40012400
 8000680:	04000002 	.word	0x04000002

08000684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000688:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_USART2_UART_Init+0x58>)
 800068a:	4a15      	ldr	r2, [pc, #84]	@ (80006e0 <MX_USART2_UART_Init+0x5c>)
 800068c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068e:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <MX_USART2_UART_Init+0x58>)
 8000690:	22e1      	movs	r2, #225	@ 0xe1
 8000692:	0252      	lsls	r2, r2, #9
 8000694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_USART2_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <MX_USART2_UART_Init+0x58>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b4:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_USART2_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c6:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <MX_USART2_UART_Init+0x58>)
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 fe37 	bl	800233c <HAL_UART_Init>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006d2:	f000 f83b 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200000cc 	.word	0x200000cc
 80006e0:	40004400 	.word	0x40004400

080006e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ea:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <MX_DMA_Init+0x38>)
 80006ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <MX_DMA_Init+0x38>)
 80006f0:	2101      	movs	r1, #1
 80006f2:	430a      	orrs	r2, r1
 80006f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_DMA_Init+0x38>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	2201      	movs	r2, #1
 80006fc:	4013      	ands	r3, r2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2009      	movs	r0, #9
 8000708:	f000 fc8e 	bl	8001028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800070c:	2009      	movs	r0, #9
 800070e:	f000 fca0 	bl	8001052 <HAL_NVIC_EnableIRQ>

}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b002      	add	sp, #8
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	40021000 	.word	0x40021000

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <MX_GPIO_Init+0x28>)
 8000728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072a:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <MX_GPIO_Init+0x28>)
 800072c:	2101      	movs	r1, #1
 800072e:	430a      	orrs	r2, r1
 8000730:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000732:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <MX_GPIO_Init+0x28>)
 8000734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000736:	2201      	movs	r2, #1
 8000738:	4013      	ands	r3, r2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b002      	add	sp, #8
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			@ (mov r8, r8)
 8000748:	40021000 	.word	0x40021000

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	46c0      	nop			@ (mov r8, r8)
 8000756:	e7fd      	b.n	8000754 <Error_Handler+0x8>

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <HAL_MspInit+0x24>)
 800075e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <HAL_MspInit+0x24>)
 8000762:	2101      	movs	r1, #1
 8000764:	430a      	orrs	r2, r1
 8000766:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	4b04      	ldr	r3, [pc, #16]	@ (800077c <HAL_MspInit+0x24>)
 800076a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800076c:	4b03      	ldr	r3, [pc, #12]	@ (800077c <HAL_MspInit+0x24>)
 800076e:	2180      	movs	r1, #128	@ 0x80
 8000770:	0549      	lsls	r1, r1, #21
 8000772:	430a      	orrs	r2, r1
 8000774:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000

08000780 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b089      	sub	sp, #36	@ 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	240c      	movs	r4, #12
 800078a:	193b      	adds	r3, r7, r4
 800078c:	0018      	movs	r0, r3
 800078e:	2314      	movs	r3, #20
 8000790:	001a      	movs	r2, r3
 8000792:	2100      	movs	r1, #0
 8000794:	f002 fa9a 	bl	8002ccc <memset>
  if(hadc->Instance==ADC1)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a2a      	ldr	r2, [pc, #168]	@ (8000848 <HAL_ADC_MspInit+0xc8>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d14e      	bne.n	8000840 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007a2:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <HAL_ADC_MspInit+0xcc>)
 80007a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007a6:	4b29      	ldr	r3, [pc, #164]	@ (800084c <HAL_ADC_MspInit+0xcc>)
 80007a8:	2180      	movs	r1, #128	@ 0x80
 80007aa:	0089      	lsls	r1, r1, #2
 80007ac:	430a      	orrs	r2, r1
 80007ae:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b26      	ldr	r3, [pc, #152]	@ (800084c <HAL_ADC_MspInit+0xcc>)
 80007b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007b4:	4b25      	ldr	r3, [pc, #148]	@ (800084c <HAL_ADC_MspInit+0xcc>)
 80007b6:	2101      	movs	r1, #1
 80007b8:	430a      	orrs	r2, r1
 80007ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007bc:	4b23      	ldr	r3, [pc, #140]	@ (800084c <HAL_ADC_MspInit+0xcc>)
 80007be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007c0:	2201      	movs	r2, #1
 80007c2:	4013      	ands	r3, r2
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0-CK_IN     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	2203      	movs	r2, #3
 80007cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	2203      	movs	r2, #3
 80007d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	193a      	adds	r2, r7, r4
 80007dc:	23a0      	movs	r3, #160	@ 0xa0
 80007de:	05db      	lsls	r3, r3, #23
 80007e0:	0011      	movs	r1, r2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f000 fd78 	bl	80012d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80007e8:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <HAL_ADC_MspInit+0xd0>)
 80007ea:	4a1a      	ldr	r2, [pc, #104]	@ (8000854 <HAL_ADC_MspInit+0xd4>)
 80007ec:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80007ee:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <HAL_ADC_MspInit+0xd0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f4:	4b16      	ldr	r3, [pc, #88]	@ (8000850 <HAL_ADC_MspInit+0xd0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80007fa:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <HAL_ADC_MspInit+0xd0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000800:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <HAL_ADC_MspInit+0xd0>)
 8000802:	2280      	movs	r2, #128	@ 0x80
 8000804:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000806:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <HAL_ADC_MspInit+0xd0>)
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	0052      	lsls	r2, r2, #1
 800080c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <HAL_ADC_MspInit+0xd0>)
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	00d2      	lsls	r2, r2, #3
 8000814:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <HAL_ADC_MspInit+0xd0>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <HAL_ADC_MspInit+0xd0>)
 800081e:	2280      	movs	r2, #128	@ 0x80
 8000820:	0192      	lsls	r2, r2, #6
 8000822:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000824:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <HAL_ADC_MspInit+0xd0>)
 8000826:	0018      	movs	r0, r3
 8000828:	f000 fc30 	bl	800108c <HAL_DMA_Init>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d001      	beq.n	8000834 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8000830:	f7ff ff8c 	bl	800074c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a06      	ldr	r2, [pc, #24]	@ (8000850 <HAL_ADC_MspInit+0xd0>)
 8000838:	64da      	str	r2, [r3, #76]	@ 0x4c
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <HAL_ADC_MspInit+0xd0>)
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000840:	46c0      	nop			@ (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	b009      	add	sp, #36	@ 0x24
 8000846:	bd90      	pop	{r4, r7, pc}
 8000848:	40012400 	.word	0x40012400
 800084c:	40021000 	.word	0x40021000
 8000850:	20000084 	.word	0x20000084
 8000854:	40020008 	.word	0x40020008

08000858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b089      	sub	sp, #36	@ 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	240c      	movs	r4, #12
 8000862:	193b      	adds	r3, r7, r4
 8000864:	0018      	movs	r0, r3
 8000866:	2314      	movs	r3, #20
 8000868:	001a      	movs	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f002 fa2e 	bl	8002ccc <memset>
  if(huart->Instance==USART2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a18      	ldr	r2, [pc, #96]	@ (80008d8 <HAL_UART_MspInit+0x80>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d12a      	bne.n	80008d0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087a:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <HAL_UART_MspInit+0x84>)
 800087c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800087e:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <HAL_UART_MspInit+0x84>)
 8000880:	2180      	movs	r1, #128	@ 0x80
 8000882:	0289      	lsls	r1, r1, #10
 8000884:	430a      	orrs	r2, r1
 8000886:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <HAL_UART_MspInit+0x84>)
 800088a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <HAL_UART_MspInit+0x84>)
 800088e:	2101      	movs	r1, #1
 8000890:	430a      	orrs	r2, r1
 8000892:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <HAL_UART_MspInit+0x84>)
 8000896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000898:	2201      	movs	r2, #1
 800089a:	4013      	ands	r3, r2
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	22c0      	movs	r2, #192	@ 0xc0
 80008a4:	00d2      	lsls	r2, r2, #3
 80008a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	0021      	movs	r1, r4
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2202      	movs	r2, #2
 80008ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2203      	movs	r2, #3
 80008ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2204      	movs	r2, #4
 80008c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	187a      	adds	r2, r7, r1
 80008c4:	23a0      	movs	r3, #160	@ 0xa0
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	0011      	movs	r1, r2
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fd04 	bl	80012d8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008d0:	46c0      	nop			@ (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b009      	add	sp, #36	@ 0x24
 80008d6:	bd90      	pop	{r4, r7, pc}
 80008d8:	40004400 	.word	0x40004400
 80008dc:	40021000 	.word	0x40021000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	e7fd      	b.n	80008e4 <NMI_Handler+0x4>

080008e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ec:	46c0      	nop			@ (mov r8, r8)
 80008ee:	e7fd      	b.n	80008ec <HardFault_Handler+0x4>

080008f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008f4:	46c0      	nop			@ (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000908:	f000 f8ac 	bl	8000a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000918:	4b03      	ldr	r3, [pc, #12]	@ (8000928 <DMA1_Channel1_IRQHandler+0x14>)
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fc2e 	bl	800117c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000920:	46c0      	nop			@ (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	20000084 	.word	0x20000084

0800092c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000930:	46c0      	nop			@ (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000938:	4813      	ldr	r0, [pc, #76]	@ (8000988 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800093a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800093c:	f7ff fff6 	bl	800092c <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000940:	4812      	ldr	r0, [pc, #72]	@ (800098c <LoopForever+0x6>)
    LDR R1, [R0]
 8000942:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000944:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000946:	4a12      	ldr	r2, [pc, #72]	@ (8000990 <LoopForever+0xa>)
    CMP R1, R2
 8000948:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800094a:	d105      	bne.n	8000958 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800094c:	4811      	ldr	r0, [pc, #68]	@ (8000994 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800094e:	4912      	ldr	r1, [pc, #72]	@ (8000998 <LoopForever+0x12>)
    STR R1, [R0]
 8000950:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000952:	4812      	ldr	r0, [pc, #72]	@ (800099c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000954:	4912      	ldr	r1, [pc, #72]	@ (80009a0 <LoopForever+0x1a>)
    STR R1, [R0]
 8000956:	6001      	str	r1, [r0, #0]

08000958 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	4812      	ldr	r0, [pc, #72]	@ (80009a4 <LoopForever+0x1e>)
  ldr r1, =_edata
 800095a:	4913      	ldr	r1, [pc, #76]	@ (80009a8 <LoopForever+0x22>)
  ldr r2, =_sidata
 800095c:	4a13      	ldr	r2, [pc, #76]	@ (80009ac <LoopForever+0x26>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a10      	ldr	r2, [pc, #64]	@ (80009b0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000970:	4c10      	ldr	r4, [pc, #64]	@ (80009b4 <LoopForever+0x2e>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097e:	f002 f9ad 	bl	8002cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000982:	f7ff fd91 	bl	80004a8 <main>

08000986 <LoopForever>:

LoopForever:
    b LoopForever
 8000986:	e7fe      	b.n	8000986 <LoopForever>
   ldr   r0, =_estack
 8000988:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 800098c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000990:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000994:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000998:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800099c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009a0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009ac:	08002db8 	.word	0x08002db8
  ldr r2, =_sbss
 80009b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009b4:	20000158 	.word	0x20000158

080009b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC1_COMP_IRQHandler>
	...

080009bc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009c8:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <HAL_Init+0x3c>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <HAL_Init+0x3c>)
 80009ce:	2140      	movs	r1, #64	@ 0x40
 80009d0:	430a      	orrs	r2, r1
 80009d2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 f811 	bl	80009fc <HAL_InitTick>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d003      	beq.n	80009e6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	e001      	b.n	80009ea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009e6:	f7ff feb7 	bl	8000758 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
}
 80009ee:	0018      	movs	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b002      	add	sp, #8
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	40022000 	.word	0x40022000

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <HAL_InitTick+0x5c>)
 8000a06:	681c      	ldr	r4, [r3, #0]
 8000a08:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <HAL_InitTick+0x60>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	23fa      	movs	r3, #250	@ 0xfa
 8000a10:	0098      	lsls	r0, r3, #2
 8000a12:	f7ff fb79 	bl	8000108 <__udivsi3>
 8000a16:	0003      	movs	r3, r0
 8000a18:	0019      	movs	r1, r3
 8000a1a:	0020      	movs	r0, r4
 8000a1c:	f7ff fb74 	bl	8000108 <__udivsi3>
 8000a20:	0003      	movs	r3, r0
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 fb25 	bl	8001072 <HAL_SYSTICK_Config>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e00f      	b.n	8000a50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	d80b      	bhi.n	8000a4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	2301      	movs	r3, #1
 8000a3a:	425b      	negs	r3, r3
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 faf2 	bl	8001028 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_InitTick+0x64>)
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e000      	b.n	8000a50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	0018      	movs	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b003      	add	sp, #12
 8000a56:	bd90      	pop	{r4, r7, pc}
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000004 	.word	0x20000004

08000a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <HAL_IncTick+0x1c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	4b05      	ldr	r3, [pc, #20]	@ (8000a84 <HAL_IncTick+0x20>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	18d2      	adds	r2, r2, r3
 8000a74:	4b03      	ldr	r3, [pc, #12]	@ (8000a84 <HAL_IncTick+0x20>)
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	46c0      	nop			@ (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000154 	.word	0x20000154

08000a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b02      	ldr	r3, [pc, #8]	@ (8000a98 <HAL_GetTick+0x10>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	20000154 	.word	0x20000154

08000a9c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d101      	bne.n	8000aae <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e159      	b.n	8000d62 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d10a      	bne.n	8000acc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2250      	movs	r2, #80	@ 0x50
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f7ff fe5a 	bl	8000780 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ad0:	2210      	movs	r2, #16
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	2b10      	cmp	r3, #16
 8000ad6:	d005      	beq.n	8000ae4 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2204      	movs	r2, #4
 8000ae0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000ae2:	d00b      	beq.n	8000afc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ae8:	2210      	movs	r2, #16
 8000aea:	431a      	orrs	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2250      	movs	r2, #80	@ 0x50
 8000af4:	2100      	movs	r1, #0
 8000af6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e132      	b.n	8000d62 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b00:	4a9a      	ldr	r2, [pc, #616]	@ (8000d6c <HAL_ADC_Init+0x2d0>)
 8000b02:	4013      	ands	r3, r2
 8000b04:	2202      	movs	r2, #2
 8000b06:	431a      	orrs	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	2203      	movs	r2, #3
 8000b14:	4013      	ands	r3, r2
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d108      	bne.n	8000b2c <HAL_ADC_Init+0x90>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2201      	movs	r2, #1
 8000b22:	4013      	ands	r3, r2
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d101      	bne.n	8000b2c <HAL_ADC_Init+0x90>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e000      	b.n	8000b2e <HAL_ADC_Init+0x92>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d149      	bne.n	8000bc6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	685a      	ldr	r2, [r3, #4]
 8000b36:	23c0      	movs	r3, #192	@ 0xc0
 8000b38:	061b      	lsls	r3, r3, #24
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d00b      	beq.n	8000b56 <HAL_ADC_Init+0xba>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	2380      	movs	r3, #128	@ 0x80
 8000b44:	05db      	lsls	r3, r3, #23
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d005      	beq.n	8000b56 <HAL_ADC_Init+0xba>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	2380      	movs	r3, #128	@ 0x80
 8000b50:	061b      	lsls	r3, r3, #24
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d111      	bne.n	8000b7a <HAL_ADC_Init+0xde>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	691a      	ldr	r2, [r3, #16]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	0092      	lsls	r2, r2, #2
 8000b62:	0892      	lsrs	r2, r2, #2
 8000b64:	611a      	str	r2, [r3, #16]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6919      	ldr	r1, [r3, #16]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	430a      	orrs	r2, r1
 8000b76:	611a      	str	r2, [r3, #16]
 8000b78:	e014      	b.n	8000ba4 <HAL_ADC_Init+0x108>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	691a      	ldr	r2, [r3, #16]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	0092      	lsls	r2, r2, #2
 8000b86:	0892      	lsrs	r2, r2, #2
 8000b88:	611a      	str	r2, [r3, #16]
 8000b8a:	4b79      	ldr	r3, [pc, #484]	@ (8000d70 <HAL_ADC_Init+0x2d4>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b78      	ldr	r3, [pc, #480]	@ (8000d70 <HAL_ADC_Init+0x2d4>)
 8000b90:	4978      	ldr	r1, [pc, #480]	@ (8000d74 <HAL_ADC_Init+0x2d8>)
 8000b92:	400a      	ands	r2, r1
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	4b76      	ldr	r3, [pc, #472]	@ (8000d70 <HAL_ADC_Init+0x2d4>)
 8000b98:	6819      	ldr	r1, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	4b74      	ldr	r3, [pc, #464]	@ (8000d70 <HAL_ADC_Init+0x2d4>)
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	68da      	ldr	r2, [r3, #12]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2118      	movs	r1, #24
 8000bb0:	438a      	bics	r2, r1
 8000bb2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	68d9      	ldr	r1, [r3, #12]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000bc6:	4b6a      	ldr	r3, [pc, #424]	@ (8000d70 <HAL_ADC_Init+0x2d4>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	4b69      	ldr	r3, [pc, #420]	@ (8000d70 <HAL_ADC_Init+0x2d4>)
 8000bcc:	496a      	ldr	r1, [pc, #424]	@ (8000d78 <HAL_ADC_Init+0x2dc>)
 8000bce:	400a      	ands	r2, r1
 8000bd0:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000bd2:	4b67      	ldr	r3, [pc, #412]	@ (8000d70 <HAL_ADC_Init+0x2d4>)
 8000bd4:	6819      	ldr	r1, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bda:	065a      	lsls	r2, r3, #25
 8000bdc:	4b64      	ldr	r3, [pc, #400]	@ (8000d70 <HAL_ADC_Init+0x2d4>)
 8000bde:	430a      	orrs	r2, r1
 8000be0:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	2380      	movs	r3, #128	@ 0x80
 8000bea:	055b      	lsls	r3, r3, #21
 8000bec:	4013      	ands	r3, r2
 8000bee:	d108      	bne.n	8000c02 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2180      	movs	r1, #128	@ 0x80
 8000bfc:	0549      	lsls	r1, r1, #21
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	495b      	ldr	r1, [pc, #364]	@ (8000d7c <HAL_ADC_Init+0x2e0>)
 8000c0e:	400a      	ands	r2, r1
 8000c10:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	68d9      	ldr	r1, [r3, #12]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d101      	bne.n	8000c28 <HAL_ADC_Init+0x18c>
 8000c24:	2304      	movs	r3, #4
 8000c26:	e000      	b.n	8000c2a <HAL_ADC_Init+0x18e>
 8000c28:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c2a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2020      	movs	r0, #32
 8000c30:	5c1b      	ldrb	r3, [r3, r0]
 8000c32:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000c34:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	202c      	movs	r0, #44	@ 0x2c
 8000c3a:	5c1b      	ldrb	r3, [r3, r0]
 8000c3c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c3e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c44:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000c4c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000c54:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c62:	23c2      	movs	r3, #194	@ 0xc2
 8000c64:	33ff      	adds	r3, #255	@ 0xff
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d00b      	beq.n	8000c82 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	68d9      	ldr	r1, [r3, #12]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2221      	movs	r2, #33	@ 0x21
 8000c86:	5c9b      	ldrb	r3, [r3, r2]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d11a      	bne.n	8000cc2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2220      	movs	r2, #32
 8000c90:	5c9b      	ldrb	r3, [r3, r2]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d109      	bne.n	8000caa <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2180      	movs	r1, #128	@ 0x80
 8000ca2:	0249      	lsls	r1, r1, #9
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	e00b      	b.n	8000cc2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cae:	2220      	movs	r2, #32
 8000cb0:	431a      	orrs	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cba:	2201      	movs	r2, #1
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d11f      	bne.n	8000d0a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	691a      	ldr	r2, [r3, #16]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	492a      	ldr	r1, [pc, #168]	@ (8000d80 <HAL_ADC_Init+0x2e4>)
 8000cd6:	400a      	ands	r2, r1
 8000cd8:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	6919      	ldr	r1, [r3, #16]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000ce8:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000cee:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	691a      	ldr	r2, [r3, #16]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2101      	movs	r1, #1
 8000d04:	430a      	orrs	r2, r1
 8000d06:	611a      	str	r2, [r3, #16]
 8000d08:	e00e      	b.n	8000d28 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	2201      	movs	r2, #1
 8000d12:	4013      	ands	r3, r2
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d107      	bne.n	8000d28 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	691a      	ldr	r2, [r3, #16]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2101      	movs	r1, #1
 8000d24:	438a      	bics	r2, r1
 8000d26:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	695a      	ldr	r2, [r3, #20]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2107      	movs	r1, #7
 8000d34:	438a      	bics	r2, r1
 8000d36:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	6959      	ldr	r1, [r3, #20]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d54:	2203      	movs	r2, #3
 8000d56:	4393      	bics	r3, r2
 8000d58:	2201      	movs	r2, #1
 8000d5a:	431a      	orrs	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	0018      	movs	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	fffffefd 	.word	0xfffffefd
 8000d70:	40012708 	.word	0x40012708
 8000d74:	ffc3ffff 	.word	0xffc3ffff
 8000d78:	fdffffff 	.word	0xfdffffff
 8000d7c:	fffe0219 	.word	0xfffe0219
 8000d80:	fffffc03 	.word	0xfffffc03

08000d84 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2250      	movs	r2, #80	@ 0x50
 8000d92:	5c9b      	ldrb	r3, [r3, r2]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d101      	bne.n	8000d9c <HAL_ADC_ConfigChannel+0x18>
 8000d98:	2302      	movs	r3, #2
 8000d9a:	e06c      	b.n	8000e76 <HAL_ADC_ConfigChannel+0xf2>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2250      	movs	r2, #80	@ 0x50
 8000da0:	2101      	movs	r1, #1
 8000da2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	2204      	movs	r2, #4
 8000dac:	4013      	ands	r3, r2
 8000dae:	d00b      	beq.n	8000dc8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000db4:	2220      	movs	r2, #32
 8000db6:	431a      	orrs	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2250      	movs	r2, #80	@ 0x50
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e056      	b.n	8000e76 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8000e80 <HAL_ADC_ConfigChannel+0xfc>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d028      	beq.n	8000e24 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	035b      	lsls	r3, r3, #13
 8000dde:	0b5a      	lsrs	r2, r3, #13
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	2380      	movs	r3, #128	@ 0x80
 8000dee:	02db      	lsls	r3, r3, #11
 8000df0:	4013      	ands	r3, r2
 8000df2:	d009      	beq.n	8000e08 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8000df4:	4b23      	ldr	r3, [pc, #140]	@ (8000e84 <HAL_ADC_ConfigChannel+0x100>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b22      	ldr	r3, [pc, #136]	@ (8000e84 <HAL_ADC_ConfigChannel+0x100>)
 8000dfa:	2180      	movs	r1, #128	@ 0x80
 8000dfc:	0409      	lsls	r1, r1, #16
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000e02:	200a      	movs	r0, #10
 8000e04:	f000 f844 	bl	8000e90 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	2380      	movs	r3, #128	@ 0x80
 8000e0e:	029b      	lsls	r3, r3, #10
 8000e10:	4013      	ands	r3, r2
 8000e12:	d02b      	beq.n	8000e6c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	@ (8000e84 <HAL_ADC_ConfigChannel+0x100>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <HAL_ADC_ConfigChannel+0x100>)
 8000e1a:	2180      	movs	r1, #128	@ 0x80
 8000e1c:	03c9      	lsls	r1, r1, #15
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	e023      	b.n	8000e6c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	035b      	lsls	r3, r3, #13
 8000e30:	0b5b      	lsrs	r3, r3, #13
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	400a      	ands	r2, r1
 8000e3a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	2380      	movs	r3, #128	@ 0x80
 8000e42:	02db      	lsls	r3, r3, #11
 8000e44:	4013      	ands	r3, r2
 8000e46:	d005      	beq.n	8000e54 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8000e48:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <HAL_ADC_ConfigChannel+0x100>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <HAL_ADC_ConfigChannel+0x100>)
 8000e4e:	490e      	ldr	r1, [pc, #56]	@ (8000e88 <HAL_ADC_ConfigChannel+0x104>)
 8000e50:	400a      	ands	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	2380      	movs	r3, #128	@ 0x80
 8000e5a:	029b      	lsls	r3, r3, #10
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	d005      	beq.n	8000e6c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <HAL_ADC_ConfigChannel+0x100>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <HAL_ADC_ConfigChannel+0x100>)
 8000e66:	4909      	ldr	r1, [pc, #36]	@ (8000e8c <HAL_ADC_ConfigChannel+0x108>)
 8000e68:	400a      	ands	r2, r1
 8000e6a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2250      	movs	r2, #80	@ 0x50
 8000e70:	2100      	movs	r1, #0
 8000e72:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	0018      	movs	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b002      	add	sp, #8
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	00001001 	.word	0x00001001
 8000e84:	40012708 	.word	0x40012708
 8000e88:	ff7fffff 	.word	0xff7fffff
 8000e8c:	ffbfffff 	.word	0xffbfffff

08000e90 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000e98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <ADC_DelayMicroSecond+0x38>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	490b      	ldr	r1, [pc, #44]	@ (8000ecc <ADC_DelayMicroSecond+0x3c>)
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff f932 	bl	8000108 <__udivsi3>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	001a      	movs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4353      	muls	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8000eae:	e002      	b.n	8000eb6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1f9      	bne.n	8000eb0 <ADC_DelayMicroSecond+0x20>
  }
}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b004      	add	sp, #16
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	000f4240 	.word	0x000f4240

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	1dfb      	adds	r3, r7, #7
 8000eda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ee2:	d809      	bhi.n	8000ef8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee4:	1dfb      	adds	r3, r7, #7
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	001a      	movs	r2, r3
 8000eea:	231f      	movs	r3, #31
 8000eec:	401a      	ands	r2, r3
 8000eee:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <__NVIC_EnableIRQ+0x30>)
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	4091      	lsls	r1, r2
 8000ef4:	000a      	movs	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
  }
}
 8000ef8:	46c0      	nop			@ (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b002      	add	sp, #8
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	0002      	movs	r2, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f18:	d828      	bhi.n	8000f6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f1a:	4a2f      	ldr	r2, [pc, #188]	@ (8000fd8 <__NVIC_SetPriority+0xd4>)
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b25b      	sxtb	r3, r3
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	33c0      	adds	r3, #192	@ 0xc0
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	589b      	ldr	r3, [r3, r2]
 8000f2a:	1dfa      	adds	r2, r7, #7
 8000f2c:	7812      	ldrb	r2, [r2, #0]
 8000f2e:	0011      	movs	r1, r2
 8000f30:	2203      	movs	r2, #3
 8000f32:	400a      	ands	r2, r1
 8000f34:	00d2      	lsls	r2, r2, #3
 8000f36:	21ff      	movs	r1, #255	@ 0xff
 8000f38:	4091      	lsls	r1, r2
 8000f3a:	000a      	movs	r2, r1
 8000f3c:	43d2      	mvns	r2, r2
 8000f3e:	401a      	ands	r2, r3
 8000f40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	019b      	lsls	r3, r3, #6
 8000f46:	22ff      	movs	r2, #255	@ 0xff
 8000f48:	401a      	ands	r2, r3
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	0018      	movs	r0, r3
 8000f50:	2303      	movs	r3, #3
 8000f52:	4003      	ands	r3, r0
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f58:	481f      	ldr	r0, [pc, #124]	@ (8000fd8 <__NVIC_SetPriority+0xd4>)
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	430a      	orrs	r2, r1
 8000f64:	33c0      	adds	r3, #192	@ 0xc0
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f6a:	e031      	b.n	8000fd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fdc <__NVIC_SetPriority+0xd8>)
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	0019      	movs	r1, r3
 8000f74:	230f      	movs	r3, #15
 8000f76:	400b      	ands	r3, r1
 8000f78:	3b08      	subs	r3, #8
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	3306      	adds	r3, #6
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	18d3      	adds	r3, r2, r3
 8000f82:	3304      	adds	r3, #4
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	1dfa      	adds	r2, r7, #7
 8000f88:	7812      	ldrb	r2, [r2, #0]
 8000f8a:	0011      	movs	r1, r2
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	400a      	ands	r2, r1
 8000f90:	00d2      	lsls	r2, r2, #3
 8000f92:	21ff      	movs	r1, #255	@ 0xff
 8000f94:	4091      	lsls	r1, r2
 8000f96:	000a      	movs	r2, r1
 8000f98:	43d2      	mvns	r2, r2
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	019b      	lsls	r3, r3, #6
 8000fa2:	22ff      	movs	r2, #255	@ 0xff
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	0018      	movs	r0, r3
 8000fac:	2303      	movs	r3, #3
 8000fae:	4003      	ands	r3, r0
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb4:	4809      	ldr	r0, [pc, #36]	@ (8000fdc <__NVIC_SetPriority+0xd8>)
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	001c      	movs	r4, r3
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	4023      	ands	r3, r4
 8000fc0:	3b08      	subs	r3, #8
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	3306      	adds	r3, #6
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	18c3      	adds	r3, r0, r3
 8000fcc:	3304      	adds	r3, #4
 8000fce:	601a      	str	r2, [r3, #0]
}
 8000fd0:	46c0      	nop			@ (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b003      	add	sp, #12
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	1e5a      	subs	r2, r3, #1
 8000fec:	2380      	movs	r3, #128	@ 0x80
 8000fee:	045b      	lsls	r3, r3, #17
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d301      	bcc.n	8000ff8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e010      	b.n	800101a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <SysTick_Config+0x44>)
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	3a01      	subs	r2, #1
 8000ffe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001000:	2301      	movs	r3, #1
 8001002:	425b      	negs	r3, r3
 8001004:	2103      	movs	r1, #3
 8001006:	0018      	movs	r0, r3
 8001008:	f7ff ff7c 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <SysTick_Config+0x44>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	@ (8001024 <SysTick_Config+0x44>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	0018      	movs	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	210f      	movs	r1, #15
 8001034:	187b      	adds	r3, r7, r1
 8001036:	1c02      	adds	r2, r0, #0
 8001038:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	187b      	adds	r3, r7, r1
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b25b      	sxtb	r3, r3
 8001042:	0011      	movs	r1, r2
 8001044:	0018      	movs	r0, r3
 8001046:	f7ff ff5d 	bl	8000f04 <__NVIC_SetPriority>
}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b004      	add	sp, #16
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	0002      	movs	r2, r0
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b25b      	sxtb	r3, r3
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ff33 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b002      	add	sp, #8
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff ffaf 	bl	8000fe0 <SysTick_Config>
 8001082:	0003      	movs	r3, r0
}
 8001084:	0018      	movs	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e061      	b.n	8001162 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a32      	ldr	r2, [pc, #200]	@ (800116c <HAL_DMA_Init+0xe0>)
 80010a4:	4694      	mov	ip, r2
 80010a6:	4463      	add	r3, ip
 80010a8:	2114      	movs	r1, #20
 80010aa:	0018      	movs	r0, r3
 80010ac:	f7ff f82c 	bl	8000108 <__udivsi3>
 80010b0:	0003      	movs	r3, r0
 80010b2:	009a      	lsls	r2, r3, #2
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001170 <HAL_DMA_Init+0xe4>)
 80010bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2225      	movs	r2, #37	@ 0x25
 80010c2:	2102      	movs	r1, #2
 80010c4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4a28      	ldr	r2, [pc, #160]	@ (8001174 <HAL_DMA_Init+0xe8>)
 80010d2:	4013      	ands	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80010de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	2380      	movs	r3, #128	@ 0x80
 8001112:	01db      	lsls	r3, r3, #7
 8001114:	429a      	cmp	r2, r3
 8001116:	d018      	beq.n	800114a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001118:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <HAL_DMA_Init+0xec>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001120:	211c      	movs	r1, #28
 8001122:	400b      	ands	r3, r1
 8001124:	210f      	movs	r1, #15
 8001126:	4099      	lsls	r1, r3
 8001128:	000b      	movs	r3, r1
 800112a:	43d9      	mvns	r1, r3
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <HAL_DMA_Init+0xec>)
 800112e:	400a      	ands	r2, r1
 8001130:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <HAL_DMA_Init+0xec>)
 8001134:	6819      	ldr	r1, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	201c      	movs	r0, #28
 8001140:	4003      	ands	r3, r0
 8001142:	409a      	lsls	r2, r3
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <HAL_DMA_Init+0xec>)
 8001146:	430a      	orrs	r2, r1
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2225      	movs	r2, #37	@ 0x25
 8001154:	2101      	movs	r1, #1
 8001156:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2224      	movs	r2, #36	@ 0x24
 800115c:	2100      	movs	r1, #0
 800115e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	0018      	movs	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	b004      	add	sp, #16
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			@ (mov r8, r8)
 800116c:	bffdfff8 	.word	0xbffdfff8
 8001170:	40020000 	.word	0x40020000
 8001174:	ffff800f 	.word	0xffff800f
 8001178:	400200a8 	.word	0x400200a8

0800117c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001198:	221c      	movs	r2, #28
 800119a:	4013      	ands	r3, r2
 800119c:	2204      	movs	r2, #4
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	4013      	ands	r3, r2
 80011a6:	d026      	beq.n	80011f6 <HAL_DMA_IRQHandler+0x7a>
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2204      	movs	r2, #4
 80011ac:	4013      	ands	r3, r2
 80011ae:	d022      	beq.n	80011f6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2220      	movs	r2, #32
 80011b8:	4013      	ands	r3, r2
 80011ba:	d107      	bne.n	80011cc <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2104      	movs	r1, #4
 80011c8:	438a      	bics	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d0:	221c      	movs	r2, #28
 80011d2:	401a      	ands	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	2104      	movs	r1, #4
 80011da:	4091      	lsls	r1, r2
 80011dc:	000a      	movs	r2, r1
 80011de:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d100      	bne.n	80011ea <HAL_DMA_IRQHandler+0x6e>
 80011e8:	e071      	b.n	80012ce <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	0010      	movs	r0, r2
 80011f2:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80011f4:	e06b      	b.n	80012ce <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	221c      	movs	r2, #28
 80011fc:	4013      	ands	r3, r2
 80011fe:	2202      	movs	r2, #2
 8001200:	409a      	lsls	r2, r3
 8001202:	0013      	movs	r3, r2
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	4013      	ands	r3, r2
 8001208:	d02d      	beq.n	8001266 <HAL_DMA_IRQHandler+0xea>
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	2202      	movs	r2, #2
 800120e:	4013      	ands	r3, r2
 8001210:	d029      	beq.n	8001266 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2220      	movs	r2, #32
 800121a:	4013      	ands	r3, r2
 800121c:	d10b      	bne.n	8001236 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	210a      	movs	r1, #10
 800122a:	438a      	bics	r2, r1
 800122c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2225      	movs	r2, #37	@ 0x25
 8001232:	2101      	movs	r1, #1
 8001234:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	221c      	movs	r2, #28
 800123c:	401a      	ands	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	2102      	movs	r1, #2
 8001244:	4091      	lsls	r1, r2
 8001246:	000a      	movs	r2, r1
 8001248:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2224      	movs	r2, #36	@ 0x24
 800124e:	2100      	movs	r1, #0
 8001250:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001256:	2b00      	cmp	r3, #0
 8001258:	d039      	beq.n	80012ce <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	0010      	movs	r0, r2
 8001262:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001264:	e033      	b.n	80012ce <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	221c      	movs	r2, #28
 800126c:	4013      	ands	r3, r2
 800126e:	2208      	movs	r2, #8
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	4013      	ands	r3, r2
 8001278:	d02a      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x154>
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	2208      	movs	r2, #8
 800127e:	4013      	ands	r3, r2
 8001280:	d026      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	210e      	movs	r1, #14
 800128e:	438a      	bics	r2, r1
 8001290:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001296:	221c      	movs	r2, #28
 8001298:	401a      	ands	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	2101      	movs	r1, #1
 80012a0:	4091      	lsls	r1, r2
 80012a2:	000a      	movs	r2, r1
 80012a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2225      	movs	r2, #37	@ 0x25
 80012b0:	2101      	movs	r1, #1
 80012b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2224      	movs	r2, #36	@ 0x24
 80012b8:	2100      	movs	r1, #0
 80012ba:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	0010      	movs	r0, r2
 80012cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	46c0      	nop			@ (mov r8, r8)
}
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b004      	add	sp, #16
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80012ee:	e143      	b.n	8001578 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4091      	lsls	r1, r2
 80012fa:	000a      	movs	r2, r1
 80012fc:	4013      	ands	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d100      	bne.n	8001308 <HAL_GPIO_Init+0x30>
 8001306:	e134      	b.n	8001572 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2203      	movs	r2, #3
 800130e:	4013      	ands	r3, r2
 8001310:	2b01      	cmp	r3, #1
 8001312:	d005      	beq.n	8001320 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2203      	movs	r2, #3
 800131a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800131c:	2b02      	cmp	r3, #2
 800131e:	d130      	bne.n	8001382 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	409a      	lsls	r2, r3
 800132e:	0013      	movs	r3, r2
 8001330:	43da      	mvns	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	409a      	lsls	r2, r3
 8001342:	0013      	movs	r3, r2
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001356:	2201      	movs	r2, #1
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	43da      	mvns	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	2201      	movs	r2, #1
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
 8001374:	0013      	movs	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2203      	movs	r2, #3
 8001388:	4013      	ands	r3, r2
 800138a:	2b03      	cmp	r3, #3
 800138c:	d017      	beq.n	80013be <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	2203      	movs	r2, #3
 800139a:	409a      	lsls	r2, r3
 800139c:	0013      	movs	r3, r2
 800139e:	43da      	mvns	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	409a      	lsls	r2, r3
 80013b0:	0013      	movs	r3, r2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2203      	movs	r2, #3
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d123      	bne.n	8001412 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	08da      	lsrs	r2, r3, #3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3208      	adds	r2, #8
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	58d3      	ldr	r3, [r2, r3]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2207      	movs	r2, #7
 80013dc:	4013      	ands	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	43da      	mvns	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2107      	movs	r1, #7
 80013f6:	400b      	ands	r3, r1
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	08da      	lsrs	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3208      	adds	r2, #8
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	6939      	ldr	r1, [r7, #16]
 8001410:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	409a      	lsls	r2, r3
 8001420:	0013      	movs	r3, r2
 8001422:	43da      	mvns	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2203      	movs	r2, #3
 8001430:	401a      	ands	r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	409a      	lsls	r2, r3
 8001438:	0013      	movs	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	23c0      	movs	r3, #192	@ 0xc0
 800144c:	029b      	lsls	r3, r3, #10
 800144e:	4013      	ands	r3, r2
 8001450:	d100      	bne.n	8001454 <HAL_GPIO_Init+0x17c>
 8001452:	e08e      	b.n	8001572 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001454:	4b4e      	ldr	r3, [pc, #312]	@ (8001590 <HAL_GPIO_Init+0x2b8>)
 8001456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001458:	4b4d      	ldr	r3, [pc, #308]	@ (8001590 <HAL_GPIO_Init+0x2b8>)
 800145a:	2101      	movs	r1, #1
 800145c:	430a      	orrs	r2, r1
 800145e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001460:	4a4c      	ldr	r2, [pc, #304]	@ (8001594 <HAL_GPIO_Init+0x2bc>)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	589b      	ldr	r3, [r3, r2]
 800146c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	2203      	movs	r2, #3
 8001472:	4013      	ands	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	409a      	lsls	r2, r3
 800147a:	0013      	movs	r3, r2
 800147c:	43da      	mvns	r2, r3
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	23a0      	movs	r3, #160	@ 0xa0
 8001488:	05db      	lsls	r3, r3, #23
 800148a:	429a      	cmp	r2, r3
 800148c:	d00d      	beq.n	80014aa <HAL_GPIO_Init+0x1d2>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a41      	ldr	r2, [pc, #260]	@ (8001598 <HAL_GPIO_Init+0x2c0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d007      	beq.n	80014a6 <HAL_GPIO_Init+0x1ce>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a40      	ldr	r2, [pc, #256]	@ (800159c <HAL_GPIO_Init+0x2c4>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d101      	bne.n	80014a2 <HAL_GPIO_Init+0x1ca>
 800149e:	2302      	movs	r3, #2
 80014a0:	e004      	b.n	80014ac <HAL_GPIO_Init+0x1d4>
 80014a2:	2306      	movs	r3, #6
 80014a4:	e002      	b.n	80014ac <HAL_GPIO_Init+0x1d4>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_GPIO_Init+0x1d4>
 80014aa:	2300      	movs	r3, #0
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	2103      	movs	r1, #3
 80014b0:	400a      	ands	r2, r1
 80014b2:	0092      	lsls	r2, r2, #2
 80014b4:	4093      	lsls	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014bc:	4935      	ldr	r1, [pc, #212]	@ (8001594 <HAL_GPIO_Init+0x2bc>)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3302      	adds	r3, #2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ca:	4b35      	ldr	r3, [pc, #212]	@ (80015a0 <HAL_GPIO_Init+0x2c8>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	43da      	mvns	r2, r3
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	2380      	movs	r3, #128	@ 0x80
 80014e0:	035b      	lsls	r3, r3, #13
 80014e2:	4013      	ands	r3, r2
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014ee:	4b2c      	ldr	r3, [pc, #176]	@ (80015a0 <HAL_GPIO_Init+0x2c8>)
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014f4:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <HAL_GPIO_Init+0x2c8>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	43da      	mvns	r2, r3
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	2380      	movs	r3, #128	@ 0x80
 800150a:	039b      	lsls	r3, r3, #14
 800150c:	4013      	ands	r3, r2
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001518:	4b21      	ldr	r3, [pc, #132]	@ (80015a0 <HAL_GPIO_Init+0x2c8>)
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <HAL_GPIO_Init+0x2c8>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	43da      	mvns	r2, r3
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	2380      	movs	r3, #128	@ 0x80
 8001534:	029b      	lsls	r3, r3, #10
 8001536:	4013      	ands	r3, r2
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001542:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <HAL_GPIO_Init+0x2c8>)
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001548:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <HAL_GPIO_Init+0x2c8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	43da      	mvns	r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	025b      	lsls	r3, r3, #9
 8001560:	4013      	ands	r3, r2
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800156c:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <HAL_GPIO_Init+0x2c8>)
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	40da      	lsrs	r2, r3
 8001580:	1e13      	subs	r3, r2, #0
 8001582:	d000      	beq.n	8001586 <HAL_GPIO_Init+0x2ae>
 8001584:	e6b4      	b.n	80012f0 <HAL_GPIO_Init+0x18>
  }
}
 8001586:	46c0      	nop			@ (mov r8, r8)
 8001588:	46c0      	nop			@ (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	b006      	add	sp, #24
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000
 8001594:	40010000 	.word	0x40010000
 8001598:	50000400 	.word	0x50000400
 800159c:	50000800 	.word	0x50000800
 80015a0:	40010400 	.word	0x40010400

080015a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a4:	b5b0      	push	{r4, r5, r7, lr}
 80015a6:	b08a      	sub	sp, #40	@ 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	f000 fb6c 	bl	8001c90 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b8:	4bc8      	ldr	r3, [pc, #800]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	220c      	movs	r2, #12
 80015be:	4013      	ands	r3, r2
 80015c0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c2:	4bc6      	ldr	r3, [pc, #792]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	2380      	movs	r3, #128	@ 0x80
 80015c8:	025b      	lsls	r3, r3, #9
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2201      	movs	r2, #1
 80015d4:	4013      	ands	r3, r2
 80015d6:	d100      	bne.n	80015da <HAL_RCC_OscConfig+0x36>
 80015d8:	e07d      	b.n	80016d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d007      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	2b0c      	cmp	r3, #12
 80015e4:	d112      	bne.n	800160c <HAL_RCC_OscConfig+0x68>
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	2380      	movs	r3, #128	@ 0x80
 80015ea:	025b      	lsls	r3, r3, #9
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d10d      	bne.n	800160c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f0:	4bba      	ldr	r3, [pc, #744]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2380      	movs	r3, #128	@ 0x80
 80015f6:	029b      	lsls	r3, r3, #10
 80015f8:	4013      	ands	r3, r2
 80015fa:	d100      	bne.n	80015fe <HAL_RCC_OscConfig+0x5a>
 80015fc:	e06a      	b.n	80016d4 <HAL_RCC_OscConfig+0x130>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d166      	bne.n	80016d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	f000 fb42 	bl	8001c90 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	025b      	lsls	r3, r3, #9
 8001614:	429a      	cmp	r2, r3
 8001616:	d107      	bne.n	8001628 <HAL_RCC_OscConfig+0x84>
 8001618:	4bb0      	ldr	r3, [pc, #704]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4baf      	ldr	r3, [pc, #700]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 800161e:	2180      	movs	r1, #128	@ 0x80
 8001620:	0249      	lsls	r1, r1, #9
 8001622:	430a      	orrs	r2, r1
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e027      	b.n	8001678 <HAL_RCC_OscConfig+0xd4>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	23a0      	movs	r3, #160	@ 0xa0
 800162e:	02db      	lsls	r3, r3, #11
 8001630:	429a      	cmp	r2, r3
 8001632:	d10e      	bne.n	8001652 <HAL_RCC_OscConfig+0xae>
 8001634:	4ba9      	ldr	r3, [pc, #676]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4ba8      	ldr	r3, [pc, #672]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 800163a:	2180      	movs	r1, #128	@ 0x80
 800163c:	02c9      	lsls	r1, r1, #11
 800163e:	430a      	orrs	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	4ba6      	ldr	r3, [pc, #664]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4ba5      	ldr	r3, [pc, #660]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 8001648:	2180      	movs	r1, #128	@ 0x80
 800164a:	0249      	lsls	r1, r1, #9
 800164c:	430a      	orrs	r2, r1
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e012      	b.n	8001678 <HAL_RCC_OscConfig+0xd4>
 8001652:	4ba2      	ldr	r3, [pc, #648]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4ba1      	ldr	r3, [pc, #644]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 8001658:	49a1      	ldr	r1, [pc, #644]	@ (80018e0 <HAL_RCC_OscConfig+0x33c>)
 800165a:	400a      	ands	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	4b9f      	ldr	r3, [pc, #636]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	2380      	movs	r3, #128	@ 0x80
 8001664:	025b      	lsls	r3, r3, #9
 8001666:	4013      	ands	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4b9b      	ldr	r3, [pc, #620]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b9a      	ldr	r3, [pc, #616]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 8001672:	499c      	ldr	r1, [pc, #624]	@ (80018e4 <HAL_RCC_OscConfig+0x340>)
 8001674:	400a      	ands	r2, r1
 8001676:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d014      	beq.n	80016aa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fa02 	bl	8000a88 <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168a:	f7ff f9fd 	bl	8000a88 <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b64      	cmp	r3, #100	@ 0x64
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e2f9      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800169c:	4b8f      	ldr	r3, [pc, #572]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2380      	movs	r3, #128	@ 0x80
 80016a2:	029b      	lsls	r3, r3, #10
 80016a4:	4013      	ands	r3, r2
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0xe6>
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016aa:	f7ff f9ed 	bl	8000a88 <HAL_GetTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff f9e8 	bl	8000a88 <HAL_GetTick>
 80016b8:	0002      	movs	r2, r0
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	@ 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e2e4      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016c6:	4b85      	ldr	r3, [pc, #532]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	2380      	movs	r3, #128	@ 0x80
 80016cc:	029b      	lsls	r3, r3, #10
 80016ce:	4013      	ands	r3, r2
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x110>
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2202      	movs	r2, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	d100      	bne.n	80016e2 <HAL_RCC_OscConfig+0x13e>
 80016e0:	e099      	b.n	8001816 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80016e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ea:	2220      	movs	r2, #32
 80016ec:	4013      	ands	r3, r2
 80016ee:	d009      	beq.n	8001704 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80016f0:	4b7a      	ldr	r3, [pc, #488]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b79      	ldr	r3, [pc, #484]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 80016f6:	2120      	movs	r1, #32
 80016f8:	430a      	orrs	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80016fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fe:	2220      	movs	r2, #32
 8001700:	4393      	bics	r3, r2
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b04      	cmp	r3, #4
 8001708:	d005      	beq.n	8001716 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	2b0c      	cmp	r3, #12
 800170e:	d13e      	bne.n	800178e <HAL_RCC_OscConfig+0x1ea>
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d13b      	bne.n	800178e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001716:	4b71      	ldr	r3, [pc, #452]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2204      	movs	r2, #4
 800171c:	4013      	ands	r3, r2
 800171e:	d004      	beq.n	800172a <HAL_RCC_OscConfig+0x186>
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e2b2      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b6c      	ldr	r3, [pc, #432]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4a6e      	ldr	r2, [pc, #440]	@ (80018e8 <HAL_RCC_OscConfig+0x344>)
 8001730:	4013      	ands	r3, r2
 8001732:	0019      	movs	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	021a      	lsls	r2, r3, #8
 800173a:	4b68      	ldr	r3, [pc, #416]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 800173c:	430a      	orrs	r2, r1
 800173e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001740:	4b66      	ldr	r3, [pc, #408]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2209      	movs	r2, #9
 8001746:	4393      	bics	r3, r2
 8001748:	0019      	movs	r1, r3
 800174a:	4b64      	ldr	r3, [pc, #400]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 800174c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174e:	430a      	orrs	r2, r1
 8001750:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001752:	f000 fbeb 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8001756:	0001      	movs	r1, r0
 8001758:	4b60      	ldr	r3, [pc, #384]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	220f      	movs	r2, #15
 8001760:	4013      	ands	r3, r2
 8001762:	4a62      	ldr	r2, [pc, #392]	@ (80018ec <HAL_RCC_OscConfig+0x348>)
 8001764:	5cd3      	ldrb	r3, [r2, r3]
 8001766:	000a      	movs	r2, r1
 8001768:	40da      	lsrs	r2, r3
 800176a:	4b61      	ldr	r3, [pc, #388]	@ (80018f0 <HAL_RCC_OscConfig+0x34c>)
 800176c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800176e:	4b61      	ldr	r3, [pc, #388]	@ (80018f4 <HAL_RCC_OscConfig+0x350>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2513      	movs	r5, #19
 8001774:	197c      	adds	r4, r7, r5
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff f940 	bl	80009fc <HAL_InitTick>
 800177c:	0003      	movs	r3, r0
 800177e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001780:	197b      	adds	r3, r7, r5
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d046      	beq.n	8001816 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001788:	197b      	adds	r3, r7, r5
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	e280      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001790:	2b00      	cmp	r3, #0
 8001792:	d027      	beq.n	80017e4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001794:	4b51      	ldr	r3, [pc, #324]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2209      	movs	r2, #9
 800179a:	4393      	bics	r3, r2
 800179c:	0019      	movs	r1, r3
 800179e:	4b4f      	ldr	r3, [pc, #316]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 80017a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017a2:	430a      	orrs	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff f96f 	bl	8000a88 <HAL_GetTick>
 80017aa:	0003      	movs	r3, r0
 80017ac:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff f96a 	bl	8000a88 <HAL_GetTick>
 80017b4:	0002      	movs	r2, r0
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e266      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017c2:	4b46      	ldr	r3, [pc, #280]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2204      	movs	r2, #4
 80017c8:	4013      	ands	r3, r2
 80017ca:	d0f1      	beq.n	80017b0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017cc:	4b43      	ldr	r3, [pc, #268]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	4a45      	ldr	r2, [pc, #276]	@ (80018e8 <HAL_RCC_OscConfig+0x344>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	021a      	lsls	r2, r3, #8
 80017dc:	4b3f      	ldr	r3, [pc, #252]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 80017de:	430a      	orrs	r2, r1
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	e018      	b.n	8001816 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e4:	4b3d      	ldr	r3, [pc, #244]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b3c      	ldr	r3, [pc, #240]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 80017ea:	2101      	movs	r1, #1
 80017ec:	438a      	bics	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff f94a 	bl	8000a88 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fa:	f7ff f945 	bl	8000a88 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e241      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800180c:	4b33      	ldr	r3, [pc, #204]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2204      	movs	r2, #4
 8001812:	4013      	ands	r3, r2
 8001814:	d1f1      	bne.n	80017fa <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2210      	movs	r2, #16
 800181c:	4013      	ands	r3, r2
 800181e:	d100      	bne.n	8001822 <HAL_RCC_OscConfig+0x27e>
 8001820:	e0a1      	b.n	8001966 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d140      	bne.n	80018aa <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001828:	4b2c      	ldr	r3, [pc, #176]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	2380      	movs	r3, #128	@ 0x80
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4013      	ands	r3, r2
 8001832:	d005      	beq.n	8001840 <HAL_RCC_OscConfig+0x29c>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e227      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001840:	4b26      	ldr	r3, [pc, #152]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	4a2c      	ldr	r2, [pc, #176]	@ (80018f8 <HAL_RCC_OscConfig+0x354>)
 8001846:	4013      	ands	r3, r2
 8001848:	0019      	movs	r1, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1a      	ldr	r2, [r3, #32]
 800184e:	4b23      	ldr	r3, [pc, #140]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 8001850:	430a      	orrs	r2, r1
 8001852:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001854:	4b21      	ldr	r3, [pc, #132]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	0a19      	lsrs	r1, r3, #8
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	061a      	lsls	r2, r3, #24
 8001862:	4b1e      	ldr	r3, [pc, #120]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 8001864:	430a      	orrs	r2, r1
 8001866:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	0b5b      	lsrs	r3, r3, #13
 800186e:	3301      	adds	r3, #1
 8001870:	2280      	movs	r2, #128	@ 0x80
 8001872:	0212      	lsls	r2, r2, #8
 8001874:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001876:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	210f      	movs	r1, #15
 800187e:	400b      	ands	r3, r1
 8001880:	491a      	ldr	r1, [pc, #104]	@ (80018ec <HAL_RCC_OscConfig+0x348>)
 8001882:	5ccb      	ldrb	r3, [r1, r3]
 8001884:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001886:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <HAL_RCC_OscConfig+0x34c>)
 8001888:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800188a:	4b1a      	ldr	r3, [pc, #104]	@ (80018f4 <HAL_RCC_OscConfig+0x350>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2513      	movs	r5, #19
 8001890:	197c      	adds	r4, r7, r5
 8001892:	0018      	movs	r0, r3
 8001894:	f7ff f8b2 	bl	80009fc <HAL_InitTick>
 8001898:	0003      	movs	r3, r0
 800189a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800189c:	197b      	adds	r3, r7, r5
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d060      	beq.n	8001966 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80018a4:	197b      	adds	r3, r7, r5
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	e1f2      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d03f      	beq.n	8001932 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018b2:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <HAL_RCC_OscConfig+0x338>)
 80018b8:	2180      	movs	r1, #128	@ 0x80
 80018ba:	0049      	lsls	r1, r1, #1
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff f8e2 	bl	8000a88 <HAL_GetTick>
 80018c4:	0003      	movs	r3, r0
 80018c6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018c8:	e018      	b.n	80018fc <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ca:	f7ff f8dd 	bl	8000a88 <HAL_GetTick>
 80018ce:	0002      	movs	r2, r0
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d911      	bls.n	80018fc <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1d9      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
 80018dc:	40021000 	.word	0x40021000
 80018e0:	fffeffff 	.word	0xfffeffff
 80018e4:	fffbffff 	.word	0xfffbffff
 80018e8:	ffffe0ff 	.word	0xffffe0ff
 80018ec:	08002d3c 	.word	0x08002d3c
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004
 80018f8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018fc:	4bc9      	ldr	r3, [pc, #804]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2380      	movs	r3, #128	@ 0x80
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4013      	ands	r3, r2
 8001906:	d0e0      	beq.n	80018ca <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001908:	4bc6      	ldr	r3, [pc, #792]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	4ac6      	ldr	r2, [pc, #792]	@ (8001c28 <HAL_RCC_OscConfig+0x684>)
 800190e:	4013      	ands	r3, r2
 8001910:	0019      	movs	r1, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1a      	ldr	r2, [r3, #32]
 8001916:	4bc3      	ldr	r3, [pc, #780]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001918:	430a      	orrs	r2, r1
 800191a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800191c:	4bc1      	ldr	r3, [pc, #772]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	0a19      	lsrs	r1, r3, #8
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	061a      	lsls	r2, r3, #24
 800192a:	4bbe      	ldr	r3, [pc, #760]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 800192c:	430a      	orrs	r2, r1
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	e019      	b.n	8001966 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001932:	4bbc      	ldr	r3, [pc, #752]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4bbb      	ldr	r3, [pc, #748]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001938:	49bc      	ldr	r1, [pc, #752]	@ (8001c2c <HAL_RCC_OscConfig+0x688>)
 800193a:	400a      	ands	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff f8a3 	bl	8000a88 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001948:	f7ff f89e 	bl	8000a88 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e19a      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800195a:	4bb2      	ldr	r3, [pc, #712]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	2380      	movs	r3, #128	@ 0x80
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4013      	ands	r3, r2
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2208      	movs	r2, #8
 800196c:	4013      	ands	r3, r2
 800196e:	d036      	beq.n	80019de <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d019      	beq.n	80019ac <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001978:	4baa      	ldr	r3, [pc, #680]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 800197a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800197c:	4ba9      	ldr	r3, [pc, #676]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 800197e:	2101      	movs	r1, #1
 8001980:	430a      	orrs	r2, r1
 8001982:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff f880 	bl	8000a88 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800198e:	f7ff f87b 	bl	8000a88 <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e177      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019a0:	4ba0      	ldr	r3, [pc, #640]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 80019a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019a4:	2202      	movs	r2, #2
 80019a6:	4013      	ands	r3, r2
 80019a8:	d0f1      	beq.n	800198e <HAL_RCC_OscConfig+0x3ea>
 80019aa:	e018      	b.n	80019de <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ac:	4b9d      	ldr	r3, [pc, #628]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 80019ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019b0:	4b9c      	ldr	r3, [pc, #624]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	438a      	bics	r2, r1
 80019b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b8:	f7ff f866 	bl	8000a88 <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c2:	f7ff f861 	bl	8000a88 <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e15d      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019d4:	4b93      	ldr	r3, [pc, #588]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 80019d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019d8:	2202      	movs	r2, #2
 80019da:	4013      	ands	r3, r2
 80019dc:	d1f1      	bne.n	80019c2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2204      	movs	r2, #4
 80019e4:	4013      	ands	r3, r2
 80019e6:	d100      	bne.n	80019ea <HAL_RCC_OscConfig+0x446>
 80019e8:	e0ae      	b.n	8001b48 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ea:	2023      	movs	r0, #35	@ 0x23
 80019ec:	183b      	adds	r3, r7, r0
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f2:	4b8c      	ldr	r3, [pc, #560]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 80019f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80019f6:	2380      	movs	r3, #128	@ 0x80
 80019f8:	055b      	lsls	r3, r3, #21
 80019fa:	4013      	ands	r3, r2
 80019fc:	d109      	bne.n	8001a12 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	4b89      	ldr	r3, [pc, #548]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001a00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a02:	4b88      	ldr	r3, [pc, #544]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001a04:	2180      	movs	r1, #128	@ 0x80
 8001a06:	0549      	lsls	r1, r1, #21
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001a0c:	183b      	adds	r3, r7, r0
 8001a0e:	2201      	movs	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a12:	4b87      	ldr	r3, [pc, #540]	@ (8001c30 <HAL_RCC_OscConfig+0x68c>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	2380      	movs	r3, #128	@ 0x80
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d11a      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1e:	4b84      	ldr	r3, [pc, #528]	@ (8001c30 <HAL_RCC_OscConfig+0x68c>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b83      	ldr	r3, [pc, #524]	@ (8001c30 <HAL_RCC_OscConfig+0x68c>)
 8001a24:	2180      	movs	r1, #128	@ 0x80
 8001a26:	0049      	lsls	r1, r1, #1
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2c:	f7ff f82c 	bl	8000a88 <HAL_GetTick>
 8001a30:	0003      	movs	r3, r0
 8001a32:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a36:	f7ff f827 	bl	8000a88 <HAL_GetTick>
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b64      	cmp	r3, #100	@ 0x64
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e123      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a48:	4b79      	ldr	r3, [pc, #484]	@ (8001c30 <HAL_RCC_OscConfig+0x68c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	2380      	movs	r3, #128	@ 0x80
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4013      	ands	r3, r2
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	2380      	movs	r3, #128	@ 0x80
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4cc>
 8001a60:	4b70      	ldr	r3, [pc, #448]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001a62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a64:	4b6f      	ldr	r3, [pc, #444]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001a66:	2180      	movs	r1, #128	@ 0x80
 8001a68:	0049      	lsls	r1, r1, #1
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a6e:	e031      	b.n	8001ad4 <HAL_RCC_OscConfig+0x530>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10c      	bne.n	8001a92 <HAL_RCC_OscConfig+0x4ee>
 8001a78:	4b6a      	ldr	r3, [pc, #424]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001a7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a7c:	4b69      	ldr	r3, [pc, #420]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001a7e:	496b      	ldr	r1, [pc, #428]	@ (8001c2c <HAL_RCC_OscConfig+0x688>)
 8001a80:	400a      	ands	r2, r1
 8001a82:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a84:	4b67      	ldr	r3, [pc, #412]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001a86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a88:	4b66      	ldr	r3, [pc, #408]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001a8a:	496a      	ldr	r1, [pc, #424]	@ (8001c34 <HAL_RCC_OscConfig+0x690>)
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a90:	e020      	b.n	8001ad4 <HAL_RCC_OscConfig+0x530>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	23a0      	movs	r3, #160	@ 0xa0
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d10e      	bne.n	8001abc <HAL_RCC_OscConfig+0x518>
 8001a9e:	4b61      	ldr	r3, [pc, #388]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001aa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001aa2:	4b60      	ldr	r3, [pc, #384]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001aa4:	2180      	movs	r1, #128	@ 0x80
 8001aa6:	00c9      	lsls	r1, r1, #3
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	651a      	str	r2, [r3, #80]	@ 0x50
 8001aac:	4b5d      	ldr	r3, [pc, #372]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001aae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ab0:	4b5c      	ldr	r3, [pc, #368]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001ab2:	2180      	movs	r1, #128	@ 0x80
 8001ab4:	0049      	lsls	r1, r1, #1
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	651a      	str	r2, [r3, #80]	@ 0x50
 8001aba:	e00b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x530>
 8001abc:	4b59      	ldr	r3, [pc, #356]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001abe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ac0:	4b58      	ldr	r3, [pc, #352]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001ac2:	495a      	ldr	r1, [pc, #360]	@ (8001c2c <HAL_RCC_OscConfig+0x688>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ac8:	4b56      	ldr	r3, [pc, #344]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001aca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001acc:	4b55      	ldr	r3, [pc, #340]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001ace:	4959      	ldr	r1, [pc, #356]	@ (8001c34 <HAL_RCC_OscConfig+0x690>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d015      	beq.n	8001b08 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7fe ffd4 	bl	8000a88 <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ae4:	e009      	b.n	8001afa <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7fe ffcf 	bl	8000a88 <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	4a51      	ldr	r2, [pc, #324]	@ (8001c38 <HAL_RCC_OscConfig+0x694>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e0ca      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001afa:	4b4a      	ldr	r3, [pc, #296]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001afc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001afe:	2380      	movs	r3, #128	@ 0x80
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4013      	ands	r3, r2
 8001b04:	d0ef      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x542>
 8001b06:	e014      	b.n	8001b32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b08:	f7fe ffbe 	bl	8000a88 <HAL_GetTick>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b10:	e009      	b.n	8001b26 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7fe ffb9 	bl	8000a88 <HAL_GetTick>
 8001b16:	0002      	movs	r2, r0
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	4a46      	ldr	r2, [pc, #280]	@ (8001c38 <HAL_RCC_OscConfig+0x694>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e0b4      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b26:	4b3f      	ldr	r3, [pc, #252]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001b28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b2a:	2380      	movs	r3, #128	@ 0x80
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d1ef      	bne.n	8001b12 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b32:	2323      	movs	r3, #35	@ 0x23
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3c:	4b39      	ldr	r3, [pc, #228]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001b3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b40:	4b38      	ldr	r3, [pc, #224]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001b42:	493e      	ldr	r1, [pc, #248]	@ (8001c3c <HAL_RCC_OscConfig+0x698>)
 8001b44:	400a      	ands	r2, r1
 8001b46:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d100      	bne.n	8001b52 <HAL_RCC_OscConfig+0x5ae>
 8001b50:	e09d      	b.n	8001c8e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	2b0c      	cmp	r3, #12
 8001b56:	d100      	bne.n	8001b5a <HAL_RCC_OscConfig+0x5b6>
 8001b58:	e076      	b.n	8001c48 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d145      	bne.n	8001bee <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b62:	4b30      	ldr	r3, [pc, #192]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b2f      	ldr	r3, [pc, #188]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001b68:	4935      	ldr	r1, [pc, #212]	@ (8001c40 <HAL_RCC_OscConfig+0x69c>)
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7fe ff8b 	bl	8000a88 <HAL_GetTick>
 8001b72:	0003      	movs	r3, r0
 8001b74:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b78:	f7fe ff86 	bl	8000a88 <HAL_GetTick>
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e082      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b8a:	4b26      	ldr	r3, [pc, #152]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	049b      	lsls	r3, r3, #18
 8001b92:	4013      	ands	r3, r2
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b96:	4b23      	ldr	r3, [pc, #140]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8001c44 <HAL_RCC_OscConfig+0x6a0>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b1a      	ldr	r3, [pc, #104]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001bbc:	2180      	movs	r1, #128	@ 0x80
 8001bbe:	0449      	lsls	r1, r1, #17
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7fe ff60 	bl	8000a88 <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bce:	f7fe ff5b 	bl	8000a88 <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e057      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001be0:	4b10      	ldr	r3, [pc, #64]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	049b      	lsls	r3, r3, #18
 8001be8:	4013      	ands	r3, r2
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x62a>
 8001bec:	e04f      	b.n	8001c8e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b0d      	ldr	r3, [pc, #52]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001bf4:	4912      	ldr	r1, [pc, #72]	@ (8001c40 <HAL_RCC_OscConfig+0x69c>)
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7fe ff45 	bl	8000a88 <HAL_GetTick>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c04:	f7fe ff40 	bl	8000a88 <HAL_GetTick>
 8001c08:	0002      	movs	r2, r0
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e03c      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c16:	4b03      	ldr	r3, [pc, #12]	@ (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	2380      	movs	r3, #128	@ 0x80
 8001c1c:	049b      	lsls	r3, r3, #18
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x660>
 8001c22:	e034      	b.n	8001c8e <HAL_RCC_OscConfig+0x6ea>
 8001c24:	40021000 	.word	0x40021000
 8001c28:	ffff1fff 	.word	0xffff1fff
 8001c2c:	fffffeff 	.word	0xfffffeff
 8001c30:	40007000 	.word	0x40007000
 8001c34:	fffffbff 	.word	0xfffffbff
 8001c38:	00001388 	.word	0x00001388
 8001c3c:	efffffff 	.word	0xefffffff
 8001c40:	feffffff 	.word	0xfeffffff
 8001c44:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e01d      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c54:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <HAL_RCC_OscConfig+0x6f4>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	2380      	movs	r3, #128	@ 0x80
 8001c5e:	025b      	lsls	r3, r3, #9
 8001c60:	401a      	ands	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d10f      	bne.n	8001c8a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	23f0      	movs	r3, #240	@ 0xf0
 8001c6e:	039b      	lsls	r3, r3, #14
 8001c70:	401a      	ands	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	23c0      	movs	r3, #192	@ 0xc0
 8001c7e:	041b      	lsls	r3, r3, #16
 8001c80:	401a      	ands	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b00a      	add	sp, #40	@ 0x28
 8001c96:	bdb0      	pop	{r4, r5, r7, pc}
 8001c98:	40021000 	.word	0x40021000

08001c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c9c:	b5b0      	push	{r4, r5, r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e128      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b96      	ldr	r3, [pc, #600]	@ (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d91e      	bls.n	8001cfc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b93      	ldr	r3, [pc, #588]	@ (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4393      	bics	r3, r2
 8001cc6:	0019      	movs	r1, r3
 8001cc8:	4b90      	ldr	r3, [pc, #576]	@ (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cd0:	f7fe feda 	bl	8000a88 <HAL_GetTick>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd8:	e009      	b.n	8001cee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cda:	f7fe fed5 	bl	8000a88 <HAL_GetTick>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	4a8a      	ldr	r2, [pc, #552]	@ (8001f10 <HAL_RCC_ClockConfig+0x274>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e109      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b87      	ldr	r3, [pc, #540]	@ (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d1ee      	bne.n	8001cda <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2202      	movs	r2, #2
 8001d02:	4013      	ands	r3, r2
 8001d04:	d009      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d06:	4b83      	ldr	r3, [pc, #524]	@ (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	22f0      	movs	r2, #240	@ 0xf0
 8001d0c:	4393      	bics	r3, r2
 8001d0e:	0019      	movs	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	4b7f      	ldr	r3, [pc, #508]	@ (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001d16:	430a      	orrs	r2, r1
 8001d18:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4013      	ands	r3, r2
 8001d22:	d100      	bne.n	8001d26 <HAL_RCC_ClockConfig+0x8a>
 8001d24:	e089      	b.n	8001e3a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d2e:	4b79      	ldr	r3, [pc, #484]	@ (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	2380      	movs	r3, #128	@ 0x80
 8001d34:	029b      	lsls	r3, r3, #10
 8001d36:	4013      	ands	r3, r2
 8001d38:	d120      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0e1      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d46:	4b73      	ldr	r3, [pc, #460]	@ (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	049b      	lsls	r3, r3, #18
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d114      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0d5      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d106      	bne.n	8001d6c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d5e:	4b6d      	ldr	r3, [pc, #436]	@ (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2204      	movs	r2, #4
 8001d64:	4013      	ands	r3, r2
 8001d66:	d109      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0ca      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d6c:	4b69      	ldr	r3, [pc, #420]	@ (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	@ 0x80
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4013      	ands	r3, r2
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0c2      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d7c:	4b65      	ldr	r3, [pc, #404]	@ (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2203      	movs	r2, #3
 8001d82:	4393      	bics	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	4b62      	ldr	r3, [pc, #392]	@ (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d90:	f7fe fe7a 	bl	8000a88 <HAL_GetTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d111      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001da0:	e009      	b.n	8001db6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da2:	f7fe fe71 	bl	8000a88 <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	4a58      	ldr	r2, [pc, #352]	@ (8001f10 <HAL_RCC_ClockConfig+0x274>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e0a5      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001db6:	4b57      	ldr	r3, [pc, #348]	@ (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	220c      	movs	r2, #12
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d1ef      	bne.n	8001da2 <HAL_RCC_ClockConfig+0x106>
 8001dc2:	e03a      	b.n	8001e3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d111      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dcc:	e009      	b.n	8001de2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dce:	f7fe fe5b 	bl	8000a88 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	4a4d      	ldr	r2, [pc, #308]	@ (8001f10 <HAL_RCC_ClockConfig+0x274>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e08f      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de2:	4b4c      	ldr	r3, [pc, #304]	@ (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	220c      	movs	r2, #12
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b0c      	cmp	r3, #12
 8001dec:	d1ef      	bne.n	8001dce <HAL_RCC_ClockConfig+0x132>
 8001dee:	e024      	b.n	8001e3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d11b      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df8:	e009      	b.n	8001e0e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfa:	f7fe fe45 	bl	8000a88 <HAL_GetTick>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	4a42      	ldr	r2, [pc, #264]	@ (8001f10 <HAL_RCC_ClockConfig+0x274>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e079      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e0e:	4b41      	ldr	r3, [pc, #260]	@ (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	220c      	movs	r2, #12
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d1ef      	bne.n	8001dfa <HAL_RCC_ClockConfig+0x15e>
 8001e1a:	e00e      	b.n	8001e3a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f7fe fe34 	bl	8000a88 <HAL_GetTick>
 8001e20:	0002      	movs	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	4a3a      	ldr	r2, [pc, #232]	@ (8001f10 <HAL_RCC_ClockConfig+0x274>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e068      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e30:	4b38      	ldr	r3, [pc, #224]	@ (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	220c      	movs	r2, #12
 8001e36:	4013      	ands	r3, r2
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3a:	4b34      	ldr	r3, [pc, #208]	@ (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4013      	ands	r3, r2
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d21e      	bcs.n	8001e86 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e48:	4b30      	ldr	r3, [pc, #192]	@ (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4393      	bics	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	4b2e      	ldr	r3, [pc, #184]	@ (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e5a:	f7fe fe15 	bl	8000a88 <HAL_GetTick>
 8001e5e:	0003      	movs	r3, r0
 8001e60:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	e009      	b.n	8001e78 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7fe fe10 	bl	8000a88 <HAL_GetTick>
 8001e68:	0002      	movs	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	4a28      	ldr	r2, [pc, #160]	@ (8001f10 <HAL_RCC_ClockConfig+0x274>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e044      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e78:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4013      	ands	r3, r2
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d1ee      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d009      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e90:	4b20      	ldr	r3, [pc, #128]	@ (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4a20      	ldr	r2, [pc, #128]	@ (8001f18 <HAL_RCC_ClockConfig+0x27c>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	0019      	movs	r1, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d00a      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eae:	4b19      	ldr	r3, [pc, #100]	@ (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8001f1c <HAL_RCC_ClockConfig+0x280>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	00da      	lsls	r2, r3, #3
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ec4:	f000 f832 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8001ec8:	0001      	movs	r1, r0
 8001eca:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <HAL_RCC_ClockConfig+0x278>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	4a12      	ldr	r2, [pc, #72]	@ (8001f20 <HAL_RCC_ClockConfig+0x284>)
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	000a      	movs	r2, r1
 8001eda:	40da      	lsrs	r2, r3
 8001edc:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <HAL_RCC_ClockConfig+0x288>)
 8001ede:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ee0:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <HAL_RCC_ClockConfig+0x28c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	250b      	movs	r5, #11
 8001ee6:	197c      	adds	r4, r7, r5
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7fe fd87 	bl	80009fc <HAL_InitTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001ef2:	197b      	adds	r3, r7, r5
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001efa:	197b      	adds	r3, r7, r5
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	0018      	movs	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b004      	add	sp, #16
 8001f08:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0a:	46c0      	nop			@ (mov r8, r8)
 8001f0c:	40022000 	.word	0x40022000
 8001f10:	00001388 	.word	0x00001388
 8001f14:	40021000 	.word	0x40021000
 8001f18:	fffff8ff 	.word	0xfffff8ff
 8001f1c:	ffffc7ff 	.word	0xffffc7ff
 8001f20:	08002d3c 	.word	0x08002d3c
 8001f24:	20000000 	.word	0x20000000
 8001f28:	20000004 	.word	0x20000004

08001f2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f2c:	b5b0      	push	{r4, r5, r7, lr}
 8001f2e:	b08e      	sub	sp, #56	@ 0x38
 8001f30:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f32:	4b4c      	ldr	r3, [pc, #304]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f3a:	230c      	movs	r3, #12
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d014      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x40>
 8001f42:	d900      	bls.n	8001f46 <HAL_RCC_GetSysClockFreq+0x1a>
 8001f44:	e07b      	b.n	800203e <HAL_RCC_GetSysClockFreq+0x112>
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d002      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x24>
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d00b      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f4e:	e076      	b.n	800203e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f50:	4b44      	ldr	r3, [pc, #272]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2210      	movs	r2, #16
 8001f56:	4013      	ands	r3, r2
 8001f58:	d002      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001f5a:	4b43      	ldr	r3, [pc, #268]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f5c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001f5e:	e07c      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001f60:	4b42      	ldr	r3, [pc, #264]	@ (800206c <HAL_RCC_GetSysClockFreq+0x140>)
 8001f62:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001f64:	e079      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f66:	4b42      	ldr	r3, [pc, #264]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x144>)
 8001f68:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001f6a:	e076      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f6e:	0c9a      	lsrs	r2, r3, #18
 8001f70:	230f      	movs	r3, #15
 8001f72:	401a      	ands	r2, r3
 8001f74:	4b3f      	ldr	r3, [pc, #252]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x148>)
 8001f76:	5c9b      	ldrb	r3, [r3, r2]
 8001f78:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f7c:	0d9a      	lsrs	r2, r3, #22
 8001f7e:	2303      	movs	r3, #3
 8001f80:	4013      	ands	r3, r2
 8001f82:	3301      	adds	r3, #1
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f86:	4b37      	ldr	r3, [pc, #220]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	2380      	movs	r3, #128	@ 0x80
 8001f8c:	025b      	lsls	r3, r3, #9
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d01a      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	4a35      	ldr	r2, [pc, #212]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x144>)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	69b8      	ldr	r0, [r7, #24]
 8001fa0:	69f9      	ldr	r1, [r7, #28]
 8001fa2:	f7fe f95d 	bl	8000260 <__aeabi_lmul>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	000b      	movs	r3, r1
 8001faa:	0010      	movs	r0, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f7fe f931 	bl	8000220 <__aeabi_uldivmod>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	000b      	movs	r3, r1
 8001fc2:	0013      	movs	r3, r2
 8001fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fc6:	e037      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001fc8:	4b26      	ldr	r3, [pc, #152]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2210      	movs	r2, #16
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d01a      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4a23      	ldr	r2, [pc, #140]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	68b8      	ldr	r0, [r7, #8]
 8001fe0:	68f9      	ldr	r1, [r7, #12]
 8001fe2:	f7fe f93d 	bl	8000260 <__aeabi_lmul>
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	000b      	movs	r3, r1
 8001fea:	0010      	movs	r0, r2
 8001fec:	0019      	movs	r1, r3
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	603b      	str	r3, [r7, #0]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f7fe f911 	bl	8000220 <__aeabi_uldivmod>
 8001ffe:	0002      	movs	r2, r0
 8002000:	000b      	movs	r3, r1
 8002002:	0013      	movs	r3, r2
 8002004:	637b      	str	r3, [r7, #52]	@ 0x34
 8002006:	e017      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200a:	0018      	movs	r0, r3
 800200c:	2300      	movs	r3, #0
 800200e:	0019      	movs	r1, r3
 8002010:	4a16      	ldr	r2, [pc, #88]	@ (800206c <HAL_RCC_GetSysClockFreq+0x140>)
 8002012:	2300      	movs	r3, #0
 8002014:	f7fe f924 	bl	8000260 <__aeabi_lmul>
 8002018:	0002      	movs	r2, r0
 800201a:	000b      	movs	r3, r1
 800201c:	0010      	movs	r0, r2
 800201e:	0019      	movs	r1, r3
 8002020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002022:	001c      	movs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	001d      	movs	r5, r3
 8002028:	0022      	movs	r2, r4
 800202a:	002b      	movs	r3, r5
 800202c:	f7fe f8f8 	bl	8000220 <__aeabi_uldivmod>
 8002030:	0002      	movs	r2, r0
 8002032:	000b      	movs	r3, r1
 8002034:	0013      	movs	r3, r2
 8002036:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800203a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800203c:	e00d      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800203e:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x138>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	0b5b      	lsrs	r3, r3, #13
 8002044:	2207      	movs	r2, #7
 8002046:	4013      	ands	r3, r2
 8002048:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	3301      	adds	r3, #1
 800204e:	2280      	movs	r2, #128	@ 0x80
 8002050:	0212      	lsls	r2, r2, #8
 8002052:	409a      	lsls	r2, r3
 8002054:	0013      	movs	r3, r2
 8002056:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002058:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800205a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800205c:	0018      	movs	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	b00e      	add	sp, #56	@ 0x38
 8002062:	bdb0      	pop	{r4, r5, r7, pc}
 8002064:	40021000 	.word	0x40021000
 8002068:	003d0900 	.word	0x003d0900
 800206c:	00f42400 	.word	0x00f42400
 8002070:	007a1200 	.word	0x007a1200
 8002074:	08002d54 	.word	0x08002d54

08002078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800207c:	4b02      	ldr	r3, [pc, #8]	@ (8002088 <HAL_RCC_GetHCLKFreq+0x10>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	20000000 	.word	0x20000000

0800208c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002090:	f7ff fff2 	bl	8002078 <HAL_RCC_GetHCLKFreq>
 8002094:	0001      	movs	r1, r0
 8002096:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	2207      	movs	r2, #7
 800209e:	4013      	ands	r3, r2
 80020a0:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020a2:	5cd3      	ldrb	r3, [r2, r3]
 80020a4:	40d9      	lsrs	r1, r3
 80020a6:	000b      	movs	r3, r1
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	40021000 	.word	0x40021000
 80020b4:	08002d4c 	.word	0x08002d4c

080020b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020bc:	f7ff ffdc 	bl	8002078 <HAL_RCC_GetHCLKFreq>
 80020c0:	0001      	movs	r1, r0
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	0adb      	lsrs	r3, r3, #11
 80020c8:	2207      	movs	r2, #7
 80020ca:	4013      	ands	r3, r2
 80020cc:	4a04      	ldr	r2, [pc, #16]	@ (80020e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	40d9      	lsrs	r1, r3
 80020d2:	000b      	movs	r3, r1
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	40021000 	.word	0x40021000
 80020e0:	08002d4c 	.word	0x08002d4c

080020e4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80020ec:	2017      	movs	r0, #23
 80020ee:	183b      	adds	r3, r7, r0
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2220      	movs	r2, #32
 80020fa:	4013      	ands	r3, r2
 80020fc:	d100      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80020fe:	e0c7      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002100:	4b84      	ldr	r3, [pc, #528]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002102:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002104:	2380      	movs	r3, #128	@ 0x80
 8002106:	055b      	lsls	r3, r3, #21
 8002108:	4013      	ands	r3, r2
 800210a:	d109      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210c:	4b81      	ldr	r3, [pc, #516]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800210e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002110:	4b80      	ldr	r3, [pc, #512]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002112:	2180      	movs	r1, #128	@ 0x80
 8002114:	0549      	lsls	r1, r1, #21
 8002116:	430a      	orrs	r2, r1
 8002118:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800211a:	183b      	adds	r3, r7, r0
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	4b7d      	ldr	r3, [pc, #500]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2380      	movs	r3, #128	@ 0x80
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4013      	ands	r3, r2
 800212a:	d11a      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212c:	4b7a      	ldr	r3, [pc, #488]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b79      	ldr	r3, [pc, #484]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002132:	2180      	movs	r1, #128	@ 0x80
 8002134:	0049      	lsls	r1, r1, #1
 8002136:	430a      	orrs	r2, r1
 8002138:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213a:	f7fe fca5 	bl	8000a88 <HAL_GetTick>
 800213e:	0003      	movs	r3, r0
 8002140:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002142:	e008      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002144:	f7fe fca0 	bl	8000a88 <HAL_GetTick>
 8002148:	0002      	movs	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	@ 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e0d9      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002156:	4b70      	ldr	r3, [pc, #448]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	2380      	movs	r3, #128	@ 0x80
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4013      	ands	r3, r2
 8002160:	d0f0      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002162:	4b6c      	ldr	r3, [pc, #432]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	23c0      	movs	r3, #192	@ 0xc0
 8002168:	039b      	lsls	r3, r3, #14
 800216a:	4013      	ands	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	23c0      	movs	r3, #192	@ 0xc0
 8002174:	039b      	lsls	r3, r3, #14
 8002176:	4013      	ands	r3, r2
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	429a      	cmp	r2, r3
 800217c:	d013      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	23c0      	movs	r3, #192	@ 0xc0
 8002184:	029b      	lsls	r3, r3, #10
 8002186:	401a      	ands	r2, r3
 8002188:	23c0      	movs	r3, #192	@ 0xc0
 800218a:	029b      	lsls	r3, r3, #10
 800218c:	429a      	cmp	r2, r3
 800218e:	d10a      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002190:	4b60      	ldr	r3, [pc, #384]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	2380      	movs	r3, #128	@ 0x80
 8002196:	029b      	lsls	r3, r3, #10
 8002198:	401a      	ands	r2, r3
 800219a:	2380      	movs	r3, #128	@ 0x80
 800219c:	029b      	lsls	r3, r3, #10
 800219e:	429a      	cmp	r2, r3
 80021a0:	d101      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0b1      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80021a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021aa:	23c0      	movs	r3, #192	@ 0xc0
 80021ac:	029b      	lsls	r3, r3, #10
 80021ae:	4013      	ands	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d03b      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	23c0      	movs	r3, #192	@ 0xc0
 80021be:	029b      	lsls	r3, r3, #10
 80021c0:	4013      	ands	r3, r2
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d033      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2220      	movs	r2, #32
 80021ce:	4013      	ands	r3, r2
 80021d0:	d02e      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80021d2:	4b50      	ldr	r3, [pc, #320]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021d6:	4a51      	ldr	r2, [pc, #324]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80021d8:	4013      	ands	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021e2:	2180      	movs	r1, #128	@ 0x80
 80021e4:	0309      	lsls	r1, r1, #12
 80021e6:	430a      	orrs	r2, r1
 80021e8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021ee:	4b49      	ldr	r3, [pc, #292]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021f0:	494b      	ldr	r1, [pc, #300]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80021f2:	400a      	ands	r2, r1
 80021f4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80021f6:	4b47      	ldr	r3, [pc, #284]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	2380      	movs	r3, #128	@ 0x80
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	4013      	ands	r3, r2
 8002204:	d014      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7fe fc3f 	bl	8000a88 <HAL_GetTick>
 800220a:	0003      	movs	r3, r0
 800220c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800220e:	e009      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002210:	f7fe fc3a 	bl	8000a88 <HAL_GetTick>
 8002214:	0002      	movs	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	4a42      	ldr	r2, [pc, #264]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e072      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002224:	4b3b      	ldr	r3, [pc, #236]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002226:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002228:	2380      	movs	r3, #128	@ 0x80
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4013      	ands	r3, r2
 800222e:	d0ef      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2220      	movs	r2, #32
 8002236:	4013      	ands	r3, r2
 8002238:	d01f      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	23c0      	movs	r3, #192	@ 0xc0
 8002240:	029b      	lsls	r3, r3, #10
 8002242:	401a      	ands	r2, r3
 8002244:	23c0      	movs	r3, #192	@ 0xc0
 8002246:	029b      	lsls	r3, r3, #10
 8002248:	429a      	cmp	r2, r3
 800224a:	d10c      	bne.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800224c:	4b31      	ldr	r3, [pc, #196]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a35      	ldr	r2, [pc, #212]	@ (8002328 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002252:	4013      	ands	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	23c0      	movs	r3, #192	@ 0xc0
 800225c:	039b      	lsls	r3, r3, #14
 800225e:	401a      	ands	r2, r3
 8002260:	4b2c      	ldr	r3, [pc, #176]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002262:	430a      	orrs	r2, r1
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	4b2b      	ldr	r3, [pc, #172]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002268:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	23c0      	movs	r3, #192	@ 0xc0
 8002270:	029b      	lsls	r3, r3, #10
 8002272:	401a      	ands	r2, r3
 8002274:	4b27      	ldr	r3, [pc, #156]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002276:	430a      	orrs	r2, r1
 8002278:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800227a:	2317      	movs	r3, #23
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d105      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002284:	4b23      	ldr	r3, [pc, #140]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002286:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002288:	4b22      	ldr	r3, [pc, #136]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800228a:	4928      	ldr	r1, [pc, #160]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800228c:	400a      	ands	r2, r1
 800228e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2202      	movs	r2, #2
 8002296:	4013      	ands	r3, r2
 8002298:	d009      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800229a:	4b1e      	ldr	r3, [pc, #120]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229e:	220c      	movs	r2, #12
 80022a0:	4393      	bics	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022aa:	430a      	orrs	r2, r1
 80022ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2204      	movs	r2, #4
 80022b4:	4013      	ands	r3, r2
 80022b6:	d009      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022b8:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80022be:	4013      	ands	r3, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	4b13      	ldr	r3, [pc, #76]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022c8:	430a      	orrs	r2, r1
 80022ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2208      	movs	r2, #8
 80022d2:	4013      	ands	r3, r2
 80022d4:	d009      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022da:	4a16      	ldr	r2, [pc, #88]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80022dc:	4013      	ands	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022e6:	430a      	orrs	r2, r1
 80022e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2280      	movs	r2, #128	@ 0x80
 80022f0:	4013      	ands	r3, r2
 80022f2:	d009      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80022f4:	4b07      	ldr	r3, [pc, #28]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002338 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	0019      	movs	r1, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002304:	430a      	orrs	r2, r1
 8002306:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	0018      	movs	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	b006      	add	sp, #24
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	40021000 	.word	0x40021000
 8002318:	40007000 	.word	0x40007000
 800231c:	fffcffff 	.word	0xfffcffff
 8002320:	fff7ffff 	.word	0xfff7ffff
 8002324:	00001388 	.word	0x00001388
 8002328:	ffcfffff 	.word	0xffcfffff
 800232c:	efffffff 	.word	0xefffffff
 8002330:	fffff3ff 	.word	0xfffff3ff
 8002334:	ffffcfff 	.word	0xffffcfff
 8002338:	fff3ffff 	.word	0xfff3ffff

0800233c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e044      	b.n	80023d8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002352:	2b00      	cmp	r3, #0
 8002354:	d107      	bne.n	8002366 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2278      	movs	r2, #120	@ 0x78
 800235a:	2100      	movs	r1, #0
 800235c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	0018      	movs	r0, r3
 8002362:	f7fe fa79 	bl	8000858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2224      	movs	r2, #36	@ 0x24
 800236a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2101      	movs	r1, #1
 8002378:	438a      	bics	r2, r1
 800237a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	0018      	movs	r0, r3
 8002380:	f000 f830 	bl	80023e4 <UART_SetConfig>
 8002384:	0003      	movs	r3, r0
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e024      	b.n	80023d8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f000 fa6d 	bl	8002878 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	490d      	ldr	r1, [pc, #52]	@ (80023e0 <HAL_UART_Init+0xa4>)
 80023aa:	400a      	ands	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	212a      	movs	r1, #42	@ 0x2a
 80023ba:	438a      	bics	r2, r1
 80023bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2101      	movs	r1, #1
 80023ca:	430a      	orrs	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f000 fb05 	bl	80029e0 <UART_CheckIdleState>
 80023d6:	0003      	movs	r3, r0
}
 80023d8:	0018      	movs	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	b002      	add	sp, #8
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	ffffb7ff 	.word	0xffffb7ff

080023e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023e4:	b5b0      	push	{r4, r5, r7, lr}
 80023e6:	b08e      	sub	sp, #56	@ 0x38
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023ec:	231a      	movs	r3, #26
 80023ee:	2218      	movs	r2, #24
 80023f0:	189b      	adds	r3, r3, r2
 80023f2:	19db      	adds	r3, r3, r7
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	431a      	orrs	r2, r3
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	431a      	orrs	r2, r3
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	4313      	orrs	r3, r2
 800240e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4ab4      	ldr	r2, [pc, #720]	@ (80026e8 <UART_SetConfig+0x304>)
 8002418:	4013      	ands	r3, r2
 800241a:	0019      	movs	r1, r3
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002422:	430a      	orrs	r2, r1
 8002424:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4aaf      	ldr	r2, [pc, #700]	@ (80026ec <UART_SetConfig+0x308>)
 800242e:	4013      	ands	r3, r2
 8002430:	0019      	movs	r1, r3
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4aa9      	ldr	r2, [pc, #676]	@ (80026f0 <UART_SetConfig+0x30c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d004      	beq.n	8002458 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002454:	4313      	orrs	r3, r2
 8002456:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	4aa5      	ldr	r2, [pc, #660]	@ (80026f4 <UART_SetConfig+0x310>)
 8002460:	4013      	ands	r3, r2
 8002462:	0019      	movs	r1, r3
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800246a:	430a      	orrs	r2, r1
 800246c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4aa1      	ldr	r2, [pc, #644]	@ (80026f8 <UART_SetConfig+0x314>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d131      	bne.n	80024dc <UART_SetConfig+0xf8>
 8002478:	4ba0      	ldr	r3, [pc, #640]	@ (80026fc <UART_SetConfig+0x318>)
 800247a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247c:	220c      	movs	r2, #12
 800247e:	4013      	ands	r3, r2
 8002480:	2b0c      	cmp	r3, #12
 8002482:	d01d      	beq.n	80024c0 <UART_SetConfig+0xdc>
 8002484:	d823      	bhi.n	80024ce <UART_SetConfig+0xea>
 8002486:	2b08      	cmp	r3, #8
 8002488:	d00c      	beq.n	80024a4 <UART_SetConfig+0xc0>
 800248a:	d820      	bhi.n	80024ce <UART_SetConfig+0xea>
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <UART_SetConfig+0xb2>
 8002490:	2b04      	cmp	r3, #4
 8002492:	d00e      	beq.n	80024b2 <UART_SetConfig+0xce>
 8002494:	e01b      	b.n	80024ce <UART_SetConfig+0xea>
 8002496:	231b      	movs	r3, #27
 8002498:	2218      	movs	r2, #24
 800249a:	189b      	adds	r3, r3, r2
 800249c:	19db      	adds	r3, r3, r7
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	e065      	b.n	8002570 <UART_SetConfig+0x18c>
 80024a4:	231b      	movs	r3, #27
 80024a6:	2218      	movs	r2, #24
 80024a8:	189b      	adds	r3, r3, r2
 80024aa:	19db      	adds	r3, r3, r7
 80024ac:	2202      	movs	r2, #2
 80024ae:	701a      	strb	r2, [r3, #0]
 80024b0:	e05e      	b.n	8002570 <UART_SetConfig+0x18c>
 80024b2:	231b      	movs	r3, #27
 80024b4:	2218      	movs	r2, #24
 80024b6:	189b      	adds	r3, r3, r2
 80024b8:	19db      	adds	r3, r3, r7
 80024ba:	2204      	movs	r2, #4
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	e057      	b.n	8002570 <UART_SetConfig+0x18c>
 80024c0:	231b      	movs	r3, #27
 80024c2:	2218      	movs	r2, #24
 80024c4:	189b      	adds	r3, r3, r2
 80024c6:	19db      	adds	r3, r3, r7
 80024c8:	2208      	movs	r2, #8
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	e050      	b.n	8002570 <UART_SetConfig+0x18c>
 80024ce:	231b      	movs	r3, #27
 80024d0:	2218      	movs	r2, #24
 80024d2:	189b      	adds	r3, r3, r2
 80024d4:	19db      	adds	r3, r3, r7
 80024d6:	2210      	movs	r2, #16
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	e049      	b.n	8002570 <UART_SetConfig+0x18c>
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a83      	ldr	r2, [pc, #524]	@ (80026f0 <UART_SetConfig+0x30c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d13e      	bne.n	8002564 <UART_SetConfig+0x180>
 80024e6:	4b85      	ldr	r3, [pc, #532]	@ (80026fc <UART_SetConfig+0x318>)
 80024e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024ea:	23c0      	movs	r3, #192	@ 0xc0
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	4013      	ands	r3, r2
 80024f0:	22c0      	movs	r2, #192	@ 0xc0
 80024f2:	0112      	lsls	r2, r2, #4
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d027      	beq.n	8002548 <UART_SetConfig+0x164>
 80024f8:	22c0      	movs	r2, #192	@ 0xc0
 80024fa:	0112      	lsls	r2, r2, #4
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d82a      	bhi.n	8002556 <UART_SetConfig+0x172>
 8002500:	2280      	movs	r2, #128	@ 0x80
 8002502:	0112      	lsls	r2, r2, #4
 8002504:	4293      	cmp	r3, r2
 8002506:	d011      	beq.n	800252c <UART_SetConfig+0x148>
 8002508:	2280      	movs	r2, #128	@ 0x80
 800250a:	0112      	lsls	r2, r2, #4
 800250c:	4293      	cmp	r3, r2
 800250e:	d822      	bhi.n	8002556 <UART_SetConfig+0x172>
 8002510:	2b00      	cmp	r3, #0
 8002512:	d004      	beq.n	800251e <UART_SetConfig+0x13a>
 8002514:	2280      	movs	r2, #128	@ 0x80
 8002516:	00d2      	lsls	r2, r2, #3
 8002518:	4293      	cmp	r3, r2
 800251a:	d00e      	beq.n	800253a <UART_SetConfig+0x156>
 800251c:	e01b      	b.n	8002556 <UART_SetConfig+0x172>
 800251e:	231b      	movs	r3, #27
 8002520:	2218      	movs	r2, #24
 8002522:	189b      	adds	r3, r3, r2
 8002524:	19db      	adds	r3, r3, r7
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
 800252a:	e021      	b.n	8002570 <UART_SetConfig+0x18c>
 800252c:	231b      	movs	r3, #27
 800252e:	2218      	movs	r2, #24
 8002530:	189b      	adds	r3, r3, r2
 8002532:	19db      	adds	r3, r3, r7
 8002534:	2202      	movs	r2, #2
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e01a      	b.n	8002570 <UART_SetConfig+0x18c>
 800253a:	231b      	movs	r3, #27
 800253c:	2218      	movs	r2, #24
 800253e:	189b      	adds	r3, r3, r2
 8002540:	19db      	adds	r3, r3, r7
 8002542:	2204      	movs	r2, #4
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e013      	b.n	8002570 <UART_SetConfig+0x18c>
 8002548:	231b      	movs	r3, #27
 800254a:	2218      	movs	r2, #24
 800254c:	189b      	adds	r3, r3, r2
 800254e:	19db      	adds	r3, r3, r7
 8002550:	2208      	movs	r2, #8
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e00c      	b.n	8002570 <UART_SetConfig+0x18c>
 8002556:	231b      	movs	r3, #27
 8002558:	2218      	movs	r2, #24
 800255a:	189b      	adds	r3, r3, r2
 800255c:	19db      	adds	r3, r3, r7
 800255e:	2210      	movs	r2, #16
 8002560:	701a      	strb	r2, [r3, #0]
 8002562:	e005      	b.n	8002570 <UART_SetConfig+0x18c>
 8002564:	231b      	movs	r3, #27
 8002566:	2218      	movs	r2, #24
 8002568:	189b      	adds	r3, r3, r2
 800256a:	19db      	adds	r3, r3, r7
 800256c:	2210      	movs	r2, #16
 800256e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a5e      	ldr	r2, [pc, #376]	@ (80026f0 <UART_SetConfig+0x30c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d000      	beq.n	800257c <UART_SetConfig+0x198>
 800257a:	e084      	b.n	8002686 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800257c:	231b      	movs	r3, #27
 800257e:	2218      	movs	r2, #24
 8002580:	189b      	adds	r3, r3, r2
 8002582:	19db      	adds	r3, r3, r7
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b08      	cmp	r3, #8
 8002588:	d01d      	beq.n	80025c6 <UART_SetConfig+0x1e2>
 800258a:	dc20      	bgt.n	80025ce <UART_SetConfig+0x1ea>
 800258c:	2b04      	cmp	r3, #4
 800258e:	d015      	beq.n	80025bc <UART_SetConfig+0x1d8>
 8002590:	dc1d      	bgt.n	80025ce <UART_SetConfig+0x1ea>
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <UART_SetConfig+0x1b8>
 8002596:	2b02      	cmp	r3, #2
 8002598:	d005      	beq.n	80025a6 <UART_SetConfig+0x1c2>
 800259a:	e018      	b.n	80025ce <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800259c:	f7ff fd76 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 80025a0:	0003      	movs	r3, r0
 80025a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80025a4:	e01c      	b.n	80025e0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025a6:	4b55      	ldr	r3, [pc, #340]	@ (80026fc <UART_SetConfig+0x318>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2210      	movs	r2, #16
 80025ac:	4013      	ands	r3, r2
 80025ae:	d002      	beq.n	80025b6 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80025b0:	4b53      	ldr	r3, [pc, #332]	@ (8002700 <UART_SetConfig+0x31c>)
 80025b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80025b4:	e014      	b.n	80025e0 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80025b6:	4b53      	ldr	r3, [pc, #332]	@ (8002704 <UART_SetConfig+0x320>)
 80025b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80025ba:	e011      	b.n	80025e0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025bc:	f7ff fcb6 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 80025c0:	0003      	movs	r3, r0
 80025c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80025c4:	e00c      	b.n	80025e0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025c6:	2380      	movs	r3, #128	@ 0x80
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80025cc:	e008      	b.n	80025e0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80025d2:	231a      	movs	r3, #26
 80025d4:	2218      	movs	r2, #24
 80025d6:	189b      	adds	r3, r3, r2
 80025d8:	19db      	adds	r3, r3, r7
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
        break;
 80025de:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80025e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d100      	bne.n	80025e8 <UART_SetConfig+0x204>
 80025e6:	e12f      	b.n	8002848 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	0013      	movs	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	189b      	adds	r3, r3, r2
 80025f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d305      	bcc.n	8002604 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80025fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002600:	429a      	cmp	r2, r3
 8002602:	d906      	bls.n	8002612 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002604:	231a      	movs	r3, #26
 8002606:	2218      	movs	r2, #24
 8002608:	189b      	adds	r3, r3, r2
 800260a:	19db      	adds	r3, r3, r7
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e11a      	b.n	8002848 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	6939      	ldr	r1, [r7, #16]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	000b      	movs	r3, r1
 8002620:	0e1b      	lsrs	r3, r3, #24
 8002622:	0010      	movs	r0, r2
 8002624:	0205      	lsls	r5, r0, #8
 8002626:	431d      	orrs	r5, r3
 8002628:	000b      	movs	r3, r1
 800262a:	021c      	lsls	r4, r3, #8
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	085b      	lsrs	r3, r3, #1
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68b8      	ldr	r0, [r7, #8]
 800263a:	68f9      	ldr	r1, [r7, #12]
 800263c:	1900      	adds	r0, r0, r4
 800263e:	4169      	adcs	r1, r5
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f7fd fde7 	bl	8000220 <__aeabi_uldivmod>
 8002652:	0002      	movs	r2, r0
 8002654:	000b      	movs	r3, r1
 8002656:	0013      	movs	r3, r2
 8002658:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800265a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800265c:	23c0      	movs	r3, #192	@ 0xc0
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d309      	bcc.n	8002678 <UART_SetConfig+0x294>
 8002664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002666:	2380      	movs	r3, #128	@ 0x80
 8002668:	035b      	lsls	r3, r3, #13
 800266a:	429a      	cmp	r2, r3
 800266c:	d204      	bcs.n	8002678 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	e0e7      	b.n	8002848 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002678:	231a      	movs	r3, #26
 800267a:	2218      	movs	r2, #24
 800267c:	189b      	adds	r3, r3, r2
 800267e:	19db      	adds	r3, r3, r7
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	e0e0      	b.n	8002848 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	69da      	ldr	r2, [r3, #28]
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	021b      	lsls	r3, r3, #8
 800268e:	429a      	cmp	r2, r3
 8002690:	d000      	beq.n	8002694 <UART_SetConfig+0x2b0>
 8002692:	e082      	b.n	800279a <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8002694:	231b      	movs	r3, #27
 8002696:	2218      	movs	r2, #24
 8002698:	189b      	adds	r3, r3, r2
 800269a:	19db      	adds	r3, r3, r7
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d834      	bhi.n	800270c <UART_SetConfig+0x328>
 80026a2:	009a      	lsls	r2, r3, #2
 80026a4:	4b18      	ldr	r3, [pc, #96]	@ (8002708 <UART_SetConfig+0x324>)
 80026a6:	18d3      	adds	r3, r2, r3
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026ac:	f7ff fcee 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 80026b0:	0003      	movs	r3, r0
 80026b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026b4:	e033      	b.n	800271e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026b6:	f7ff fcff 	bl	80020b8 <HAL_RCC_GetPCLK2Freq>
 80026ba:	0003      	movs	r3, r0
 80026bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026be:	e02e      	b.n	800271e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026c0:	4b0e      	ldr	r3, [pc, #56]	@ (80026fc <UART_SetConfig+0x318>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2210      	movs	r2, #16
 80026c6:	4013      	ands	r3, r2
 80026c8:	d002      	beq.n	80026d0 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80026ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002700 <UART_SetConfig+0x31c>)
 80026cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80026ce:	e026      	b.n	800271e <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80026d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002704 <UART_SetConfig+0x320>)
 80026d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026d4:	e023      	b.n	800271e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026d6:	f7ff fc29 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 80026da:	0003      	movs	r3, r0
 80026dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026de:	e01e      	b.n	800271e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026e0:	2380      	movs	r3, #128	@ 0x80
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026e6:	e01a      	b.n	800271e <UART_SetConfig+0x33a>
 80026e8:	efff69f3 	.word	0xefff69f3
 80026ec:	ffffcfff 	.word	0xffffcfff
 80026f0:	40004800 	.word	0x40004800
 80026f4:	fffff4ff 	.word	0xfffff4ff
 80026f8:	40004400 	.word	0x40004400
 80026fc:	40021000 	.word	0x40021000
 8002700:	003d0900 	.word	0x003d0900
 8002704:	00f42400 	.word	0x00f42400
 8002708:	08002d60 	.word	0x08002d60
      default:
        pclk = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002710:	231a      	movs	r3, #26
 8002712:	2218      	movs	r2, #24
 8002714:	189b      	adds	r3, r3, r2
 8002716:	19db      	adds	r3, r3, r7
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
        break;
 800271c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800271e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d100      	bne.n	8002726 <UART_SetConfig+0x342>
 8002724:	e090      	b.n	8002848 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002728:	005a      	lsls	r2, r3, #1
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	085b      	lsrs	r3, r3, #1
 8002730:	18d2      	adds	r2, r2, r3
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	0019      	movs	r1, r3
 8002738:	0010      	movs	r0, r2
 800273a:	f7fd fce5 	bl	8000108 <__udivsi3>
 800273e:	0003      	movs	r3, r0
 8002740:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002744:	2b0f      	cmp	r3, #15
 8002746:	d921      	bls.n	800278c <UART_SetConfig+0x3a8>
 8002748:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800274a:	2380      	movs	r3, #128	@ 0x80
 800274c:	025b      	lsls	r3, r3, #9
 800274e:	429a      	cmp	r2, r3
 8002750:	d21c      	bcs.n	800278c <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002754:	b29a      	uxth	r2, r3
 8002756:	200e      	movs	r0, #14
 8002758:	2418      	movs	r4, #24
 800275a:	1903      	adds	r3, r0, r4
 800275c:	19db      	adds	r3, r3, r7
 800275e:	210f      	movs	r1, #15
 8002760:	438a      	bics	r2, r1
 8002762:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	b29b      	uxth	r3, r3
 800276a:	2207      	movs	r2, #7
 800276c:	4013      	ands	r3, r2
 800276e:	b299      	uxth	r1, r3
 8002770:	1903      	adds	r3, r0, r4
 8002772:	19db      	adds	r3, r3, r7
 8002774:	1902      	adds	r2, r0, r4
 8002776:	19d2      	adds	r2, r2, r7
 8002778:	8812      	ldrh	r2, [r2, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	1902      	adds	r2, r0, r4
 8002784:	19d2      	adds	r2, r2, r7
 8002786:	8812      	ldrh	r2, [r2, #0]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	e05d      	b.n	8002848 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 800278c:	231a      	movs	r3, #26
 800278e:	2218      	movs	r2, #24
 8002790:	189b      	adds	r3, r3, r2
 8002792:	19db      	adds	r3, r3, r7
 8002794:	2201      	movs	r2, #1
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	e056      	b.n	8002848 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 800279a:	231b      	movs	r3, #27
 800279c:	2218      	movs	r2, #24
 800279e:	189b      	adds	r3, r3, r2
 80027a0:	19db      	adds	r3, r3, r7
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d822      	bhi.n	80027ee <UART_SetConfig+0x40a>
 80027a8:	009a      	lsls	r2, r3, #2
 80027aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002868 <UART_SetConfig+0x484>)
 80027ac:	18d3      	adds	r3, r2, r3
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027b2:	f7ff fc6b 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 80027b6:	0003      	movs	r3, r0
 80027b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80027ba:	e021      	b.n	8002800 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027bc:	f7ff fc7c 	bl	80020b8 <HAL_RCC_GetPCLK2Freq>
 80027c0:	0003      	movs	r3, r0
 80027c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80027c4:	e01c      	b.n	8002800 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027c6:	4b29      	ldr	r3, [pc, #164]	@ (800286c <UART_SetConfig+0x488>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2210      	movs	r2, #16
 80027cc:	4013      	ands	r3, r2
 80027ce:	d002      	beq.n	80027d6 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80027d0:	4b27      	ldr	r3, [pc, #156]	@ (8002870 <UART_SetConfig+0x48c>)
 80027d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80027d4:	e014      	b.n	8002800 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80027d6:	4b27      	ldr	r3, [pc, #156]	@ (8002874 <UART_SetConfig+0x490>)
 80027d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80027da:	e011      	b.n	8002800 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027dc:	f7ff fba6 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 80027e0:	0003      	movs	r3, r0
 80027e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80027e4:	e00c      	b.n	8002800 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027e6:	2380      	movs	r3, #128	@ 0x80
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80027ec:	e008      	b.n	8002800 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80027f2:	231a      	movs	r3, #26
 80027f4:	2218      	movs	r2, #24
 80027f6:	189b      	adds	r3, r3, r2
 80027f8:	19db      	adds	r3, r3, r7
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
        break;
 80027fe:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002802:	2b00      	cmp	r3, #0
 8002804:	d020      	beq.n	8002848 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	085a      	lsrs	r2, r3, #1
 800280c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800280e:	18d2      	adds	r2, r2, r3
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	0019      	movs	r1, r3
 8002816:	0010      	movs	r0, r2
 8002818:	f7fd fc76 	bl	8000108 <__udivsi3>
 800281c:	0003      	movs	r3, r0
 800281e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002822:	2b0f      	cmp	r3, #15
 8002824:	d90a      	bls.n	800283c <UART_SetConfig+0x458>
 8002826:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002828:	2380      	movs	r3, #128	@ 0x80
 800282a:	025b      	lsls	r3, r3, #9
 800282c:	429a      	cmp	r2, r3
 800282e:	d205      	bcs.n	800283c <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002832:	b29a      	uxth	r2, r3
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	e005      	b.n	8002848 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 800283c:	231a      	movs	r3, #26
 800283e:	2218      	movs	r2, #24
 8002840:	189b      	adds	r3, r3, r2
 8002842:	19db      	adds	r3, r3, r7
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2200      	movs	r2, #0
 800284c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	2200      	movs	r2, #0
 8002852:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002854:	231a      	movs	r3, #26
 8002856:	2218      	movs	r2, #24
 8002858:	189b      	adds	r3, r3, r2
 800285a:	19db      	adds	r3, r3, r7
 800285c:	781b      	ldrb	r3, [r3, #0]
}
 800285e:	0018      	movs	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	b00e      	add	sp, #56	@ 0x38
 8002864:	bdb0      	pop	{r4, r5, r7, pc}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	08002d84 	.word	0x08002d84
 800286c:	40021000 	.word	0x40021000
 8002870:	003d0900 	.word	0x003d0900
 8002874:	00f42400 	.word	0x00f42400

08002878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	2201      	movs	r2, #1
 8002886:	4013      	ands	r3, r2
 8002888:	d00b      	beq.n	80028a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	4a4a      	ldr	r2, [pc, #296]	@ (80029bc <UART_AdvFeatureConfig+0x144>)
 8002892:	4013      	ands	r3, r2
 8002894:	0019      	movs	r1, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a6:	2202      	movs	r2, #2
 80028a8:	4013      	ands	r3, r2
 80028aa:	d00b      	beq.n	80028c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4a43      	ldr	r2, [pc, #268]	@ (80029c0 <UART_AdvFeatureConfig+0x148>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	0019      	movs	r1, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	2204      	movs	r2, #4
 80028ca:	4013      	ands	r3, r2
 80028cc:	d00b      	beq.n	80028e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a3b      	ldr	r2, [pc, #236]	@ (80029c4 <UART_AdvFeatureConfig+0x14c>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	0019      	movs	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	2208      	movs	r2, #8
 80028ec:	4013      	ands	r3, r2
 80028ee:	d00b      	beq.n	8002908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4a34      	ldr	r2, [pc, #208]	@ (80029c8 <UART_AdvFeatureConfig+0x150>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	2210      	movs	r2, #16
 800290e:	4013      	ands	r3, r2
 8002910:	d00b      	beq.n	800292a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a2c      	ldr	r2, [pc, #176]	@ (80029cc <UART_AdvFeatureConfig+0x154>)
 800291a:	4013      	ands	r3, r2
 800291c:	0019      	movs	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	2220      	movs	r2, #32
 8002930:	4013      	ands	r3, r2
 8002932:	d00b      	beq.n	800294c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	4a25      	ldr	r2, [pc, #148]	@ (80029d0 <UART_AdvFeatureConfig+0x158>)
 800293c:	4013      	ands	r3, r2
 800293e:	0019      	movs	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	2240      	movs	r2, #64	@ 0x40
 8002952:	4013      	ands	r3, r2
 8002954:	d01d      	beq.n	8002992 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4a1d      	ldr	r2, [pc, #116]	@ (80029d4 <UART_AdvFeatureConfig+0x15c>)
 800295e:	4013      	ands	r3, r2
 8002960:	0019      	movs	r1, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002972:	2380      	movs	r3, #128	@ 0x80
 8002974:	035b      	lsls	r3, r3, #13
 8002976:	429a      	cmp	r2, r3
 8002978:	d10b      	bne.n	8002992 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4a15      	ldr	r2, [pc, #84]	@ (80029d8 <UART_AdvFeatureConfig+0x160>)
 8002982:	4013      	ands	r3, r2
 8002984:	0019      	movs	r1, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	2280      	movs	r2, #128	@ 0x80
 8002998:	4013      	ands	r3, r2
 800299a:	d00b      	beq.n	80029b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4a0e      	ldr	r2, [pc, #56]	@ (80029dc <UART_AdvFeatureConfig+0x164>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	0019      	movs	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	605a      	str	r2, [r3, #4]
  }
}
 80029b4:	46c0      	nop			@ (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b002      	add	sp, #8
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	fffdffff 	.word	0xfffdffff
 80029c0:	fffeffff 	.word	0xfffeffff
 80029c4:	fffbffff 	.word	0xfffbffff
 80029c8:	ffff7fff 	.word	0xffff7fff
 80029cc:	ffffefff 	.word	0xffffefff
 80029d0:	ffffdfff 	.word	0xffffdfff
 80029d4:	ffefffff 	.word	0xffefffff
 80029d8:	ff9fffff 	.word	0xff9fffff
 80029dc:	fff7ffff 	.word	0xfff7ffff

080029e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b092      	sub	sp, #72	@ 0x48
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2284      	movs	r2, #132	@ 0x84
 80029ec:	2100      	movs	r1, #0
 80029ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029f0:	f7fe f84a 	bl	8000a88 <HAL_GetTick>
 80029f4:	0003      	movs	r3, r0
 80029f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2208      	movs	r2, #8
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d12c      	bne.n	8002a60 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a08:	2280      	movs	r2, #128	@ 0x80
 8002a0a:	0391      	lsls	r1, r2, #14
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	4a46      	ldr	r2, [pc, #280]	@ (8002b28 <UART_CheckIdleState+0x148>)
 8002a10:	9200      	str	r2, [sp, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f000 f88c 	bl	8002b30 <UART_WaitOnFlagUntilTimeout>
 8002a18:	1e03      	subs	r3, r0, #0
 8002a1a:	d021      	beq.n	8002a60 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002a24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a26:	2301      	movs	r3, #1
 8002a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2c:	f383 8810 	msr	PRIMASK, r3
}
 8002a30:	46c0      	nop			@ (mov r8, r8)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2180      	movs	r1, #128	@ 0x80
 8002a3e:	438a      	bics	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a48:	f383 8810 	msr	PRIMASK, r3
}
 8002a4c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2220      	movs	r2, #32
 8002a52:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2278      	movs	r2, #120	@ 0x78
 8002a58:	2100      	movs	r1, #0
 8002a5a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e05f      	b.n	8002b20 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2204      	movs	r2, #4
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d146      	bne.n	8002afc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a70:	2280      	movs	r2, #128	@ 0x80
 8002a72:	03d1      	lsls	r1, r2, #15
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4a2c      	ldr	r2, [pc, #176]	@ (8002b28 <UART_CheckIdleState+0x148>)
 8002a78:	9200      	str	r2, [sp, #0]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f000 f858 	bl	8002b30 <UART_WaitOnFlagUntilTimeout>
 8002a80:	1e03      	subs	r3, r0, #0
 8002a82:	d03b      	beq.n	8002afc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a84:	f3ef 8310 	mrs	r3, PRIMASK
 8002a88:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a8e:	2301      	movs	r3, #1
 8002a90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f383 8810 	msr	PRIMASK, r3
}
 8002a98:	46c0      	nop			@ (mov r8, r8)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4921      	ldr	r1, [pc, #132]	@ (8002b2c <UART_CheckIdleState+0x14c>)
 8002aa6:	400a      	ands	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f383 8810 	msr	PRIMASK, r3
}
 8002ab4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8002aba:	61bb      	str	r3, [r7, #24]
  return(result);
 8002abc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002abe:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f383 8810 	msr	PRIMASK, r3
}
 8002aca:	46c0      	nop			@ (mov r8, r8)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	438a      	bics	r2, r1
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ade:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	f383 8810 	msr	PRIMASK, r3
}
 8002ae6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2280      	movs	r2, #128	@ 0x80
 8002aec:	2120      	movs	r1, #32
 8002aee:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2278      	movs	r2, #120	@ 0x78
 8002af4:	2100      	movs	r1, #0
 8002af6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e011      	b.n	8002b20 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2280      	movs	r2, #128	@ 0x80
 8002b06:	2120      	movs	r1, #32
 8002b08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2278      	movs	r2, #120	@ 0x78
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b010      	add	sp, #64	@ 0x40
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	01ffffff 	.word	0x01ffffff
 8002b2c:	fffffedf 	.word	0xfffffedf

08002b30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	1dfb      	adds	r3, r7, #7
 8002b3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b40:	e04b      	b.n	8002bda <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	3301      	adds	r3, #1
 8002b46:	d048      	beq.n	8002bda <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b48:	f7fd ff9e 	bl	8000a88 <HAL_GetTick>
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d302      	bcc.n	8002b5e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e04b      	b.n	8002bfa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d035      	beq.n	8002bda <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	2208      	movs	r2, #8
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d111      	bne.n	8002ba0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2208      	movs	r2, #8
 8002b82:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	0018      	movs	r0, r3
 8002b88:	f000 f83c 	bl	8002c04 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2284      	movs	r2, #132	@ 0x84
 8002b90:	2108      	movs	r1, #8
 8002b92:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2278      	movs	r2, #120	@ 0x78
 8002b98:	2100      	movs	r1, #0
 8002b9a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e02c      	b.n	8002bfa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	69da      	ldr	r2, [r3, #28]
 8002ba6:	2380      	movs	r3, #128	@ 0x80
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	401a      	ands	r2, r3
 8002bac:	2380      	movs	r3, #128	@ 0x80
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d112      	bne.n	8002bda <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2280      	movs	r2, #128	@ 0x80
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f000 f81f 	bl	8002c04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2284      	movs	r2, #132	@ 0x84
 8002bca:	2120      	movs	r1, #32
 8002bcc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2278      	movs	r2, #120	@ 0x78
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e00f      	b.n	8002bfa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	4013      	ands	r3, r2
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	425a      	negs	r2, r3
 8002bea:	4153      	adcs	r3, r2
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	001a      	movs	r2, r3
 8002bf0:	1dfb      	adds	r3, r7, #7
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d0a4      	beq.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b004      	add	sp, #16
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08e      	sub	sp, #56	@ 0x38
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c10:	617b      	str	r3, [r7, #20]
  return(result);
 8002c12:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c16:	2301      	movs	r3, #1
 8002c18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	f383 8810 	msr	PRIMASK, r3
}
 8002c20:	46c0      	nop			@ (mov r8, r8)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4926      	ldr	r1, [pc, #152]	@ (8002cc8 <UART_EndRxTransfer+0xc4>)
 8002c2e:	400a      	ands	r2, r1
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f383 8810 	msr	PRIMASK, r3
}
 8002c3c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c42:	623b      	str	r3, [r7, #32]
  return(result);
 8002c44:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c46:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c48:	2301      	movs	r3, #1
 8002c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	f383 8810 	msr	PRIMASK, r3
}
 8002c52:	46c0      	nop			@ (mov r8, r8)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2101      	movs	r1, #1
 8002c60:	438a      	bics	r2, r1
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c66:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c6a:	f383 8810 	msr	PRIMASK, r3
}
 8002c6e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d118      	bne.n	8002caa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c78:	f3ef 8310 	mrs	r3, PRIMASK
 8002c7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c82:	2301      	movs	r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f383 8810 	msr	PRIMASK, r3
}
 8002c8c:	46c0      	nop			@ (mov r8, r8)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2110      	movs	r1, #16
 8002c9a:	438a      	bics	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f383 8810 	msr	PRIMASK, r3
}
 8002ca8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2280      	movs	r2, #128	@ 0x80
 8002cae:	2120      	movs	r1, #32
 8002cb0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b00e      	add	sp, #56	@ 0x38
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			@ (mov r8, r8)
 8002cc8:	fffffedf 	.word	0xfffffedf

08002ccc <memset>:
 8002ccc:	0003      	movs	r3, r0
 8002cce:	1882      	adds	r2, r0, r2
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d100      	bne.n	8002cd6 <memset+0xa>
 8002cd4:	4770      	bx	lr
 8002cd6:	7019      	strb	r1, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	e7f9      	b.n	8002cd0 <memset+0x4>

08002cdc <__libc_init_array>:
 8002cdc:	b570      	push	{r4, r5, r6, lr}
 8002cde:	2600      	movs	r6, #0
 8002ce0:	4c0c      	ldr	r4, [pc, #48]	@ (8002d14 <__libc_init_array+0x38>)
 8002ce2:	4d0d      	ldr	r5, [pc, #52]	@ (8002d18 <__libc_init_array+0x3c>)
 8002ce4:	1b64      	subs	r4, r4, r5
 8002ce6:	10a4      	asrs	r4, r4, #2
 8002ce8:	42a6      	cmp	r6, r4
 8002cea:	d109      	bne.n	8002d00 <__libc_init_array+0x24>
 8002cec:	2600      	movs	r6, #0
 8002cee:	f000 f819 	bl	8002d24 <_init>
 8002cf2:	4c0a      	ldr	r4, [pc, #40]	@ (8002d1c <__libc_init_array+0x40>)
 8002cf4:	4d0a      	ldr	r5, [pc, #40]	@ (8002d20 <__libc_init_array+0x44>)
 8002cf6:	1b64      	subs	r4, r4, r5
 8002cf8:	10a4      	asrs	r4, r4, #2
 8002cfa:	42a6      	cmp	r6, r4
 8002cfc:	d105      	bne.n	8002d0a <__libc_init_array+0x2e>
 8002cfe:	bd70      	pop	{r4, r5, r6, pc}
 8002d00:	00b3      	lsls	r3, r6, #2
 8002d02:	58eb      	ldr	r3, [r5, r3]
 8002d04:	4798      	blx	r3
 8002d06:	3601      	adds	r6, #1
 8002d08:	e7ee      	b.n	8002ce8 <__libc_init_array+0xc>
 8002d0a:	00b3      	lsls	r3, r6, #2
 8002d0c:	58eb      	ldr	r3, [r5, r3]
 8002d0e:	4798      	blx	r3
 8002d10:	3601      	adds	r6, #1
 8002d12:	e7f2      	b.n	8002cfa <__libc_init_array+0x1e>
 8002d14:	08002db0 	.word	0x08002db0
 8002d18:	08002db0 	.word	0x08002db0
 8002d1c:	08002db4 	.word	0x08002db4
 8002d20:	08002db0 	.word	0x08002db0

08002d24 <_init>:
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2a:	bc08      	pop	{r3}
 8002d2c:	469e      	mov	lr, r3
 8002d2e:	4770      	bx	lr

08002d30 <_fini>:
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d32:	46c0      	nop			@ (mov r8, r8)
 8002d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d36:	bc08      	pop	{r3}
 8002d38:	469e      	mov	lr, r3
 8002d3a:	4770      	bx	lr
