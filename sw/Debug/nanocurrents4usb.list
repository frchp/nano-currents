
nanocurrents4usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003408  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080034c8  080034c8  000044c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003534  08003534  0000501c  2**0
                  CONTENTS
  4 .ARM          00000008  08003534  08003534  00004534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800353c  0800353c  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800353c  0800353c  0000453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003540  08003540  00004540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003544  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000001c  08003560  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08003560  00005170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094f0  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001927  00000000  00000000  0000e534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0000fe60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fe  00000000  00000000  00010620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000106a8  00000000  00000000  00010c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a808  00000000  00000000  000212c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064c75  00000000  00000000  0002bace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00090743  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ae8  00000000  00000000  00090788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00092270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034b0 	.word	0x080034b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	080034b0 	.word	0x080034b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 faba 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f822 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f94c 	bl	8000750 <MX_GPIO_Init>
  MX_DMA_Init();
 80004b8:	f000 f92c 	bl	8000714 <MX_DMA_Init>
  MX_ADC_Init();
 80004bc:	f000 f888 	bl	80005d0 <MX_ADC_Init>
  MX_USART2_UART_Init();
 80004c0:	f000 f8f8 	bl	80006b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_ADC_Start_DMA(&hadc, (uint32_t*)&g_u32AdcResults, ADC_MAX_CHANNELS) != HAL_OK)
 80004c4:	4908      	ldr	r1, [pc, #32]	@ (80004e8 <main+0x40>)
 80004c6:	4b09      	ldr	r3, [pc, #36]	@ (80004ec <main+0x44>)
 80004c8:	2202      	movs	r2, #2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fc8e 	bl	8000dec <HAL_ADC_Start_DMA>
 80004d0:	1e03      	subs	r3, r0, #0
 80004d2:	d001      	beq.n	80004d8 <main+0x30>
  {
	Error_Handler();  /* Error in starting ADC-DMA */
 80004d4:	f000 f96e 	bl	80007b4 <Error_Handler>
  }

  // Attach callback to transfer complete DMA
  HAL_DMA_RegisterCallback(&hdma_adc, HAL_DMA_XFER_CPLT_CB_ID, ADC_IsDone);
 80004d8:	4a05      	ldr	r2, [pc, #20]	@ (80004f0 <main+0x48>)
 80004da:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <main+0x4c>)
 80004dc:	2100      	movs	r1, #0
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 f91a 	bl	8001718 <HAL_DMA_RegisterCallback>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	e7fd      	b.n	80004e4 <main+0x3c>
 80004e8:	20000164 	.word	0x20000164
 80004ec:	20000038 	.word	0x20000038
 80004f0:	0800077d 	.word	0x0800077d
 80004f4:	20000094 	.word	0x20000094

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b099      	sub	sp, #100	@ 0x64
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	242c      	movs	r4, #44	@ 0x2c
 8000500:	193b      	adds	r3, r7, r4
 8000502:	0018      	movs	r0, r3
 8000504:	2334      	movs	r3, #52	@ 0x34
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f002 ffa4 	bl	8003456 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050e:	2318      	movs	r3, #24
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	0018      	movs	r0, r3
 8000514:	2314      	movs	r3, #20
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f002 ff9c 	bl	8003456 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800051e:	003b      	movs	r3, r7
 8000520:	0018      	movs	r0, r3
 8000522:	2318      	movs	r3, #24
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f002 ff95 	bl	8003456 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a26      	ldr	r2, [pc, #152]	@ (80005cc <SystemClock_Config+0xd4>)
 8000532:	401a      	ands	r2, r3
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <SystemClock_Config+0xd0>)
 8000536:	2180      	movs	r1, #128	@ 0x80
 8000538:	0109      	lsls	r1, r1, #4
 800053a:	430a      	orrs	r2, r1
 800053c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800053e:	0021      	movs	r1, r4
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2210      	movs	r2, #16
 8000544:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2201      	movs	r2, #1
 800054a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	22a0      	movs	r2, #160	@ 0xa0
 8000556:	0212      	lsls	r2, r2, #8
 8000558:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000560:	187b      	adds	r3, r7, r1
 8000562:	0018      	movs	r0, r3
 8000564:	f001 fabc 	bl	8001ae0 <HAL_RCC_OscConfig>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800056c:	f000 f922 	bl	80007b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	2118      	movs	r1, #24
 8000572:	187b      	adds	r3, r7, r1
 8000574:	220f      	movs	r2, #15
 8000576:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2100      	movs	r1, #0
 8000594:	0018      	movs	r0, r3
 8000596:	f001 fe1f 	bl	80021d8 <HAL_RCC_ClockConfig>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800059e:	f000 f909 	bl	80007b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005a2:	003b      	movs	r3, r7
 80005a4:	2202      	movs	r2, #2
 80005a6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005a8:	003b      	movs	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ae:	003b      	movs	r3, r7
 80005b0:	0018      	movs	r0, r3
 80005b2:	f002 f835 	bl	8002620 <HAL_RCCEx_PeriphCLKConfig>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ba:	f000 f8fb 	bl	80007b4 <Error_Handler>
  }
}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b019      	add	sp, #100	@ 0x64
 80005c4:	bd90      	pop	{r4, r7, pc}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	40007000 	.word	0x40007000
 80005cc:	ffffe7ff 	.word	0xffffe7ff

080005d0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d6:	003b      	movs	r3, r7
 80005d8:	0018      	movs	r0, r3
 80005da:	2308      	movs	r3, #8
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f002 ff39 	bl	8003456 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005e4:	4b30      	ldr	r3, [pc, #192]	@ (80006a8 <MX_ADC_Init+0xd8>)
 80005e6:	4a31      	ldr	r2, [pc, #196]	@ (80006ac <MX_ADC_Init+0xdc>)
 80005e8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80005ea:	4b2f      	ldr	r3, [pc, #188]	@ (80006a8 <MX_ADC_Init+0xd8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80005f0:	4b2d      	ldr	r3, [pc, #180]	@ (80006a8 <MX_ADC_Init+0xd8>)
 80005f2:	22c0      	movs	r2, #192	@ 0xc0
 80005f4:	0612      	lsls	r2, r2, #24
 80005f6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005f8:	4b2b      	ldr	r3, [pc, #172]	@ (80006a8 <MX_ADC_Init+0xd8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005fe:	4b2a      	ldr	r3, [pc, #168]	@ (80006a8 <MX_ADC_Init+0xd8>)
 8000600:	2200      	movs	r2, #0
 8000602:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000604:	4b28      	ldr	r3, [pc, #160]	@ (80006a8 <MX_ADC_Init+0xd8>)
 8000606:	2201      	movs	r2, #1
 8000608:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060a:	4b27      	ldr	r3, [pc, #156]	@ (80006a8 <MX_ADC_Init+0xd8>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000610:	4b25      	ldr	r3, [pc, #148]	@ (80006a8 <MX_ADC_Init+0xd8>)
 8000612:	2220      	movs	r2, #32
 8000614:	2100      	movs	r1, #0
 8000616:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000618:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <MX_ADC_Init+0xd8>)
 800061a:	2221      	movs	r2, #33	@ 0x21
 800061c:	2100      	movs	r1, #0
 800061e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000620:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <MX_ADC_Init+0xd8>)
 8000622:	2200      	movs	r2, #0
 8000624:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000626:	4b20      	ldr	r3, [pc, #128]	@ (80006a8 <MX_ADC_Init+0xd8>)
 8000628:	22c2      	movs	r2, #194	@ 0xc2
 800062a:	32ff      	adds	r2, #255	@ 0xff
 800062c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 800062e:	4b1e      	ldr	r3, [pc, #120]	@ (80006a8 <MX_ADC_Init+0xd8>)
 8000630:	222c      	movs	r2, #44	@ 0x2c
 8000632:	2101      	movs	r1, #1
 8000634:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b1c      	ldr	r3, [pc, #112]	@ (80006a8 <MX_ADC_Init+0xd8>)
 8000638:	2204      	movs	r2, #4
 800063a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063c:	4b1a      	ldr	r3, [pc, #104]	@ (80006a8 <MX_ADC_Init+0xd8>)
 800063e:	2200      	movs	r2, #0
 8000640:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000642:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <MX_ADC_Init+0xd8>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000648:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <MX_ADC_Init+0xd8>)
 800064a:	2201      	movs	r2, #1
 800064c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800064e:	4b16      	ldr	r3, [pc, #88]	@ (80006a8 <MX_ADC_Init+0xd8>)
 8000650:	2200      	movs	r2, #0
 8000652:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000654:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <MX_ADC_Init+0xd8>)
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fa54 	bl	8000b04 <HAL_ADC_Init>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000660:	f000 f8a8 	bl	80007b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000664:	003b      	movs	r3, r7
 8000666:	2201      	movs	r2, #1
 8000668:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800066a:	003b      	movs	r3, r7
 800066c:	2280      	movs	r2, #128	@ 0x80
 800066e:	0152      	lsls	r2, r2, #5
 8000670:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000672:	003a      	movs	r2, r7
 8000674:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <MX_ADC_Init+0xd8>)
 8000676:	0011      	movs	r1, r2
 8000678:	0018      	movs	r0, r3
 800067a:	f000 fc51 	bl	8000f20 <HAL_ADC_ConfigChannel>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000682:	f000 f897 	bl	80007b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000686:	003b      	movs	r3, r7
 8000688:	4a09      	ldr	r2, [pc, #36]	@ (80006b0 <MX_ADC_Init+0xe0>)
 800068a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800068c:	003a      	movs	r2, r7
 800068e:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <MX_ADC_Init+0xd8>)
 8000690:	0011      	movs	r1, r2
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fc44 	bl	8000f20 <HAL_ADC_ConfigChannel>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800069c:	f000 f88a 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b002      	add	sp, #8
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000038 	.word	0x20000038
 80006ac:	40012400 	.word	0x40012400
 80006b0:	04000002 	.word	0x04000002

080006b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b8:	4b14      	ldr	r3, [pc, #80]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006ba:	4a15      	ldr	r2, [pc, #84]	@ (8000710 <MX_USART2_UART_Init+0x5c>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006be:	4b13      	ldr	r3, [pc, #76]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006c0:	22e1      	movs	r2, #225	@ 0xe1
 80006c2:	0252      	lsls	r2, r2, #9
 80006c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4b05      	ldr	r3, [pc, #20]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006f8:	0018      	movs	r0, r3
 80006fa:	f002 f8bd 	bl	8002878 <HAL_UART_Init>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000702:	f000 f857 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200000dc 	.word	0x200000dc
 8000710:	40004400 	.word	0x40004400

08000714 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_DMA_Init+0x38>)
 800071c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_DMA_Init+0x38>)
 8000720:	2101      	movs	r1, #1
 8000722:	430a      	orrs	r2, r1
 8000724:	631a      	str	r2, [r3, #48]	@ 0x30
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_DMA_Init+0x38>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	2201      	movs	r2, #1
 800072c:	4013      	ands	r3, r2
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	2009      	movs	r0, #9
 8000738:	f000 fe30 	bl	800139c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800073c:	2009      	movs	r0, #9
 800073e:	f000 fe42 	bl	80013c6 <HAL_NVIC_EnableIRQ>

}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b002      	add	sp, #8
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	40021000 	.word	0x40021000

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_GPIO_Init+0x28>)
 8000758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800075a:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <MX_GPIO_Init+0x28>)
 800075c:	2101      	movs	r1, #1
 800075e:	430a      	orrs	r2, r1
 8000760:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000762:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <MX_GPIO_Init+0x28>)
 8000764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000766:	2201      	movs	r2, #1
 8000768:	4013      	ands	r3, r2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b002      	add	sp, #8
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	40021000 	.word	0x40021000

0800077c <ADC_IsDone>:

/* USER CODE BEGIN 4 */
void ADC_IsDone( DMA_HandleTypeDef * _hdma )
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  g_sFrame.m_u32current = g_u32AdcResults[ADC_CURRENT_MONITOR];
 8000784:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <ADC_IsDone+0x2c>)
 8000786:	685a      	ldr	r2, [r3, #4]
 8000788:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <ADC_IsDone+0x30>)
 800078a:	609a      	str	r2, [r3, #8]
  g_sFrame.m_u32voltage = g_u32AdcResults[ADC_5V_MONITOR];
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <ADC_IsDone+0x2c>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <ADC_IsDone+0x30>)
 8000792:	605a      	str	r2, [r3, #4]
  HAL_UART_Transmit_IT(&huart2, (uint8_t *)&g_sFrame, UART_SIZE_TO_TRANSMIT);
 8000794:	4905      	ldr	r1, [pc, #20]	@ (80007ac <ADC_IsDone+0x30>)
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <ADC_IsDone+0x34>)
 8000798:	2210      	movs	r2, #16
 800079a:	0018      	movs	r0, r3
 800079c:	f002 f8c0 	bl	8002920 <HAL_UART_Transmit_IT>
}
 80007a0:	46c0      	nop			@ (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b002      	add	sp, #8
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000164 	.word	0x20000164
 80007ac:	20000000 	.word	0x20000000
 80007b0:	200000dc 	.word	0x200000dc

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	46c0      	nop			@ (mov r8, r8)
 80007be:	e7fd      	b.n	80007bc <Error_Handler+0x8>

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c4:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_MspInit+0x24>)
 80007c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <HAL_MspInit+0x24>)
 80007ca:	2101      	movs	r1, #1
 80007cc:	430a      	orrs	r2, r1
 80007ce:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <HAL_MspInit+0x24>)
 80007d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80007d4:	4b03      	ldr	r3, [pc, #12]	@ (80007e4 <HAL_MspInit+0x24>)
 80007d6:	2180      	movs	r1, #128	@ 0x80
 80007d8:	0549      	lsls	r1, r1, #21
 80007da:	430a      	orrs	r2, r1
 80007dc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000

080007e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b089      	sub	sp, #36	@ 0x24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	240c      	movs	r4, #12
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	0018      	movs	r0, r3
 80007f6:	2314      	movs	r3, #20
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f002 fe2b 	bl	8003456 <memset>
  if(hadc->Instance==ADC1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a2a      	ldr	r2, [pc, #168]	@ (80008b0 <HAL_ADC_MspInit+0xc8>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d14e      	bne.n	80008a8 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800080a:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <HAL_ADC_MspInit+0xcc>)
 800080c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800080e:	4b29      	ldr	r3, [pc, #164]	@ (80008b4 <HAL_ADC_MspInit+0xcc>)
 8000810:	2180      	movs	r1, #128	@ 0x80
 8000812:	0089      	lsls	r1, r1, #2
 8000814:	430a      	orrs	r2, r1
 8000816:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <HAL_ADC_MspInit+0xcc>)
 800081a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800081c:	4b25      	ldr	r3, [pc, #148]	@ (80008b4 <HAL_ADC_MspInit+0xcc>)
 800081e:	2101      	movs	r1, #1
 8000820:	430a      	orrs	r2, r1
 8000822:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000824:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <HAL_ADC_MspInit+0xcc>)
 8000826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000828:	2201      	movs	r2, #1
 800082a:	4013      	ands	r3, r2
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0-CK_IN     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000830:	193b      	adds	r3, r7, r4
 8000832:	2203      	movs	r2, #3
 8000834:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000836:	193b      	adds	r3, r7, r4
 8000838:	2203      	movs	r2, #3
 800083a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	193a      	adds	r2, r7, r4
 8000844:	23a0      	movs	r3, #160	@ 0xa0
 8000846:	05db      	lsls	r3, r3, #23
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f000 ffe2 	bl	8001814 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000850:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <HAL_ADC_MspInit+0xd0>)
 8000852:	4a1a      	ldr	r2, [pc, #104]	@ (80008bc <HAL_ADC_MspInit+0xd4>)
 8000854:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8000856:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <HAL_ADC_MspInit+0xd0>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800085c:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <HAL_ADC_MspInit+0xd0>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000862:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <HAL_ADC_MspInit+0xd0>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000868:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <HAL_ADC_MspInit+0xd0>)
 800086a:	2280      	movs	r2, #128	@ 0x80
 800086c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800086e:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <HAL_ADC_MspInit+0xd0>)
 8000870:	2280      	movs	r2, #128	@ 0x80
 8000872:	0052      	lsls	r2, r2, #1
 8000874:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <HAL_ADC_MspInit+0xd0>)
 8000878:	2280      	movs	r2, #128	@ 0x80
 800087a:	00d2      	lsls	r2, r2, #3
 800087c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <HAL_ADC_MspInit+0xd0>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <HAL_ADC_MspInit+0xd0>)
 8000886:	2280      	movs	r2, #128	@ 0x80
 8000888:	0192      	lsls	r2, r2, #6
 800088a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800088c:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <HAL_ADC_MspInit+0xd0>)
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fdb6 	bl	8001400 <HAL_DMA_Init>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d001      	beq.n	800089c <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8000898:	f7ff ff8c 	bl	80007b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a06      	ldr	r2, [pc, #24]	@ (80008b8 <HAL_ADC_MspInit+0xd0>)
 80008a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008a2:	4b05      	ldr	r3, [pc, #20]	@ (80008b8 <HAL_ADC_MspInit+0xd0>)
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b009      	add	sp, #36	@ 0x24
 80008ae:	bd90      	pop	{r4, r7, pc}
 80008b0:	40012400 	.word	0x40012400
 80008b4:	40021000 	.word	0x40021000
 80008b8:	20000094 	.word	0x20000094
 80008bc:	40020008 	.word	0x40020008

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b089      	sub	sp, #36	@ 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	240c      	movs	r4, #12
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	0018      	movs	r0, r3
 80008ce:	2314      	movs	r3, #20
 80008d0:	001a      	movs	r2, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	f002 fdbf 	bl	8003456 <memset>
  if(huart->Instance==USART2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a18      	ldr	r2, [pc, #96]	@ (8000940 <HAL_UART_MspInit+0x80>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d12a      	bne.n	8000938 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e2:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <HAL_UART_MspInit+0x84>)
 80008e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80008e6:	4b17      	ldr	r3, [pc, #92]	@ (8000944 <HAL_UART_MspInit+0x84>)
 80008e8:	2180      	movs	r1, #128	@ 0x80
 80008ea:	0289      	lsls	r1, r1, #10
 80008ec:	430a      	orrs	r2, r1
 80008ee:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <HAL_UART_MspInit+0x84>)
 80008f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008f4:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <HAL_UART_MspInit+0x84>)
 80008f6:	2101      	movs	r1, #1
 80008f8:	430a      	orrs	r2, r1
 80008fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <HAL_UART_MspInit+0x84>)
 80008fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000900:	2201      	movs	r2, #1
 8000902:	4013      	ands	r3, r2
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	22c0      	movs	r2, #192	@ 0xc0
 800090c:	00d2      	lsls	r2, r2, #3
 800090e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	0021      	movs	r1, r4
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2202      	movs	r2, #2
 8000916:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2203      	movs	r2, #3
 8000922:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2204      	movs	r2, #4
 8000928:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	187a      	adds	r2, r7, r1
 800092c:	23a0      	movs	r3, #160	@ 0xa0
 800092e:	05db      	lsls	r3, r3, #23
 8000930:	0011      	movs	r1, r2
 8000932:	0018      	movs	r0, r3
 8000934:	f000 ff6e 	bl	8001814 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000938:	46c0      	nop			@ (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b009      	add	sp, #36	@ 0x24
 800093e:	bd90      	pop	{r4, r7, pc}
 8000940:	40004400 	.word	0x40004400
 8000944:	40021000 	.word	0x40021000

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800094c:	46c0      	nop			@ (mov r8, r8)
 800094e:	e7fd      	b.n	800094c <NMI_Handler+0x4>

08000950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000954:	46c0      	nop			@ (mov r8, r8)
 8000956:	e7fd      	b.n	8000954 <HardFault_Handler+0x4>

08000958 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000970:	f000 f8ac 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	46c0      	nop			@ (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000980:	4b03      	ldr	r3, [pc, #12]	@ (8000990 <DMA1_Channel1_IRQHandler+0x14>)
 8000982:	0018      	movs	r0, r3
 8000984:	f000 fe1a 	bl	80015bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	20000094 	.word	0x20000094

08000994 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80009a0:	4813      	ldr	r0, [pc, #76]	@ (80009f0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80009a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a4:	f7ff fff6 	bl	8000994 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80009a8:	4812      	ldr	r0, [pc, #72]	@ (80009f4 <LoopForever+0x6>)
    LDR R1, [R0]
 80009aa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80009ac:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80009ae:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <LoopForever+0xa>)
    CMP R1, R2
 80009b0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80009b2:	d105      	bne.n	80009c0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80009b4:	4811      	ldr	r0, [pc, #68]	@ (80009fc <LoopForever+0xe>)
    LDR R1,=0x00000001
 80009b6:	4912      	ldr	r1, [pc, #72]	@ (8000a00 <LoopForever+0x12>)
    STR R1, [R0]
 80009b8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80009ba:	4812      	ldr	r0, [pc, #72]	@ (8000a04 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80009bc:	4912      	ldr	r1, [pc, #72]	@ (8000a08 <LoopForever+0x1a>)
    STR R1, [R0]
 80009be:	6001      	str	r1, [r0, #0]

080009c0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	4812      	ldr	r0, [pc, #72]	@ (8000a0c <LoopForever+0x1e>)
  ldr r1, =_edata
 80009c2:	4913      	ldr	r1, [pc, #76]	@ (8000a10 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009c4:	4a13      	ldr	r2, [pc, #76]	@ (8000a14 <LoopForever+0x26>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a10      	ldr	r2, [pc, #64]	@ (8000a18 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009d8:	4c10      	ldr	r4, [pc, #64]	@ (8000a1c <LoopForever+0x2e>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e6:	f002 fd3f 	bl	8003468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ea:	f7ff fd5d 	bl	80004a8 <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
   ldr   r0, =_estack
 80009f0:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 80009f4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009f8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80009fc:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000a00:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a04:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a08:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a14:	08003544 	.word	0x08003544
  ldr r2, =_sbss
 8000a18:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a1c:	20000170 	.word	0x20000170

08000a20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC1_COMP_IRQHandler>
	...

08000a24 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a30:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <HAL_Init+0x3c>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <HAL_Init+0x3c>)
 8000a36:	2140      	movs	r1, #64	@ 0x40
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f811 	bl	8000a64 <HAL_InitTick>
 8000a42:	1e03      	subs	r3, r0, #0
 8000a44:	d003      	beq.n	8000a4e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	e001      	b.n	8000a52 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a4e:	f7ff feb7 	bl	80007c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	781b      	ldrb	r3, [r3, #0]
}
 8000a56:	0018      	movs	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	40022000 	.word	0x40022000

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <HAL_InitTick+0x5c>)
 8000a6e:	681c      	ldr	r4, [r3, #0]
 8000a70:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <HAL_InitTick+0x60>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	0019      	movs	r1, r3
 8000a76:	23fa      	movs	r3, #250	@ 0xfa
 8000a78:	0098      	lsls	r0, r3, #2
 8000a7a:	f7ff fb45 	bl	8000108 <__udivsi3>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	0019      	movs	r1, r3
 8000a82:	0020      	movs	r0, r4
 8000a84:	f7ff fb40 	bl	8000108 <__udivsi3>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 fcab 	bl	80013e6 <HAL_SYSTICK_Config>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	e00f      	b.n	8000ab8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d80b      	bhi.n	8000ab6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	425b      	negs	r3, r3
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 fc78 	bl	800139c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_InitTick+0x64>)
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	0018      	movs	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b003      	add	sp, #12
 8000abe:	bd90      	pop	{r4, r7, pc}
 8000ac0:	20000010 	.word	0x20000010
 8000ac4:	20000018 	.word	0x20000018
 8000ac8:	20000014 	.word	0x20000014

08000acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <HAL_IncTick+0x1c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <HAL_IncTick+0x20>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	18d2      	adds	r2, r2, r3
 8000adc:	4b03      	ldr	r3, [pc, #12]	@ (8000aec <HAL_IncTick+0x20>)
 8000ade:	601a      	str	r2, [r3, #0]
}
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	20000018 	.word	0x20000018
 8000aec:	2000016c 	.word	0x2000016c

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b02      	ldr	r3, [pc, #8]	@ (8000b00 <HAL_GetTick+0x10>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	0018      	movs	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			@ (mov r8, r8)
 8000b00:	2000016c 	.word	0x2000016c

08000b04 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d101      	bne.n	8000b16 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e159      	b.n	8000dca <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d10a      	bne.n	8000b34 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2250      	movs	r2, #80	@ 0x50
 8000b28:	2100      	movs	r1, #0
 8000b2a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff fe5a 	bl	80007e8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b38:	2210      	movs	r2, #16
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	2b10      	cmp	r3, #16
 8000b3e:	d005      	beq.n	8000b4c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	2204      	movs	r2, #4
 8000b48:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000b4a:	d00b      	beq.n	8000b64 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b50:	2210      	movs	r2, #16
 8000b52:	431a      	orrs	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2250      	movs	r2, #80	@ 0x50
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e132      	b.n	8000dca <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b68:	4a9a      	ldr	r2, [pc, #616]	@ (8000dd4 <HAL_ADC_Init+0x2d0>)
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d108      	bne.n	8000b94 <HAL_ADC_Init+0x90>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d101      	bne.n	8000b94 <HAL_ADC_Init+0x90>
 8000b90:	2301      	movs	r3, #1
 8000b92:	e000      	b.n	8000b96 <HAL_ADC_Init+0x92>
 8000b94:	2300      	movs	r3, #0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d149      	bne.n	8000c2e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	23c0      	movs	r3, #192	@ 0xc0
 8000ba0:	061b      	lsls	r3, r3, #24
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d00b      	beq.n	8000bbe <HAL_ADC_Init+0xba>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	2380      	movs	r3, #128	@ 0x80
 8000bac:	05db      	lsls	r3, r3, #23
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d005      	beq.n	8000bbe <HAL_ADC_Init+0xba>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	2380      	movs	r3, #128	@ 0x80
 8000bb8:	061b      	lsls	r3, r3, #24
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d111      	bne.n	8000be2 <HAL_ADC_Init+0xde>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	691a      	ldr	r2, [r3, #16]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	0092      	lsls	r2, r2, #2
 8000bca:	0892      	lsrs	r2, r2, #2
 8000bcc:	611a      	str	r2, [r3, #16]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6919      	ldr	r1, [r3, #16]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	611a      	str	r2, [r3, #16]
 8000be0:	e014      	b.n	8000c0c <HAL_ADC_Init+0x108>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	691a      	ldr	r2, [r3, #16]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	0092      	lsls	r2, r2, #2
 8000bee:	0892      	lsrs	r2, r2, #2
 8000bf0:	611a      	str	r2, [r3, #16]
 8000bf2:	4b79      	ldr	r3, [pc, #484]	@ (8000dd8 <HAL_ADC_Init+0x2d4>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	4b78      	ldr	r3, [pc, #480]	@ (8000dd8 <HAL_ADC_Init+0x2d4>)
 8000bf8:	4978      	ldr	r1, [pc, #480]	@ (8000ddc <HAL_ADC_Init+0x2d8>)
 8000bfa:	400a      	ands	r2, r1
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	4b76      	ldr	r3, [pc, #472]	@ (8000dd8 <HAL_ADC_Init+0x2d4>)
 8000c00:	6819      	ldr	r1, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	4b74      	ldr	r3, [pc, #464]	@ (8000dd8 <HAL_ADC_Init+0x2d4>)
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	68da      	ldr	r2, [r3, #12]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2118      	movs	r1, #24
 8000c18:	438a      	bics	r2, r1
 8000c1a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	68d9      	ldr	r1, [r3, #12]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8000dd8 <HAL_ADC_Init+0x2d4>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b69      	ldr	r3, [pc, #420]	@ (8000dd8 <HAL_ADC_Init+0x2d4>)
 8000c34:	496a      	ldr	r1, [pc, #424]	@ (8000de0 <HAL_ADC_Init+0x2dc>)
 8000c36:	400a      	ands	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000c3a:	4b67      	ldr	r3, [pc, #412]	@ (8000dd8 <HAL_ADC_Init+0x2d4>)
 8000c3c:	6819      	ldr	r1, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c42:	065a      	lsls	r2, r3, #25
 8000c44:	4b64      	ldr	r3, [pc, #400]	@ (8000dd8 <HAL_ADC_Init+0x2d4>)
 8000c46:	430a      	orrs	r2, r1
 8000c48:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	2380      	movs	r3, #128	@ 0x80
 8000c52:	055b      	lsls	r3, r3, #21
 8000c54:	4013      	ands	r3, r2
 8000c56:	d108      	bne.n	8000c6a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2180      	movs	r1, #128	@ 0x80
 8000c64:	0549      	lsls	r1, r1, #21
 8000c66:	430a      	orrs	r2, r1
 8000c68:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	68da      	ldr	r2, [r3, #12]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	495b      	ldr	r1, [pc, #364]	@ (8000de4 <HAL_ADC_Init+0x2e0>)
 8000c76:	400a      	ands	r2, r1
 8000c78:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68d9      	ldr	r1, [r3, #12]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d101      	bne.n	8000c90 <HAL_ADC_Init+0x18c>
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	e000      	b.n	8000c92 <HAL_ADC_Init+0x18e>
 8000c90:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c92:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2020      	movs	r0, #32
 8000c98:	5c1b      	ldrb	r3, [r3, r0]
 8000c9a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000c9c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	202c      	movs	r0, #44	@ 0x2c
 8000ca2:	5c1b      	ldrb	r3, [r3, r0]
 8000ca4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ca6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000cac:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000cb4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000cbc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000cca:	23c2      	movs	r3, #194	@ 0xc2
 8000ccc:	33ff      	adds	r3, #255	@ 0xff
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d00b      	beq.n	8000cea <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68d9      	ldr	r1, [r3, #12]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2221      	movs	r2, #33	@ 0x21
 8000cee:	5c9b      	ldrb	r3, [r3, r2]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d11a      	bne.n	8000d2a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2220      	movs	r2, #32
 8000cf8:	5c9b      	ldrb	r3, [r3, r2]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d109      	bne.n	8000d12 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2180      	movs	r1, #128	@ 0x80
 8000d0a:	0249      	lsls	r1, r1, #9
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	e00b      	b.n	8000d2a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d16:	2220      	movs	r2, #32
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d22:	2201      	movs	r2, #1
 8000d24:	431a      	orrs	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d11f      	bne.n	8000d72 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	691a      	ldr	r2, [r3, #16]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	492a      	ldr	r1, [pc, #168]	@ (8000de8 <HAL_ADC_Init+0x2e4>)
 8000d3e:	400a      	ands	r2, r1
 8000d40:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	6919      	ldr	r1, [r3, #16]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000d50:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000d56:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	691a      	ldr	r2, [r3, #16]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	e00e      	b.n	8000d90 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d107      	bne.n	8000d90 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	691a      	ldr	r2, [r3, #16]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	438a      	bics	r2, r1
 8000d8e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	695a      	ldr	r2, [r3, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2107      	movs	r1, #7
 8000d9c:	438a      	bics	r2, r1
 8000d9e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6959      	ldr	r1, [r3, #20]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	430a      	orrs	r2, r1
 8000db0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	4393      	bics	r3, r2
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	0018      	movs	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b002      	add	sp, #8
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	fffffefd 	.word	0xfffffefd
 8000dd8:	40012708 	.word	0x40012708
 8000ddc:	ffc3ffff 	.word	0xffc3ffff
 8000de0:	fdffffff 	.word	0xfdffffff
 8000de4:	fffe0219 	.word	0xfffe0219
 8000de8:	fffffc03 	.word	0xfffffc03

08000dec <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df8:	2317      	movs	r3, #23
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2204      	movs	r2, #4
 8000e08:	4013      	ands	r3, r2
 8000e0a:	d15e      	bne.n	8000eca <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2250      	movs	r2, #80	@ 0x50
 8000e10:	5c9b      	ldrb	r3, [r3, r2]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d101      	bne.n	8000e1a <HAL_ADC_Start_DMA+0x2e>
 8000e16:	2302      	movs	r3, #2
 8000e18:	e05e      	b.n	8000ed8 <HAL_ADC_Start_DMA+0xec>
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2250      	movs	r2, #80	@ 0x50
 8000e1e:	2101      	movs	r1, #1
 8000e20:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d007      	beq.n	8000e4a <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000e3a:	2317      	movs	r3, #23
 8000e3c:	18fc      	adds	r4, r7, r3
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	0018      	movs	r0, r3
 8000e42:	f000 f8f3 	bl	800102c <ADC_Enable>
 8000e46:	0003      	movs	r3, r0
 8000e48:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e4a:	2317      	movs	r3, #23
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d13e      	bne.n	8000ed2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e58:	4a21      	ldr	r2, [pc, #132]	@ (8000ee0 <HAL_ADC_Start_DMA+0xf4>)
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2280      	movs	r2, #128	@ 0x80
 8000e5e:	0052      	lsls	r2, r2, #1
 8000e60:	431a      	orrs	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2250      	movs	r2, #80	@ 0x50
 8000e70:	2100      	movs	r1, #0
 8000e72:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e78:	4a1a      	ldr	r2, [pc, #104]	@ (8000ee4 <HAL_ADC_Start_DMA+0xf8>)
 8000e7a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e80:	4a19      	ldr	r2, [pc, #100]	@ (8000ee8 <HAL_ADC_Start_DMA+0xfc>)
 8000e82:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e88:	4a18      	ldr	r2, [pc, #96]	@ (8000eec <HAL_ADC_Start_DMA+0x100>)
 8000e8a:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	221c      	movs	r2, #28
 8000e92:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3340      	adds	r3, #64	@ 0x40
 8000eae:	0019      	movs	r1, r3
 8000eb0:	68ba      	ldr	r2, [r7, #8]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f000 fb1c 	bl	80014f0 <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	e003      	b.n	8000ed2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000eca:	2317      	movs	r3, #23
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	2202      	movs	r2, #2
 8000ed0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000ed2:	2317      	movs	r3, #23
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	781b      	ldrb	r3, [r3, #0]
}
 8000ed8:	0018      	movs	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b007      	add	sp, #28
 8000ede:	bd90      	pop	{r4, r7, pc}
 8000ee0:	fffff0fe 	.word	0xfffff0fe
 8000ee4:	080010fd 	.word	0x080010fd
 8000ee8:	080011b1 	.word	0x080011b1
 8000eec:	080011cf 	.word	0x080011cf

08000ef0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000ef8:	46c0      	nop			@ (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b002      	add	sp, #8
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000f08:	46c0      	nop			@ (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2250      	movs	r2, #80	@ 0x50
 8000f2e:	5c9b      	ldrb	r3, [r3, r2]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d101      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x18>
 8000f34:	2302      	movs	r3, #2
 8000f36:	e06c      	b.n	8001012 <HAL_ADC_ConfigChannel+0xf2>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2250      	movs	r2, #80	@ 0x50
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	2204      	movs	r2, #4
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d00b      	beq.n	8000f64 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f50:	2220      	movs	r2, #32
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2250      	movs	r2, #80	@ 0x50
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e056      	b.n	8001012 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	4a2c      	ldr	r2, [pc, #176]	@ (800101c <HAL_ADC_ConfigChannel+0xfc>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d028      	beq.n	8000fc0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	035b      	lsls	r3, r3, #13
 8000f7a:	0b5a      	lsrs	r2, r3, #13
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	430a      	orrs	r2, r1
 8000f82:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	2380      	movs	r3, #128	@ 0x80
 8000f8a:	02db      	lsls	r3, r3, #11
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d009      	beq.n	8000fa4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8000f90:	4b23      	ldr	r3, [pc, #140]	@ (8001020 <HAL_ADC_ConfigChannel+0x100>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <HAL_ADC_ConfigChannel+0x100>)
 8000f96:	2180      	movs	r1, #128	@ 0x80
 8000f98:	0409      	lsls	r1, r1, #16
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000f9e:	200a      	movs	r0, #10
 8000fa0:	f000 f930 	bl	8001204 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	029b      	lsls	r3, r3, #10
 8000fac:	4013      	ands	r3, r2
 8000fae:	d02b      	beq.n	8001008 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <HAL_ADC_ConfigChannel+0x100>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <HAL_ADC_ConfigChannel+0x100>)
 8000fb6:	2180      	movs	r1, #128	@ 0x80
 8000fb8:	03c9      	lsls	r1, r1, #15
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	e023      	b.n	8001008 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	035b      	lsls	r3, r3, #13
 8000fcc:	0b5b      	lsrs	r3, r3, #13
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	02db      	lsls	r3, r3, #11
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d005      	beq.n	8000ff0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <HAL_ADC_ConfigChannel+0x100>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <HAL_ADC_ConfigChannel+0x100>)
 8000fea:	490e      	ldr	r1, [pc, #56]	@ (8001024 <HAL_ADC_ConfigChannel+0x104>)
 8000fec:	400a      	ands	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	2380      	movs	r3, #128	@ 0x80
 8000ff6:	029b      	lsls	r3, r3, #10
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d005      	beq.n	8001008 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <HAL_ADC_ConfigChannel+0x100>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <HAL_ADC_ConfigChannel+0x100>)
 8001002:	4909      	ldr	r1, [pc, #36]	@ (8001028 <HAL_ADC_ConfigChannel+0x108>)
 8001004:	400a      	ands	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2250      	movs	r2, #80	@ 0x50
 800100c:	2100      	movs	r1, #0
 800100e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	0018      	movs	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	b002      	add	sp, #8
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			@ (mov r8, r8)
 800101c:	00001001 	.word	0x00001001
 8001020:	40012708 	.word	0x40012708
 8001024:	ff7fffff 	.word	0xff7fffff
 8001028:	ffbfffff 	.word	0xffbfffff

0800102c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2203      	movs	r2, #3
 8001040:	4013      	ands	r3, r2
 8001042:	2b01      	cmp	r3, #1
 8001044:	d108      	bne.n	8001058 <ADC_Enable+0x2c>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2201      	movs	r2, #1
 800104e:	4013      	ands	r3, r2
 8001050:	2b01      	cmp	r3, #1
 8001052:	d101      	bne.n	8001058 <ADC_Enable+0x2c>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <ADC_Enable+0x2e>
 8001058:	2300      	movs	r3, #0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d146      	bne.n	80010ec <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	4a24      	ldr	r2, [pc, #144]	@ (80010f8 <ADC_Enable+0xcc>)
 8001066:	4013      	ands	r3, r2
 8001068:	d00d      	beq.n	8001086 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800106e:	2210      	movs	r2, #16
 8001070:	431a      	orrs	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107a:	2201      	movs	r2, #1
 800107c:	431a      	orrs	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e033      	b.n	80010ee <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2101      	movs	r1, #1
 8001092:	430a      	orrs	r2, r1
 8001094:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001096:	2001      	movs	r0, #1
 8001098:	f000 f8b4 	bl	8001204 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800109c:	f7ff fd28 	bl	8000af0 <HAL_GetTick>
 80010a0:	0003      	movs	r3, r0
 80010a2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80010a4:	e01b      	b.n	80010de <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010a6:	f7ff fd23 	bl	8000af0 <HAL_GetTick>
 80010aa:	0002      	movs	r2, r0
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b0a      	cmp	r3, #10
 80010b2:	d914      	bls.n	80010de <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2201      	movs	r2, #1
 80010bc:	4013      	ands	r3, r2
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d00d      	beq.n	80010de <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010c6:	2210      	movs	r2, #16
 80010c8:	431a      	orrs	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d2:	2201      	movs	r2, #1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e007      	b.n	80010ee <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2201      	movs	r2, #1
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d1dc      	bne.n	80010a6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b004      	add	sp, #16
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	80000017 	.word	0x80000017

080010fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001108:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800110e:	2250      	movs	r2, #80	@ 0x50
 8001110:	4013      	ands	r3, r2
 8001112:	d141      	bne.n	8001198 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001118:	2280      	movs	r2, #128	@ 0x80
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	431a      	orrs	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	23c0      	movs	r3, #192	@ 0xc0
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	4013      	ands	r3, r2
 800112e:	d12e      	bne.n	800118e <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2220      	movs	r2, #32
 8001134:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001136:	2b00      	cmp	r3, #0
 8001138:	d129      	bne.n	800118e <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2208      	movs	r2, #8
 8001142:	4013      	ands	r3, r2
 8001144:	2b08      	cmp	r3, #8
 8001146:	d122      	bne.n	800118e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2204      	movs	r2, #4
 8001150:	4013      	ands	r3, r2
 8001152:	d110      	bne.n	8001176 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	210c      	movs	r1, #12
 8001160:	438a      	bics	r2, r1
 8001162:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001168:	4a10      	ldr	r2, [pc, #64]	@ (80011ac <ADC_DMAConvCplt+0xb0>)
 800116a:	4013      	ands	r3, r2
 800116c:	2201      	movs	r2, #1
 800116e:	431a      	orrs	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	655a      	str	r2, [r3, #84]	@ 0x54
 8001174:	e00b      	b.n	800118e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800117a:	2220      	movs	r2, #32
 800117c:	431a      	orrs	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001186:	2201      	movs	r2, #1
 8001188:	431a      	orrs	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff fead 	bl	8000ef0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001196:	e005      	b.n	80011a4 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	0010      	movs	r0, r2
 80011a2:	4798      	blx	r3
}
 80011a4:	46c0      	nop			@ (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b004      	add	sp, #16
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	fffffefe 	.word	0xfffffefe

080011b0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff fe9d 	bl	8000f00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b004      	add	sp, #16
 80011cc:	bd80      	pop	{r7, pc}

080011ce <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011da:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011e0:	2240      	movs	r2, #64	@ 0x40
 80011e2:	431a      	orrs	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ec:	2204      	movs	r2, #4
 80011ee:	431a      	orrs	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff fe8a 	bl	8000f10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011fc:	46c0      	nop			@ (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b004      	add	sp, #16
 8001202:	bd80      	pop	{r7, pc}

08001204 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800120c:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <ADC_DelayMicroSecond+0x38>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	490b      	ldr	r1, [pc, #44]	@ (8001240 <ADC_DelayMicroSecond+0x3c>)
 8001212:	0018      	movs	r0, r3
 8001214:	f7fe ff78 	bl	8000108 <__udivsi3>
 8001218:	0003      	movs	r3, r0
 800121a:	001a      	movs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4353      	muls	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001222:	e002      	b.n	800122a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3b01      	subs	r3, #1
 8001228:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f9      	bne.n	8001224 <ADC_DelayMicroSecond+0x20>
  }
}
 8001230:	46c0      	nop			@ (mov r8, r8)
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b004      	add	sp, #16
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	20000010 	.word	0x20000010
 8001240:	000f4240 	.word	0x000f4240

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	0002      	movs	r2, r0
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001250:	1dfb      	adds	r3, r7, #7
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b7f      	cmp	r3, #127	@ 0x7f
 8001256:	d809      	bhi.n	800126c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001258:	1dfb      	adds	r3, r7, #7
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	001a      	movs	r2, r3
 800125e:	231f      	movs	r3, #31
 8001260:	401a      	ands	r2, r3
 8001262:	4b04      	ldr	r3, [pc, #16]	@ (8001274 <__NVIC_EnableIRQ+0x30>)
 8001264:	2101      	movs	r1, #1
 8001266:	4091      	lsls	r1, r2
 8001268:	000a      	movs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]
  }
}
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b002      	add	sp, #8
 8001272:	bd80      	pop	{r7, pc}
 8001274:	e000e100 	.word	0xe000e100

08001278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	0002      	movs	r2, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b7f      	cmp	r3, #127	@ 0x7f
 800128c:	d828      	bhi.n	80012e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800128e:	4a2f      	ldr	r2, [pc, #188]	@ (800134c <__NVIC_SetPriority+0xd4>)
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	b25b      	sxtb	r3, r3
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	33c0      	adds	r3, #192	@ 0xc0
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	589b      	ldr	r3, [r3, r2]
 800129e:	1dfa      	adds	r2, r7, #7
 80012a0:	7812      	ldrb	r2, [r2, #0]
 80012a2:	0011      	movs	r1, r2
 80012a4:	2203      	movs	r2, #3
 80012a6:	400a      	ands	r2, r1
 80012a8:	00d2      	lsls	r2, r2, #3
 80012aa:	21ff      	movs	r1, #255	@ 0xff
 80012ac:	4091      	lsls	r1, r2
 80012ae:	000a      	movs	r2, r1
 80012b0:	43d2      	mvns	r2, r2
 80012b2:	401a      	ands	r2, r3
 80012b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	019b      	lsls	r3, r3, #6
 80012ba:	22ff      	movs	r2, #255	@ 0xff
 80012bc:	401a      	ands	r2, r3
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	0018      	movs	r0, r3
 80012c4:	2303      	movs	r3, #3
 80012c6:	4003      	ands	r3, r0
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012cc:	481f      	ldr	r0, [pc, #124]	@ (800134c <__NVIC_SetPriority+0xd4>)
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	430a      	orrs	r2, r1
 80012d8:	33c0      	adds	r3, #192	@ 0xc0
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012de:	e031      	b.n	8001344 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001350 <__NVIC_SetPriority+0xd8>)
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	0019      	movs	r1, r3
 80012e8:	230f      	movs	r3, #15
 80012ea:	400b      	ands	r3, r1
 80012ec:	3b08      	subs	r3, #8
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3306      	adds	r3, #6
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	18d3      	adds	r3, r2, r3
 80012f6:	3304      	adds	r3, #4
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	1dfa      	adds	r2, r7, #7
 80012fc:	7812      	ldrb	r2, [r2, #0]
 80012fe:	0011      	movs	r1, r2
 8001300:	2203      	movs	r2, #3
 8001302:	400a      	ands	r2, r1
 8001304:	00d2      	lsls	r2, r2, #3
 8001306:	21ff      	movs	r1, #255	@ 0xff
 8001308:	4091      	lsls	r1, r2
 800130a:	000a      	movs	r2, r1
 800130c:	43d2      	mvns	r2, r2
 800130e:	401a      	ands	r2, r3
 8001310:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	019b      	lsls	r3, r3, #6
 8001316:	22ff      	movs	r2, #255	@ 0xff
 8001318:	401a      	ands	r2, r3
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	0018      	movs	r0, r3
 8001320:	2303      	movs	r3, #3
 8001322:	4003      	ands	r3, r0
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001328:	4809      	ldr	r0, [pc, #36]	@ (8001350 <__NVIC_SetPriority+0xd8>)
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	001c      	movs	r4, r3
 8001330:	230f      	movs	r3, #15
 8001332:	4023      	ands	r3, r4
 8001334:	3b08      	subs	r3, #8
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	430a      	orrs	r2, r1
 800133a:	3306      	adds	r3, #6
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	18c3      	adds	r3, r0, r3
 8001340:	3304      	adds	r3, #4
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	46c0      	nop			@ (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b003      	add	sp, #12
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	1e5a      	subs	r2, r3, #1
 8001360:	2380      	movs	r3, #128	@ 0x80
 8001362:	045b      	lsls	r3, r3, #17
 8001364:	429a      	cmp	r2, r3
 8001366:	d301      	bcc.n	800136c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001368:	2301      	movs	r3, #1
 800136a:	e010      	b.n	800138e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136c:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <SysTick_Config+0x44>)
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	3a01      	subs	r2, #1
 8001372:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001374:	2301      	movs	r3, #1
 8001376:	425b      	negs	r3, r3
 8001378:	2103      	movs	r1, #3
 800137a:	0018      	movs	r0, r3
 800137c:	f7ff ff7c 	bl	8001278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <SysTick_Config+0x44>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <SysTick_Config+0x44>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	0018      	movs	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	b002      	add	sp, #8
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	210f      	movs	r1, #15
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	1c02      	adds	r2, r0, #0
 80013ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	0011      	movs	r1, r2
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff ff5d 	bl	8001278 <__NVIC_SetPriority>
}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b004      	add	sp, #16
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	0002      	movs	r2, r0
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d2:	1dfb      	adds	r3, r7, #7
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	0018      	movs	r0, r3
 80013da:	f7ff ff33 	bl	8001244 <__NVIC_EnableIRQ>
}
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b002      	add	sp, #8
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7ff ffaf 	bl	8001354 <SysTick_Config>
 80013f6:	0003      	movs	r3, r0
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b002      	add	sp, #8
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e061      	b.n	80014d6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a32      	ldr	r2, [pc, #200]	@ (80014e0 <HAL_DMA_Init+0xe0>)
 8001418:	4694      	mov	ip, r2
 800141a:	4463      	add	r3, ip
 800141c:	2114      	movs	r1, #20
 800141e:	0018      	movs	r0, r3
 8001420:	f7fe fe72 	bl	8000108 <__udivsi3>
 8001424:	0003      	movs	r3, r0
 8001426:	009a      	lsls	r2, r3, #2
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a2d      	ldr	r2, [pc, #180]	@ (80014e4 <HAL_DMA_Init+0xe4>)
 8001430:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2225      	movs	r2, #37	@ 0x25
 8001436:	2102      	movs	r1, #2
 8001438:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4a28      	ldr	r2, [pc, #160]	@ (80014e8 <HAL_DMA_Init+0xe8>)
 8001446:	4013      	ands	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001452:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4313      	orrs	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	2380      	movs	r3, #128	@ 0x80
 8001486:	01db      	lsls	r3, r3, #7
 8001488:	429a      	cmp	r2, r3
 800148a:	d018      	beq.n	80014be <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800148c:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <HAL_DMA_Init+0xec>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001494:	211c      	movs	r1, #28
 8001496:	400b      	ands	r3, r1
 8001498:	210f      	movs	r1, #15
 800149a:	4099      	lsls	r1, r3
 800149c:	000b      	movs	r3, r1
 800149e:	43d9      	mvns	r1, r3
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <HAL_DMA_Init+0xec>)
 80014a2:	400a      	ands	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014a6:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <HAL_DMA_Init+0xec>)
 80014a8:	6819      	ldr	r1, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b2:	201c      	movs	r0, #28
 80014b4:	4003      	ands	r3, r0
 80014b6:	409a      	lsls	r2, r3
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <HAL_DMA_Init+0xec>)
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2225      	movs	r2, #37	@ 0x25
 80014c8:	2101      	movs	r1, #1
 80014ca:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2224      	movs	r2, #36	@ 0x24
 80014d0:	2100      	movs	r1, #0
 80014d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	0018      	movs	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	b004      	add	sp, #16
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			@ (mov r8, r8)
 80014e0:	bffdfff8 	.word	0xbffdfff8
 80014e4:	40020000 	.word	0x40020000
 80014e8:	ffff800f 	.word	0xffff800f
 80014ec:	400200a8 	.word	0x400200a8

080014f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014fe:	2317      	movs	r3, #23
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2224      	movs	r2, #36	@ 0x24
 800150a:	5c9b      	ldrb	r3, [r3, r2]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d101      	bne.n	8001514 <HAL_DMA_Start_IT+0x24>
 8001510:	2302      	movs	r3, #2
 8001512:	e04f      	b.n	80015b4 <HAL_DMA_Start_IT+0xc4>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2224      	movs	r2, #36	@ 0x24
 8001518:	2101      	movs	r1, #1
 800151a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2225      	movs	r2, #37	@ 0x25
 8001520:	5c9b      	ldrb	r3, [r3, r2]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b01      	cmp	r3, #1
 8001526:	d13a      	bne.n	800159e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2225      	movs	r2, #37	@ 0x25
 800152c:	2102      	movs	r1, #2
 800152e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2101      	movs	r1, #1
 8001542:	438a      	bics	r2, r1
 8001544:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f933 	bl	80017b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	2b00      	cmp	r3, #0
 8001558:	d008      	beq.n	800156c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	210e      	movs	r1, #14
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	e00f      	b.n	800158c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2104      	movs	r1, #4
 8001578:	438a      	bics	r2, r1
 800157a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	210a      	movs	r1, #10
 8001588:	430a      	orrs	r2, r1
 800158a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2101      	movs	r1, #1
 8001598:	430a      	orrs	r2, r1
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	e007      	b.n	80015ae <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2224      	movs	r2, #36	@ 0x24
 80015a2:	2100      	movs	r1, #0
 80015a4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015a6:	2317      	movs	r3, #23
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	2202      	movs	r2, #2
 80015ac:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80015ae:	2317      	movs	r3, #23
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	781b      	ldrb	r3, [r3, #0]
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b006      	add	sp, #24
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d8:	221c      	movs	r2, #28
 80015da:	4013      	ands	r3, r2
 80015dc:	2204      	movs	r2, #4
 80015de:	409a      	lsls	r2, r3
 80015e0:	0013      	movs	r3, r2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4013      	ands	r3, r2
 80015e6:	d026      	beq.n	8001636 <HAL_DMA_IRQHandler+0x7a>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2204      	movs	r2, #4
 80015ec:	4013      	ands	r3, r2
 80015ee:	d022      	beq.n	8001636 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2220      	movs	r2, #32
 80015f8:	4013      	ands	r3, r2
 80015fa:	d107      	bne.n	800160c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2104      	movs	r1, #4
 8001608:	438a      	bics	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001610:	221c      	movs	r2, #28
 8001612:	401a      	ands	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001618:	2104      	movs	r1, #4
 800161a:	4091      	lsls	r1, r2
 800161c:	000a      	movs	r2, r1
 800161e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001624:	2b00      	cmp	r3, #0
 8001626:	d100      	bne.n	800162a <HAL_DMA_IRQHandler+0x6e>
 8001628:	e071      	b.n	800170e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	0010      	movs	r0, r2
 8001632:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001634:	e06b      	b.n	800170e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163a:	221c      	movs	r2, #28
 800163c:	4013      	ands	r3, r2
 800163e:	2202      	movs	r2, #2
 8001640:	409a      	lsls	r2, r3
 8001642:	0013      	movs	r3, r2
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4013      	ands	r3, r2
 8001648:	d02d      	beq.n	80016a6 <HAL_DMA_IRQHandler+0xea>
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2202      	movs	r2, #2
 800164e:	4013      	ands	r3, r2
 8001650:	d029      	beq.n	80016a6 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2220      	movs	r2, #32
 800165a:	4013      	ands	r3, r2
 800165c:	d10b      	bne.n	8001676 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	210a      	movs	r1, #10
 800166a:	438a      	bics	r2, r1
 800166c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2225      	movs	r2, #37	@ 0x25
 8001672:	2101      	movs	r1, #1
 8001674:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	221c      	movs	r2, #28
 800167c:	401a      	ands	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	2102      	movs	r1, #2
 8001684:	4091      	lsls	r1, r2
 8001686:	000a      	movs	r2, r1
 8001688:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2224      	movs	r2, #36	@ 0x24
 800168e:	2100      	movs	r1, #0
 8001690:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001696:	2b00      	cmp	r3, #0
 8001698:	d039      	beq.n	800170e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	0010      	movs	r0, r2
 80016a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016a4:	e033      	b.n	800170e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	221c      	movs	r2, #28
 80016ac:	4013      	ands	r3, r2
 80016ae:	2208      	movs	r2, #8
 80016b0:	409a      	lsls	r2, r3
 80016b2:	0013      	movs	r3, r2
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4013      	ands	r3, r2
 80016b8:	d02a      	beq.n	8001710 <HAL_DMA_IRQHandler+0x154>
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	2208      	movs	r2, #8
 80016be:	4013      	ands	r3, r2
 80016c0:	d026      	beq.n	8001710 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	210e      	movs	r1, #14
 80016ce:	438a      	bics	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d6:	221c      	movs	r2, #28
 80016d8:	401a      	ands	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	2101      	movs	r1, #1
 80016e0:	4091      	lsls	r1, r2
 80016e2:	000a      	movs	r2, r1
 80016e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2225      	movs	r2, #37	@ 0x25
 80016f0:	2101      	movs	r1, #1
 80016f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2224      	movs	r2, #36	@ 0x24
 80016f8:	2100      	movs	r1, #0
 80016fa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	0010      	movs	r0, r2
 800170c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800170e:	46c0      	nop			@ (mov r8, r8)
 8001710:	46c0      	nop			@ (mov r8, r8)
}
 8001712:	46bd      	mov	sp, r7
 8001714:	b004      	add	sp, #16
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	230b      	movs	r3, #11
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	1c0a      	adds	r2, r1, #0
 8001728:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800172a:	2317      	movs	r3, #23
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2224      	movs	r2, #36	@ 0x24
 8001736:	5c9b      	ldrb	r3, [r3, r2]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <HAL_DMA_RegisterCallback+0x28>
 800173c:	2302      	movs	r3, #2
 800173e:	e037      	b.n	80017b0 <HAL_DMA_RegisterCallback+0x98>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2224      	movs	r2, #36	@ 0x24
 8001744:	2101      	movs	r1, #1
 8001746:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2225      	movs	r2, #37	@ 0x25
 800174c:	5c9b      	ldrb	r3, [r3, r2]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d122      	bne.n	800179a <HAL_DMA_RegisterCallback+0x82>
  {
    switch (CallbackID)
 8001754:	230b      	movs	r3, #11
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d014      	beq.n	8001788 <HAL_DMA_RegisterCallback+0x70>
 800175e:	dc17      	bgt.n	8001790 <HAL_DMA_RegisterCallback+0x78>
 8001760:	2b02      	cmp	r3, #2
 8001762:	d00d      	beq.n	8001780 <HAL_DMA_RegisterCallback+0x68>
 8001764:	dc14      	bgt.n	8001790 <HAL_DMA_RegisterCallback+0x78>
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <HAL_DMA_RegisterCallback+0x58>
 800176a:	2b01      	cmp	r3, #1
 800176c:	d004      	beq.n	8001778 <HAL_DMA_RegisterCallback+0x60>
 800176e:	e00f      	b.n	8001790 <HAL_DMA_RegisterCallback+0x78>
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	62da      	str	r2, [r3, #44]	@ 0x2c
           break;
 8001776:	e014      	b.n	80017a2 <HAL_DMA_RegisterCallback+0x8a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	631a      	str	r2, [r3, #48]	@ 0x30
           break;
 800177e:	e010      	b.n	80017a2 <HAL_DMA_RegisterCallback+0x8a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	635a      	str	r2, [r3, #52]	@ 0x34
           break;
 8001786:	e00c      	b.n	80017a2 <HAL_DMA_RegisterCallback+0x8a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	639a      	str	r2, [r3, #56]	@ 0x38
           break;
 800178e:	e008      	b.n	80017a2 <HAL_DMA_RegisterCallback+0x8a>

     default:
           status = HAL_ERROR;
 8001790:	2317      	movs	r3, #23
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
           break;
 8001798:	e003      	b.n	80017a2 <HAL_DMA_RegisterCallback+0x8a>
    }
  }
  else
  {
    status = HAL_ERROR;
 800179a:	2317      	movs	r3, #23
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2224      	movs	r2, #36	@ 0x24
 80017a6:	2100      	movs	r1, #0
 80017a8:	5499      	strb	r1, [r3, r2]

  return status;
 80017aa:	2317      	movs	r3, #23
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	781b      	ldrb	r3, [r3, #0]
}
 80017b0:	0018      	movs	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b006      	add	sp, #24
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	221c      	movs	r2, #28
 80017cc:	401a      	ands	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	2101      	movs	r1, #1
 80017d4:	4091      	lsls	r1, r2
 80017d6:	000a      	movs	r2, r1
 80017d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b10      	cmp	r3, #16
 80017e8:	d108      	bne.n	80017fc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017fa:	e007      	b.n	800180c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	60da      	str	r2, [r3, #12]
}
 800180c:	46c0      	nop			@ (mov r8, r8)
 800180e:	46bd      	mov	sp, r7
 8001810:	b004      	add	sp, #16
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800182a:	e143      	b.n	8001ab4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2101      	movs	r1, #1
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4091      	lsls	r1, r2
 8001836:	000a      	movs	r2, r1
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d100      	bne.n	8001844 <HAL_GPIO_Init+0x30>
 8001842:	e134      	b.n	8001aae <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2203      	movs	r2, #3
 800184a:	4013      	ands	r3, r2
 800184c:	2b01      	cmp	r3, #1
 800184e:	d005      	beq.n	800185c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2203      	movs	r2, #3
 8001856:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001858:	2b02      	cmp	r3, #2
 800185a:	d130      	bne.n	80018be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	409a      	lsls	r2, r3
 800186a:	0013      	movs	r3, r2
 800186c:	43da      	mvns	r2, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	409a      	lsls	r2, r3
 800187e:	0013      	movs	r3, r2
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001892:	2201      	movs	r2, #1
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
 8001898:	0013      	movs	r3, r2
 800189a:	43da      	mvns	r2, r3
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	2201      	movs	r2, #1
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
 80018b0:	0013      	movs	r3, r2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2203      	movs	r2, #3
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d017      	beq.n	80018fa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	409a      	lsls	r2, r3
 80018d8:	0013      	movs	r3, r2
 80018da:	43da      	mvns	r2, r3
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	409a      	lsls	r2, r3
 80018ec:	0013      	movs	r3, r2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2203      	movs	r2, #3
 8001900:	4013      	ands	r3, r2
 8001902:	2b02      	cmp	r3, #2
 8001904:	d123      	bne.n	800194e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	08da      	lsrs	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3208      	adds	r2, #8
 800190e:	0092      	lsls	r2, r2, #2
 8001910:	58d3      	ldr	r3, [r2, r3]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	2207      	movs	r2, #7
 8001918:	4013      	ands	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	409a      	lsls	r2, r3
 8001920:	0013      	movs	r3, r2
 8001922:	43da      	mvns	r2, r3
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2107      	movs	r1, #7
 8001932:	400b      	ands	r3, r1
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	409a      	lsls	r2, r3
 8001938:	0013      	movs	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	0092      	lsls	r2, r2, #2
 800194a:	6939      	ldr	r1, [r7, #16]
 800194c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	409a      	lsls	r2, r3
 800195c:	0013      	movs	r3, r2
 800195e:	43da      	mvns	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2203      	movs	r2, #3
 800196c:	401a      	ands	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	409a      	lsls	r2, r3
 8001974:	0013      	movs	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	23c0      	movs	r3, #192	@ 0xc0
 8001988:	029b      	lsls	r3, r3, #10
 800198a:	4013      	ands	r3, r2
 800198c:	d100      	bne.n	8001990 <HAL_GPIO_Init+0x17c>
 800198e:	e08e      	b.n	8001aae <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001990:	4b4e      	ldr	r3, [pc, #312]	@ (8001acc <HAL_GPIO_Init+0x2b8>)
 8001992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001994:	4b4d      	ldr	r3, [pc, #308]	@ (8001acc <HAL_GPIO_Init+0x2b8>)
 8001996:	2101      	movs	r1, #1
 8001998:	430a      	orrs	r2, r1
 800199a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800199c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ad0 <HAL_GPIO_Init+0x2bc>)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	589b      	ldr	r3, [r3, r2]
 80019a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2203      	movs	r2, #3
 80019ae:	4013      	ands	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	220f      	movs	r2, #15
 80019b4:	409a      	lsls	r2, r3
 80019b6:	0013      	movs	r3, r2
 80019b8:	43da      	mvns	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	23a0      	movs	r3, #160	@ 0xa0
 80019c4:	05db      	lsls	r3, r3, #23
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d00d      	beq.n	80019e6 <HAL_GPIO_Init+0x1d2>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a41      	ldr	r2, [pc, #260]	@ (8001ad4 <HAL_GPIO_Init+0x2c0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d007      	beq.n	80019e2 <HAL_GPIO_Init+0x1ce>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a40      	ldr	r2, [pc, #256]	@ (8001ad8 <HAL_GPIO_Init+0x2c4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_GPIO_Init+0x1ca>
 80019da:	2302      	movs	r3, #2
 80019dc:	e004      	b.n	80019e8 <HAL_GPIO_Init+0x1d4>
 80019de:	2306      	movs	r3, #6
 80019e0:	e002      	b.n	80019e8 <HAL_GPIO_Init+0x1d4>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_GPIO_Init+0x1d4>
 80019e6:	2300      	movs	r3, #0
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	2103      	movs	r1, #3
 80019ec:	400a      	ands	r2, r1
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	4093      	lsls	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f8:	4935      	ldr	r1, [pc, #212]	@ (8001ad0 <HAL_GPIO_Init+0x2bc>)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a06:	4b35      	ldr	r3, [pc, #212]	@ (8001adc <HAL_GPIO_Init+0x2c8>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	2380      	movs	r3, #128	@ 0x80
 8001a1c:	035b      	lsls	r3, r3, #13
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001adc <HAL_GPIO_Init+0x2c8>)
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a30:	4b2a      	ldr	r3, [pc, #168]	@ (8001adc <HAL_GPIO_Init+0x2c8>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	2380      	movs	r3, #128	@ 0x80
 8001a46:	039b      	lsls	r3, r3, #14
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a54:	4b21      	ldr	r3, [pc, #132]	@ (8001adc <HAL_GPIO_Init+0x2c8>)
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001a5a:	4b20      	ldr	r3, [pc, #128]	@ (8001adc <HAL_GPIO_Init+0x2c8>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43da      	mvns	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	2380      	movs	r3, #128	@ 0x80
 8001a70:	029b      	lsls	r3, r3, #10
 8001a72:	4013      	ands	r3, r2
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a7e:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <HAL_GPIO_Init+0x2c8>)
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a84:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <HAL_GPIO_Init+0x2c8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	2380      	movs	r3, #128	@ 0x80
 8001a9a:	025b      	lsls	r3, r3, #9
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <HAL_GPIO_Init+0x2c8>)
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	40da      	lsrs	r2, r3
 8001abc:	1e13      	subs	r3, r2, #0
 8001abe:	d000      	beq.n	8001ac2 <HAL_GPIO_Init+0x2ae>
 8001ac0:	e6b4      	b.n	800182c <HAL_GPIO_Init+0x18>
  }
}
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	46c0      	nop			@ (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b006      	add	sp, #24
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	50000400 	.word	0x50000400
 8001ad8:	50000800 	.word	0x50000800
 8001adc:	40010400 	.word	0x40010400

08001ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae0:	b5b0      	push	{r4, r5, r7, lr}
 8001ae2:	b08a      	sub	sp, #40	@ 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d102      	bne.n	8001af4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f000 fb6c 	bl	80021cc <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001af4:	4bc8      	ldr	r3, [pc, #800]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	220c      	movs	r2, #12
 8001afa:	4013      	ands	r3, r2
 8001afc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001afe:	4bc6      	ldr	r3, [pc, #792]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	2380      	movs	r3, #128	@ 0x80
 8001b04:	025b      	lsls	r3, r3, #9
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4013      	ands	r3, r2
 8001b12:	d100      	bne.n	8001b16 <HAL_RCC_OscConfig+0x36>
 8001b14:	e07d      	b.n	8001c12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d007      	beq.n	8001b2c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	d112      	bne.n	8001b48 <HAL_RCC_OscConfig+0x68>
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	2380      	movs	r3, #128	@ 0x80
 8001b26:	025b      	lsls	r3, r3, #9
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d10d      	bne.n	8001b48 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2c:	4bba      	ldr	r3, [pc, #744]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2380      	movs	r3, #128	@ 0x80
 8001b32:	029b      	lsls	r3, r3, #10
 8001b34:	4013      	ands	r3, r2
 8001b36:	d100      	bne.n	8001b3a <HAL_RCC_OscConfig+0x5a>
 8001b38:	e06a      	b.n	8001c10 <HAL_RCC_OscConfig+0x130>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d166      	bne.n	8001c10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	f000 fb42 	bl	80021cc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	2380      	movs	r3, #128	@ 0x80
 8001b4e:	025b      	lsls	r3, r3, #9
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_OscConfig+0x84>
 8001b54:	4bb0      	ldr	r3, [pc, #704]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4baf      	ldr	r3, [pc, #700]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001b5a:	2180      	movs	r1, #128	@ 0x80
 8001b5c:	0249      	lsls	r1, r1, #9
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	e027      	b.n	8001bb4 <HAL_RCC_OscConfig+0xd4>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	23a0      	movs	r3, #160	@ 0xa0
 8001b6a:	02db      	lsls	r3, r3, #11
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d10e      	bne.n	8001b8e <HAL_RCC_OscConfig+0xae>
 8001b70:	4ba9      	ldr	r3, [pc, #676]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4ba8      	ldr	r3, [pc, #672]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001b76:	2180      	movs	r1, #128	@ 0x80
 8001b78:	02c9      	lsls	r1, r1, #11
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	4ba6      	ldr	r3, [pc, #664]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4ba5      	ldr	r3, [pc, #660]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001b84:	2180      	movs	r1, #128	@ 0x80
 8001b86:	0249      	lsls	r1, r1, #9
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e012      	b.n	8001bb4 <HAL_RCC_OscConfig+0xd4>
 8001b8e:	4ba2      	ldr	r3, [pc, #648]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4ba1      	ldr	r3, [pc, #644]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001b94:	49a1      	ldr	r1, [pc, #644]	@ (8001e1c <HAL_RCC_OscConfig+0x33c>)
 8001b96:	400a      	ands	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	4b9f      	ldr	r3, [pc, #636]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	2380      	movs	r3, #128	@ 0x80
 8001ba0:	025b      	lsls	r3, r3, #9
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4b9b      	ldr	r3, [pc, #620]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b9a      	ldr	r3, [pc, #616]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001bae:	499c      	ldr	r1, [pc, #624]	@ (8001e20 <HAL_RCC_OscConfig+0x340>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d014      	beq.n	8001be6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7fe ff98 	bl	8000af0 <HAL_GetTick>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc6:	f7fe ff93 	bl	8000af0 <HAL_GetTick>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b64      	cmp	r3, #100	@ 0x64
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e2f9      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bd8:	4b8f      	ldr	r3, [pc, #572]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	029b      	lsls	r3, r3, #10
 8001be0:	4013      	ands	r3, r2
 8001be2:	d0f0      	beq.n	8001bc6 <HAL_RCC_OscConfig+0xe6>
 8001be4:	e015      	b.n	8001c12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7fe ff83 	bl	8000af0 <HAL_GetTick>
 8001bea:	0003      	movs	r3, r0
 8001bec:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7fe ff7e 	bl	8000af0 <HAL_GetTick>
 8001bf4:	0002      	movs	r2, r0
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	@ 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e2e4      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c02:	4b85      	ldr	r3, [pc, #532]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	2380      	movs	r3, #128	@ 0x80
 8001c08:	029b      	lsls	r3, r3, #10
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x110>
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2202      	movs	r2, #2
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d100      	bne.n	8001c1e <HAL_RCC_OscConfig+0x13e>
 8001c1c:	e099      	b.n	8001d52 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	2220      	movs	r2, #32
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d009      	beq.n	8001c40 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001c2c:	4b7a      	ldr	r3, [pc, #488]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b79      	ldr	r3, [pc, #484]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001c32:	2120      	movs	r1, #32
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	4393      	bics	r3, r2
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d005      	beq.n	8001c52 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	2b0c      	cmp	r3, #12
 8001c4a:	d13e      	bne.n	8001cca <HAL_RCC_OscConfig+0x1ea>
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d13b      	bne.n	8001cca <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001c52:	4b71      	ldr	r3, [pc, #452]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2204      	movs	r2, #4
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d004      	beq.n	8001c66 <HAL_RCC_OscConfig+0x186>
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e2b2      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	4b6c      	ldr	r3, [pc, #432]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e24 <HAL_RCC_OscConfig+0x344>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	0019      	movs	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	021a      	lsls	r2, r3, #8
 8001c76:	4b68      	ldr	r3, [pc, #416]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c7c:	4b66      	ldr	r3, [pc, #408]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2209      	movs	r2, #9
 8001c82:	4393      	bics	r3, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	4b64      	ldr	r3, [pc, #400]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c8e:	f000 fbeb 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 8001c92:	0001      	movs	r1, r0
 8001c94:	4b60      	ldr	r3, [pc, #384]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	4a62      	ldr	r2, [pc, #392]	@ (8001e28 <HAL_RCC_OscConfig+0x348>)
 8001ca0:	5cd3      	ldrb	r3, [r2, r3]
 8001ca2:	000a      	movs	r2, r1
 8001ca4:	40da      	lsrs	r2, r3
 8001ca6:	4b61      	ldr	r3, [pc, #388]	@ (8001e2c <HAL_RCC_OscConfig+0x34c>)
 8001ca8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001caa:	4b61      	ldr	r3, [pc, #388]	@ (8001e30 <HAL_RCC_OscConfig+0x350>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2513      	movs	r5, #19
 8001cb0:	197c      	adds	r4, r7, r5
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f7fe fed6 	bl	8000a64 <HAL_InitTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001cbc:	197b      	adds	r3, r7, r5
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d046      	beq.n	8001d52 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001cc4:	197b      	adds	r3, r7, r5
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	e280      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d027      	beq.n	8001d20 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001cd0:	4b51      	ldr	r3, [pc, #324]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2209      	movs	r2, #9
 8001cd6:	4393      	bics	r3, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	4b4f      	ldr	r3, [pc, #316]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7fe ff05 	bl	8000af0 <HAL_GetTick>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cec:	f7fe ff00 	bl	8000af0 <HAL_GetTick>
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e266      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cfe:	4b46      	ldr	r3, [pc, #280]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2204      	movs	r2, #4
 8001d04:	4013      	ands	r3, r2
 8001d06:	d0f1      	beq.n	8001cec <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d08:	4b43      	ldr	r3, [pc, #268]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	4a45      	ldr	r2, [pc, #276]	@ (8001e24 <HAL_RCC_OscConfig+0x344>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	021a      	lsls	r2, r3, #8
 8001d18:	4b3f      	ldr	r3, [pc, #252]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	e018      	b.n	8001d52 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d20:	4b3d      	ldr	r3, [pc, #244]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b3c      	ldr	r3, [pc, #240]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001d26:	2101      	movs	r1, #1
 8001d28:	438a      	bics	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7fe fee0 	bl	8000af0 <HAL_GetTick>
 8001d30:	0003      	movs	r3, r0
 8001d32:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d36:	f7fe fedb 	bl	8000af0 <HAL_GetTick>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e241      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d48:	4b33      	ldr	r3, [pc, #204]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d1f1      	bne.n	8001d36 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2210      	movs	r2, #16
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d100      	bne.n	8001d5e <HAL_RCC_OscConfig+0x27e>
 8001d5c:	e0a1      	b.n	8001ea2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d140      	bne.n	8001de6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d64:	4b2c      	ldr	r3, [pc, #176]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	2380      	movs	r3, #128	@ 0x80
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_OscConfig+0x29c>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e227      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d7c:	4b26      	ldr	r3, [pc, #152]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4a2c      	ldr	r2, [pc, #176]	@ (8001e34 <HAL_RCC_OscConfig+0x354>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1a      	ldr	r2, [r3, #32]
 8001d8a:	4b23      	ldr	r3, [pc, #140]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d90:	4b21      	ldr	r3, [pc, #132]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	0a19      	lsrs	r1, r3, #8
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	061a      	lsls	r2, r3, #24
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001da0:	430a      	orrs	r2, r1
 8001da2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	0b5b      	lsrs	r3, r3, #13
 8001daa:	3301      	adds	r3, #1
 8001dac:	2280      	movs	r2, #128	@ 0x80
 8001dae:	0212      	lsls	r2, r2, #8
 8001db0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001db2:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	091b      	lsrs	r3, r3, #4
 8001db8:	210f      	movs	r1, #15
 8001dba:	400b      	ands	r3, r1
 8001dbc:	491a      	ldr	r1, [pc, #104]	@ (8001e28 <HAL_RCC_OscConfig+0x348>)
 8001dbe:	5ccb      	ldrb	r3, [r1, r3]
 8001dc0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <HAL_RCC_OscConfig+0x34c>)
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e30 <HAL_RCC_OscConfig+0x350>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2513      	movs	r5, #19
 8001dcc:	197c      	adds	r4, r7, r5
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7fe fe48 	bl	8000a64 <HAL_InitTick>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001dd8:	197b      	adds	r3, r7, r5
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d060      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001de0:	197b      	adds	r3, r7, r5
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	e1f2      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d03f      	beq.n	8001e6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dee:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <HAL_RCC_OscConfig+0x338>)
 8001df4:	2180      	movs	r1, #128	@ 0x80
 8001df6:	0049      	lsls	r1, r1, #1
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7fe fe78 	bl	8000af0 <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e04:	e018      	b.n	8001e38 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e06:	f7fe fe73 	bl	8000af0 <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d911      	bls.n	8001e38 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e1d9      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	fffeffff 	.word	0xfffeffff
 8001e20:	fffbffff 	.word	0xfffbffff
 8001e24:	ffffe0ff 	.word	0xffffe0ff
 8001e28:	080034c8 	.word	0x080034c8
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	20000014 	.word	0x20000014
 8001e34:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e38:	4bc9      	ldr	r3, [pc, #804]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	@ 0x80
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4013      	ands	r3, r2
 8001e42:	d0e0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e44:	4bc6      	ldr	r3, [pc, #792]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4ac6      	ldr	r2, [pc, #792]	@ (8002164 <HAL_RCC_OscConfig+0x684>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1a      	ldr	r2, [r3, #32]
 8001e52:	4bc3      	ldr	r3, [pc, #780]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e58:	4bc1      	ldr	r3, [pc, #772]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	021b      	lsls	r3, r3, #8
 8001e5e:	0a19      	lsrs	r1, r3, #8
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	061a      	lsls	r2, r3, #24
 8001e66:	4bbe      	ldr	r3, [pc, #760]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	e019      	b.n	8001ea2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e6e:	4bbc      	ldr	r3, [pc, #752]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4bbb      	ldr	r3, [pc, #748]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001e74:	49bc      	ldr	r1, [pc, #752]	@ (8002168 <HAL_RCC_OscConfig+0x688>)
 8001e76:	400a      	ands	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7fe fe39 	bl	8000af0 <HAL_GetTick>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e84:	f7fe fe34 	bl	8000af0 <HAL_GetTick>
 8001e88:	0002      	movs	r2, r0
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e19a      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e96:	4bb2      	ldr	r3, [pc, #712]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	2380      	movs	r3, #128	@ 0x80
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2208      	movs	r2, #8
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d036      	beq.n	8001f1a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d019      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eb4:	4baa      	ldr	r3, [pc, #680]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001eb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001eb8:	4ba9      	ldr	r3, [pc, #676]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001eba:	2101      	movs	r1, #1
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec0:	f7fe fe16 	bl	8000af0 <HAL_GetTick>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eca:	f7fe fe11 	bl	8000af0 <HAL_GetTick>
 8001ece:	0002      	movs	r2, r0
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e177      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001edc:	4ba0      	ldr	r3, [pc, #640]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d0f1      	beq.n	8001eca <HAL_RCC_OscConfig+0x3ea>
 8001ee6:	e018      	b.n	8001f1a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee8:	4b9d      	ldr	r3, [pc, #628]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001eea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001eec:	4b9c      	ldr	r3, [pc, #624]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001eee:	2101      	movs	r1, #1
 8001ef0:	438a      	bics	r2, r1
 8001ef2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef4:	f7fe fdfc 	bl	8000af0 <HAL_GetTick>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001efe:	f7fe fdf7 	bl	8000af0 <HAL_GetTick>
 8001f02:	0002      	movs	r2, r0
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e15d      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f10:	4b93      	ldr	r3, [pc, #588]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f14:	2202      	movs	r2, #2
 8001f16:	4013      	ands	r3, r2
 8001f18:	d1f1      	bne.n	8001efe <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2204      	movs	r2, #4
 8001f20:	4013      	ands	r3, r2
 8001f22:	d100      	bne.n	8001f26 <HAL_RCC_OscConfig+0x446>
 8001f24:	e0ae      	b.n	8002084 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f26:	2023      	movs	r0, #35	@ 0x23
 8001f28:	183b      	adds	r3, r7, r0
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2e:	4b8c      	ldr	r3, [pc, #560]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f32:	2380      	movs	r3, #128	@ 0x80
 8001f34:	055b      	lsls	r3, r3, #21
 8001f36:	4013      	ands	r3, r2
 8001f38:	d109      	bne.n	8001f4e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	4b89      	ldr	r3, [pc, #548]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f3e:	4b88      	ldr	r3, [pc, #544]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001f40:	2180      	movs	r1, #128	@ 0x80
 8001f42:	0549      	lsls	r1, r1, #21
 8001f44:	430a      	orrs	r2, r1
 8001f46:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001f48:	183b      	adds	r3, r7, r0
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4e:	4b87      	ldr	r3, [pc, #540]	@ (800216c <HAL_RCC_OscConfig+0x68c>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	2380      	movs	r3, #128	@ 0x80
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4013      	ands	r3, r2
 8001f58:	d11a      	bne.n	8001f90 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f5a:	4b84      	ldr	r3, [pc, #528]	@ (800216c <HAL_RCC_OscConfig+0x68c>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	4b83      	ldr	r3, [pc, #524]	@ (800216c <HAL_RCC_OscConfig+0x68c>)
 8001f60:	2180      	movs	r1, #128	@ 0x80
 8001f62:	0049      	lsls	r1, r1, #1
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f68:	f7fe fdc2 	bl	8000af0 <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f72:	f7fe fdbd 	bl	8000af0 <HAL_GetTick>
 8001f76:	0002      	movs	r2, r0
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b64      	cmp	r3, #100	@ 0x64
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e123      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	4b79      	ldr	r3, [pc, #484]	@ (800216c <HAL_RCC_OscConfig+0x68c>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2380      	movs	r3, #128	@ 0x80
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	2380      	movs	r3, #128	@ 0x80
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_OscConfig+0x4cc>
 8001f9c:	4b70      	ldr	r3, [pc, #448]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001f9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fa0:	4b6f      	ldr	r3, [pc, #444]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001fa2:	2180      	movs	r1, #128	@ 0x80
 8001fa4:	0049      	lsls	r1, r1, #1
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	651a      	str	r2, [r3, #80]	@ 0x50
 8001faa:	e031      	b.n	8002010 <HAL_RCC_OscConfig+0x530>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10c      	bne.n	8001fce <HAL_RCC_OscConfig+0x4ee>
 8001fb4:	4b6a      	ldr	r3, [pc, #424]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001fb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fb8:	4b69      	ldr	r3, [pc, #420]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001fba:	496b      	ldr	r1, [pc, #428]	@ (8002168 <HAL_RCC_OscConfig+0x688>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fc0:	4b67      	ldr	r3, [pc, #412]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001fc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fc4:	4b66      	ldr	r3, [pc, #408]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001fc6:	496a      	ldr	r1, [pc, #424]	@ (8002170 <HAL_RCC_OscConfig+0x690>)
 8001fc8:	400a      	ands	r2, r1
 8001fca:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fcc:	e020      	b.n	8002010 <HAL_RCC_OscConfig+0x530>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	23a0      	movs	r3, #160	@ 0xa0
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x518>
 8001fda:	4b61      	ldr	r3, [pc, #388]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001fdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fde:	4b60      	ldr	r3, [pc, #384]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001fe0:	2180      	movs	r1, #128	@ 0x80
 8001fe2:	00c9      	lsls	r1, r1, #3
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fe8:	4b5d      	ldr	r3, [pc, #372]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001fea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fec:	4b5c      	ldr	r3, [pc, #368]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001fee:	2180      	movs	r1, #128	@ 0x80
 8001ff0:	0049      	lsls	r1, r1, #1
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0x530>
 8001ff8:	4b59      	ldr	r3, [pc, #356]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001ffa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ffc:	4b58      	ldr	r3, [pc, #352]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8001ffe:	495a      	ldr	r1, [pc, #360]	@ (8002168 <HAL_RCC_OscConfig+0x688>)
 8002000:	400a      	ands	r2, r1
 8002002:	651a      	str	r2, [r3, #80]	@ 0x50
 8002004:	4b56      	ldr	r3, [pc, #344]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8002006:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002008:	4b55      	ldr	r3, [pc, #340]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 800200a:	4959      	ldr	r1, [pc, #356]	@ (8002170 <HAL_RCC_OscConfig+0x690>)
 800200c:	400a      	ands	r2, r1
 800200e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d015      	beq.n	8002044 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002018:	f7fe fd6a 	bl	8000af0 <HAL_GetTick>
 800201c:	0003      	movs	r3, r0
 800201e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002020:	e009      	b.n	8002036 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002022:	f7fe fd65 	bl	8000af0 <HAL_GetTick>
 8002026:	0002      	movs	r2, r0
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	4a51      	ldr	r2, [pc, #324]	@ (8002174 <HAL_RCC_OscConfig+0x694>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e0ca      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002036:	4b4a      	ldr	r3, [pc, #296]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8002038:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800203a:	2380      	movs	r3, #128	@ 0x80
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4013      	ands	r3, r2
 8002040:	d0ef      	beq.n	8002022 <HAL_RCC_OscConfig+0x542>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002044:	f7fe fd54 	bl	8000af0 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800204c:	e009      	b.n	8002062 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7fe fd4f 	bl	8000af0 <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	4a46      	ldr	r2, [pc, #280]	@ (8002174 <HAL_RCC_OscConfig+0x694>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e0b4      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002062:	4b3f      	ldr	r3, [pc, #252]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8002064:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002066:	2380      	movs	r3, #128	@ 0x80
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4013      	ands	r3, r2
 800206c:	d1ef      	bne.n	800204e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800206e:	2323      	movs	r3, #35	@ 0x23
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d105      	bne.n	8002084 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002078:	4b39      	ldr	r3, [pc, #228]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 800207a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800207c:	4b38      	ldr	r3, [pc, #224]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 800207e:	493e      	ldr	r1, [pc, #248]	@ (8002178 <HAL_RCC_OscConfig+0x698>)
 8002080:	400a      	ands	r2, r1
 8002082:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	2b00      	cmp	r3, #0
 800208a:	d100      	bne.n	800208e <HAL_RCC_OscConfig+0x5ae>
 800208c:	e09d      	b.n	80021ca <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	2b0c      	cmp	r3, #12
 8002092:	d100      	bne.n	8002096 <HAL_RCC_OscConfig+0x5b6>
 8002094:	e076      	b.n	8002184 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209a:	2b02      	cmp	r3, #2
 800209c:	d145      	bne.n	800212a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209e:	4b30      	ldr	r3, [pc, #192]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 80020a4:	4935      	ldr	r1, [pc, #212]	@ (800217c <HAL_RCC_OscConfig+0x69c>)
 80020a6:	400a      	ands	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7fe fd21 	bl	8000af0 <HAL_GetTick>
 80020ae:	0003      	movs	r3, r0
 80020b0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b4:	f7fe fd1c 	bl	8000af0 <HAL_GetTick>
 80020b8:	0002      	movs	r2, r0
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e082      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020c6:	4b26      	ldr	r3, [pc, #152]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	2380      	movs	r3, #128	@ 0x80
 80020cc:	049b      	lsls	r3, r3, #18
 80020ce:	4013      	ands	r3, r2
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d2:	4b23      	ldr	r3, [pc, #140]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002180 <HAL_RCC_OscConfig+0x6a0>)
 80020d8:	4013      	ands	r3, r2
 80020da:	0019      	movs	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	431a      	orrs	r2, r3
 80020ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 80020ee:	430a      	orrs	r2, r1
 80020f0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 80020f8:	2180      	movs	r1, #128	@ 0x80
 80020fa:	0449      	lsls	r1, r1, #17
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7fe fcf6 	bl	8000af0 <HAL_GetTick>
 8002104:	0003      	movs	r3, r0
 8002106:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210a:	f7fe fcf1 	bl	8000af0 <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e057      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800211c:	4b10      	ldr	r3, [pc, #64]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	@ 0x80
 8002122:	049b      	lsls	r3, r3, #18
 8002124:	4013      	ands	r3, r2
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x62a>
 8002128:	e04f      	b.n	80021ca <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212a:	4b0d      	ldr	r3, [pc, #52]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8002130:	4912      	ldr	r1, [pc, #72]	@ (800217c <HAL_RCC_OscConfig+0x69c>)
 8002132:	400a      	ands	r2, r1
 8002134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7fe fcdb 	bl	8000af0 <HAL_GetTick>
 800213a:	0003      	movs	r3, r0
 800213c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002140:	f7fe fcd6 	bl	8000af0 <HAL_GetTick>
 8002144:	0002      	movs	r2, r0
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e03c      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002152:	4b03      	ldr	r3, [pc, #12]	@ (8002160 <HAL_RCC_OscConfig+0x680>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	2380      	movs	r3, #128	@ 0x80
 8002158:	049b      	lsls	r3, r3, #18
 800215a:	4013      	ands	r3, r2
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x660>
 800215e:	e034      	b.n	80021ca <HAL_RCC_OscConfig+0x6ea>
 8002160:	40021000 	.word	0x40021000
 8002164:	ffff1fff 	.word	0xffff1fff
 8002168:	fffffeff 	.word	0xfffffeff
 800216c:	40007000 	.word	0x40007000
 8002170:	fffffbff 	.word	0xfffffbff
 8002174:	00001388 	.word	0x00001388
 8002178:	efffffff 	.word	0xefffffff
 800217c:	feffffff 	.word	0xfeffffff
 8002180:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e01d      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <HAL_RCC_OscConfig+0x6f4>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	2380      	movs	r3, #128	@ 0x80
 800219a:	025b      	lsls	r3, r3, #9
 800219c:	401a      	ands	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d10f      	bne.n	80021c6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	23f0      	movs	r3, #240	@ 0xf0
 80021aa:	039b      	lsls	r3, r3, #14
 80021ac:	401a      	ands	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	23c0      	movs	r3, #192	@ 0xc0
 80021ba:	041b      	lsls	r3, r3, #16
 80021bc:	401a      	ands	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d001      	beq.n	80021ca <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	0018      	movs	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b00a      	add	sp, #40	@ 0x28
 80021d2:	bdb0      	pop	{r4, r5, r7, pc}
 80021d4:	40021000 	.word	0x40021000

080021d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d8:	b5b0      	push	{r4, r5, r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e128      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ec:	4b96      	ldr	r3, [pc, #600]	@ (8002448 <HAL_RCC_ClockConfig+0x270>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2201      	movs	r2, #1
 80021f2:	4013      	ands	r3, r2
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d91e      	bls.n	8002238 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b93      	ldr	r3, [pc, #588]	@ (8002448 <HAL_RCC_ClockConfig+0x270>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2201      	movs	r2, #1
 8002200:	4393      	bics	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	4b90      	ldr	r3, [pc, #576]	@ (8002448 <HAL_RCC_ClockConfig+0x270>)
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800220c:	f7fe fc70 	bl	8000af0 <HAL_GetTick>
 8002210:	0003      	movs	r3, r0
 8002212:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002214:	e009      	b.n	800222a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002216:	f7fe fc6b 	bl	8000af0 <HAL_GetTick>
 800221a:	0002      	movs	r2, r0
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	4a8a      	ldr	r2, [pc, #552]	@ (800244c <HAL_RCC_ClockConfig+0x274>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d901      	bls.n	800222a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e109      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b87      	ldr	r3, [pc, #540]	@ (8002448 <HAL_RCC_ClockConfig+0x270>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2201      	movs	r2, #1
 8002230:	4013      	ands	r3, r2
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d1ee      	bne.n	8002216 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2202      	movs	r2, #2
 800223e:	4013      	ands	r3, r2
 8002240:	d009      	beq.n	8002256 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002242:	4b83      	ldr	r3, [pc, #524]	@ (8002450 <HAL_RCC_ClockConfig+0x278>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	22f0      	movs	r2, #240	@ 0xf0
 8002248:	4393      	bics	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	4b7f      	ldr	r3, [pc, #508]	@ (8002450 <HAL_RCC_ClockConfig+0x278>)
 8002252:	430a      	orrs	r2, r1
 8002254:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2201      	movs	r2, #1
 800225c:	4013      	ands	r3, r2
 800225e:	d100      	bne.n	8002262 <HAL_RCC_ClockConfig+0x8a>
 8002260:	e089      	b.n	8002376 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800226a:	4b79      	ldr	r3, [pc, #484]	@ (8002450 <HAL_RCC_ClockConfig+0x278>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	2380      	movs	r3, #128	@ 0x80
 8002270:	029b      	lsls	r3, r3, #10
 8002272:	4013      	ands	r3, r2
 8002274:	d120      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e0e1      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d107      	bne.n	8002292 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002282:	4b73      	ldr	r3, [pc, #460]	@ (8002450 <HAL_RCC_ClockConfig+0x278>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	2380      	movs	r3, #128	@ 0x80
 8002288:	049b      	lsls	r3, r3, #18
 800228a:	4013      	ands	r3, r2
 800228c:	d114      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0d5      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d106      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800229a:	4b6d      	ldr	r3, [pc, #436]	@ (8002450 <HAL_RCC_ClockConfig+0x278>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2204      	movs	r2, #4
 80022a0:	4013      	ands	r3, r2
 80022a2:	d109      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0ca      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022a8:	4b69      	ldr	r3, [pc, #420]	@ (8002450 <HAL_RCC_ClockConfig+0x278>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2380      	movs	r3, #128	@ 0x80
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4013      	ands	r3, r2
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0c2      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b8:	4b65      	ldr	r3, [pc, #404]	@ (8002450 <HAL_RCC_ClockConfig+0x278>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2203      	movs	r2, #3
 80022be:	4393      	bics	r3, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4b62      	ldr	r3, [pc, #392]	@ (8002450 <HAL_RCC_ClockConfig+0x278>)
 80022c8:	430a      	orrs	r2, r1
 80022ca:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022cc:	f7fe fc10 	bl	8000af0 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d111      	bne.n	8002300 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022dc:	e009      	b.n	80022f2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022de:	f7fe fc07 	bl	8000af0 <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	4a58      	ldr	r2, [pc, #352]	@ (800244c <HAL_RCC_ClockConfig+0x274>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e0a5      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f2:	4b57      	ldr	r3, [pc, #348]	@ (8002450 <HAL_RCC_ClockConfig+0x278>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	220c      	movs	r2, #12
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d1ef      	bne.n	80022de <HAL_RCC_ClockConfig+0x106>
 80022fe:	e03a      	b.n	8002376 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b03      	cmp	r3, #3
 8002306:	d111      	bne.n	800232c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002308:	e009      	b.n	800231e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800230a:	f7fe fbf1 	bl	8000af0 <HAL_GetTick>
 800230e:	0002      	movs	r2, r0
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	4a4d      	ldr	r2, [pc, #308]	@ (800244c <HAL_RCC_ClockConfig+0x274>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e08f      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800231e:	4b4c      	ldr	r3, [pc, #304]	@ (8002450 <HAL_RCC_ClockConfig+0x278>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	220c      	movs	r2, #12
 8002324:	4013      	ands	r3, r2
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d1ef      	bne.n	800230a <HAL_RCC_ClockConfig+0x132>
 800232a:	e024      	b.n	8002376 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d11b      	bne.n	800236c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002334:	e009      	b.n	800234a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002336:	f7fe fbdb 	bl	8000af0 <HAL_GetTick>
 800233a:	0002      	movs	r2, r0
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	4a42      	ldr	r2, [pc, #264]	@ (800244c <HAL_RCC_ClockConfig+0x274>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e079      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800234a:	4b41      	ldr	r3, [pc, #260]	@ (8002450 <HAL_RCC_ClockConfig+0x278>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	220c      	movs	r2, #12
 8002350:	4013      	ands	r3, r2
 8002352:	2b04      	cmp	r3, #4
 8002354:	d1ef      	bne.n	8002336 <HAL_RCC_ClockConfig+0x15e>
 8002356:	e00e      	b.n	8002376 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002358:	f7fe fbca 	bl	8000af0 <HAL_GetTick>
 800235c:	0002      	movs	r2, r0
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	4a3a      	ldr	r2, [pc, #232]	@ (800244c <HAL_RCC_ClockConfig+0x274>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e068      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800236c:	4b38      	ldr	r3, [pc, #224]	@ (8002450 <HAL_RCC_ClockConfig+0x278>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	220c      	movs	r2, #12
 8002372:	4013      	ands	r3, r2
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002376:	4b34      	ldr	r3, [pc, #208]	@ (8002448 <HAL_RCC_ClockConfig+0x270>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2201      	movs	r2, #1
 800237c:	4013      	ands	r3, r2
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d21e      	bcs.n	80023c2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002384:	4b30      	ldr	r3, [pc, #192]	@ (8002448 <HAL_RCC_ClockConfig+0x270>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2201      	movs	r2, #1
 800238a:	4393      	bics	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	4b2e      	ldr	r3, [pc, #184]	@ (8002448 <HAL_RCC_ClockConfig+0x270>)
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002396:	f7fe fbab 	bl	8000af0 <HAL_GetTick>
 800239a:	0003      	movs	r3, r0
 800239c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	e009      	b.n	80023b4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a0:	f7fe fba6 	bl	8000af0 <HAL_GetTick>
 80023a4:	0002      	movs	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	4a28      	ldr	r2, [pc, #160]	@ (800244c <HAL_RCC_ClockConfig+0x274>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e044      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b4:	4b24      	ldr	r3, [pc, #144]	@ (8002448 <HAL_RCC_ClockConfig+0x270>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2201      	movs	r2, #1
 80023ba:	4013      	ands	r3, r2
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d1ee      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2204      	movs	r2, #4
 80023c8:	4013      	ands	r3, r2
 80023ca:	d009      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023cc:	4b20      	ldr	r3, [pc, #128]	@ (8002450 <HAL_RCC_ClockConfig+0x278>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4a20      	ldr	r2, [pc, #128]	@ (8002454 <HAL_RCC_ClockConfig+0x27c>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	0019      	movs	r1, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	4b1d      	ldr	r3, [pc, #116]	@ (8002450 <HAL_RCC_ClockConfig+0x278>)
 80023dc:	430a      	orrs	r2, r1
 80023de:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2208      	movs	r2, #8
 80023e6:	4013      	ands	r3, r2
 80023e8:	d00a      	beq.n	8002400 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ea:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <HAL_RCC_ClockConfig+0x278>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002458 <HAL_RCC_ClockConfig+0x280>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	0019      	movs	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	00da      	lsls	r2, r3, #3
 80023fa:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <HAL_RCC_ClockConfig+0x278>)
 80023fc:	430a      	orrs	r2, r1
 80023fe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002400:	f000 f832 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 8002404:	0001      	movs	r1, r0
 8002406:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <HAL_RCC_ClockConfig+0x278>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	220f      	movs	r2, #15
 800240e:	4013      	ands	r3, r2
 8002410:	4a12      	ldr	r2, [pc, #72]	@ (800245c <HAL_RCC_ClockConfig+0x284>)
 8002412:	5cd3      	ldrb	r3, [r2, r3]
 8002414:	000a      	movs	r2, r1
 8002416:	40da      	lsrs	r2, r3
 8002418:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <HAL_RCC_ClockConfig+0x288>)
 800241a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800241c:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <HAL_RCC_ClockConfig+0x28c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	250b      	movs	r5, #11
 8002422:	197c      	adds	r4, r7, r5
 8002424:	0018      	movs	r0, r3
 8002426:	f7fe fb1d 	bl	8000a64 <HAL_InitTick>
 800242a:	0003      	movs	r3, r0
 800242c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800242e:	197b      	adds	r3, r7, r5
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002436:	197b      	adds	r3, r7, r5
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	e000      	b.n	800243e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	0018      	movs	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	b004      	add	sp, #16
 8002444:	bdb0      	pop	{r4, r5, r7, pc}
 8002446:	46c0      	nop			@ (mov r8, r8)
 8002448:	40022000 	.word	0x40022000
 800244c:	00001388 	.word	0x00001388
 8002450:	40021000 	.word	0x40021000
 8002454:	fffff8ff 	.word	0xfffff8ff
 8002458:	ffffc7ff 	.word	0xffffc7ff
 800245c:	080034c8 	.word	0x080034c8
 8002460:	20000010 	.word	0x20000010
 8002464:	20000014 	.word	0x20000014

08002468 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002468:	b5b0      	push	{r4, r5, r7, lr}
 800246a:	b08e      	sub	sp, #56	@ 0x38
 800246c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800246e:	4b4c      	ldr	r3, [pc, #304]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002474:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002476:	230c      	movs	r3, #12
 8002478:	4013      	ands	r3, r2
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d014      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x40>
 800247e:	d900      	bls.n	8002482 <HAL_RCC_GetSysClockFreq+0x1a>
 8002480:	e07b      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x112>
 8002482:	2b04      	cmp	r3, #4
 8002484:	d002      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x24>
 8002486:	2b08      	cmp	r3, #8
 8002488:	d00b      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800248a:	e076      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800248c:	4b44      	ldr	r3, [pc, #272]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2210      	movs	r2, #16
 8002492:	4013      	ands	r3, r2
 8002494:	d002      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002496:	4b43      	ldr	r3, [pc, #268]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002498:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800249a:	e07c      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800249c:	4b42      	ldr	r3, [pc, #264]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800249e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80024a0:	e079      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024a2:	4b42      	ldr	r3, [pc, #264]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x144>)
 80024a4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80024a6:	e076      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80024a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024aa:	0c9a      	lsrs	r2, r3, #18
 80024ac:	230f      	movs	r3, #15
 80024ae:	401a      	ands	r2, r3
 80024b0:	4b3f      	ldr	r3, [pc, #252]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x148>)
 80024b2:	5c9b      	ldrb	r3, [r3, r2]
 80024b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80024b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b8:	0d9a      	lsrs	r2, r3, #22
 80024ba:	2303      	movs	r3, #3
 80024bc:	4013      	ands	r3, r2
 80024be:	3301      	adds	r3, #1
 80024c0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024c2:	4b37      	ldr	r3, [pc, #220]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x138>)
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	2380      	movs	r3, #128	@ 0x80
 80024c8:	025b      	lsls	r3, r3, #9
 80024ca:	4013      	ands	r3, r2
 80024cc:	d01a      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80024ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d0:	61bb      	str	r3, [r7, #24]
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
 80024d6:	4a35      	ldr	r2, [pc, #212]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x144>)
 80024d8:	2300      	movs	r3, #0
 80024da:	69b8      	ldr	r0, [r7, #24]
 80024dc:	69f9      	ldr	r1, [r7, #28]
 80024de:	f7fd febf 	bl	8000260 <__aeabi_lmul>
 80024e2:	0002      	movs	r2, r0
 80024e4:	000b      	movs	r3, r1
 80024e6:	0010      	movs	r0, r2
 80024e8:	0019      	movs	r1, r3
 80024ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f7fd fe93 	bl	8000220 <__aeabi_uldivmod>
 80024fa:	0002      	movs	r2, r0
 80024fc:	000b      	movs	r3, r1
 80024fe:	0013      	movs	r3, r2
 8002500:	637b      	str	r3, [r7, #52]	@ 0x34
 8002502:	e037      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002504:	4b26      	ldr	r3, [pc, #152]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2210      	movs	r2, #16
 800250a:	4013      	ands	r3, r2
 800250c:	d01a      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800250e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	4a23      	ldr	r2, [pc, #140]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002518:	2300      	movs	r3, #0
 800251a:	68b8      	ldr	r0, [r7, #8]
 800251c:	68f9      	ldr	r1, [r7, #12]
 800251e:	f7fd fe9f 	bl	8000260 <__aeabi_lmul>
 8002522:	0002      	movs	r2, r0
 8002524:	000b      	movs	r3, r1
 8002526:	0010      	movs	r0, r2
 8002528:	0019      	movs	r1, r3
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	603b      	str	r3, [r7, #0]
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f7fd fe73 	bl	8000220 <__aeabi_uldivmod>
 800253a:	0002      	movs	r2, r0
 800253c:	000b      	movs	r3, r1
 800253e:	0013      	movs	r3, r2
 8002540:	637b      	str	r3, [r7, #52]	@ 0x34
 8002542:	e017      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002546:	0018      	movs	r0, r3
 8002548:	2300      	movs	r3, #0
 800254a:	0019      	movs	r1, r3
 800254c:	4a16      	ldr	r2, [pc, #88]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800254e:	2300      	movs	r3, #0
 8002550:	f7fd fe86 	bl	8000260 <__aeabi_lmul>
 8002554:	0002      	movs	r2, r0
 8002556:	000b      	movs	r3, r1
 8002558:	0010      	movs	r0, r2
 800255a:	0019      	movs	r1, r3
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	001c      	movs	r4, r3
 8002560:	2300      	movs	r3, #0
 8002562:	001d      	movs	r5, r3
 8002564:	0022      	movs	r2, r4
 8002566:	002b      	movs	r3, r5
 8002568:	f7fd fe5a 	bl	8000220 <__aeabi_uldivmod>
 800256c:	0002      	movs	r2, r0
 800256e:	000b      	movs	r3, r1
 8002570:	0013      	movs	r3, r2
 8002572:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002576:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002578:	e00d      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800257a:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	0b5b      	lsrs	r3, r3, #13
 8002580:	2207      	movs	r2, #7
 8002582:	4013      	ands	r3, r2
 8002584:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	3301      	adds	r3, #1
 800258a:	2280      	movs	r2, #128	@ 0x80
 800258c:	0212      	lsls	r2, r2, #8
 800258e:	409a      	lsls	r2, r3
 8002590:	0013      	movs	r3, r2
 8002592:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002594:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b00e      	add	sp, #56	@ 0x38
 800259e:	bdb0      	pop	{r4, r5, r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	003d0900 	.word	0x003d0900
 80025a8:	00f42400 	.word	0x00f42400
 80025ac:	007a1200 	.word	0x007a1200
 80025b0:	080034e0 	.word	0x080034e0

080025b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b8:	4b02      	ldr	r3, [pc, #8]	@ (80025c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	0018      	movs	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	20000010 	.word	0x20000010

080025c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025cc:	f7ff fff2 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025d0:	0001      	movs	r1, r0
 80025d2:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	0a1b      	lsrs	r3, r3, #8
 80025d8:	2207      	movs	r2, #7
 80025da:	4013      	ands	r3, r2
 80025dc:	4a04      	ldr	r2, [pc, #16]	@ (80025f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025de:	5cd3      	ldrb	r3, [r2, r3]
 80025e0:	40d9      	lsrs	r1, r3
 80025e2:	000b      	movs	r3, r1
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	40021000 	.word	0x40021000
 80025f0:	080034d8 	.word	0x080034d8

080025f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025f8:	f7ff ffdc 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025fc:	0001      	movs	r1, r0
 80025fe:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	0adb      	lsrs	r3, r3, #11
 8002604:	2207      	movs	r2, #7
 8002606:	4013      	ands	r3, r2
 8002608:	4a04      	ldr	r2, [pc, #16]	@ (800261c <HAL_RCC_GetPCLK2Freq+0x28>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	40d9      	lsrs	r1, r3
 800260e:	000b      	movs	r3, r1
}
 8002610:	0018      	movs	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	40021000 	.word	0x40021000
 800261c:	080034d8 	.word	0x080034d8

08002620 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002628:	2017      	movs	r0, #23
 800262a:	183b      	adds	r3, r7, r0
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2220      	movs	r2, #32
 8002636:	4013      	ands	r3, r2
 8002638:	d100      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800263a:	e0c7      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263c:	4b84      	ldr	r3, [pc, #528]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800263e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002640:	2380      	movs	r3, #128	@ 0x80
 8002642:	055b      	lsls	r3, r3, #21
 8002644:	4013      	ands	r3, r2
 8002646:	d109      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002648:	4b81      	ldr	r3, [pc, #516]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800264a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800264c:	4b80      	ldr	r3, [pc, #512]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800264e:	2180      	movs	r1, #128	@ 0x80
 8002650:	0549      	lsls	r1, r1, #21
 8002652:	430a      	orrs	r2, r1
 8002654:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002656:	183b      	adds	r3, r7, r0
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	@ 0x80
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4013      	ands	r3, r2
 8002666:	d11a      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002668:	4b7a      	ldr	r3, [pc, #488]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b79      	ldr	r3, [pc, #484]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800266e:	2180      	movs	r1, #128	@ 0x80
 8002670:	0049      	lsls	r1, r1, #1
 8002672:	430a      	orrs	r2, r1
 8002674:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002676:	f7fe fa3b 	bl	8000af0 <HAL_GetTick>
 800267a:	0003      	movs	r3, r0
 800267c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267e:	e008      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002680:	f7fe fa36 	bl	8000af0 <HAL_GetTick>
 8002684:	0002      	movs	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	@ 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e0d9      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	4b70      	ldr	r3, [pc, #448]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	2380      	movs	r3, #128	@ 0x80
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4013      	ands	r3, r2
 800269c:	d0f0      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800269e:	4b6c      	ldr	r3, [pc, #432]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	23c0      	movs	r3, #192	@ 0xc0
 80026a4:	039b      	lsls	r3, r3, #14
 80026a6:	4013      	ands	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	23c0      	movs	r3, #192	@ 0xc0
 80026b0:	039b      	lsls	r3, r3, #14
 80026b2:	4013      	ands	r3, r2
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d013      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	23c0      	movs	r3, #192	@ 0xc0
 80026c0:	029b      	lsls	r3, r3, #10
 80026c2:	401a      	ands	r2, r3
 80026c4:	23c0      	movs	r3, #192	@ 0xc0
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d10a      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80026cc:	4b60      	ldr	r3, [pc, #384]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	2380      	movs	r3, #128	@ 0x80
 80026d2:	029b      	lsls	r3, r3, #10
 80026d4:	401a      	ands	r2, r3
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	029b      	lsls	r3, r3, #10
 80026da:	429a      	cmp	r2, r3
 80026dc:	d101      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e0b1      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80026e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026e6:	23c0      	movs	r3, #192	@ 0xc0
 80026e8:	029b      	lsls	r3, r3, #10
 80026ea:	4013      	ands	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d03b      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	23c0      	movs	r3, #192	@ 0xc0
 80026fa:	029b      	lsls	r3, r3, #10
 80026fc:	4013      	ands	r3, r2
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	429a      	cmp	r2, r3
 8002702:	d033      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2220      	movs	r2, #32
 800270a:	4013      	ands	r3, r2
 800270c:	d02e      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800270e:	4b50      	ldr	r3, [pc, #320]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002712:	4a51      	ldr	r2, [pc, #324]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002714:	4013      	ands	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002718:	4b4d      	ldr	r3, [pc, #308]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800271a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800271c:	4b4c      	ldr	r3, [pc, #304]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0309      	lsls	r1, r1, #12
 8002722:	430a      	orrs	r2, r1
 8002724:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002726:	4b4a      	ldr	r3, [pc, #296]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002728:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800272a:	4b49      	ldr	r3, [pc, #292]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800272c:	494b      	ldr	r1, [pc, #300]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800272e:	400a      	ands	r2, r1
 8002730:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002732:	4b47      	ldr	r3, [pc, #284]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	2380      	movs	r3, #128	@ 0x80
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4013      	ands	r3, r2
 8002740:	d014      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002742:	f7fe f9d5 	bl	8000af0 <HAL_GetTick>
 8002746:	0003      	movs	r3, r0
 8002748:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800274a:	e009      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274c:	f7fe f9d0 	bl	8000af0 <HAL_GetTick>
 8002750:	0002      	movs	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	4a42      	ldr	r2, [pc, #264]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d901      	bls.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e072      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002760:	4b3b      	ldr	r3, [pc, #236]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002762:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002764:	2380      	movs	r3, #128	@ 0x80
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4013      	ands	r3, r2
 800276a:	d0ef      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2220      	movs	r2, #32
 8002772:	4013      	ands	r3, r2
 8002774:	d01f      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	23c0      	movs	r3, #192	@ 0xc0
 800277c:	029b      	lsls	r3, r3, #10
 800277e:	401a      	ands	r2, r3
 8002780:	23c0      	movs	r3, #192	@ 0xc0
 8002782:	029b      	lsls	r3, r3, #10
 8002784:	429a      	cmp	r2, r3
 8002786:	d10c      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002788:	4b31      	ldr	r3, [pc, #196]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a35      	ldr	r2, [pc, #212]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800278e:	4013      	ands	r3, r2
 8002790:	0019      	movs	r1, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	23c0      	movs	r3, #192	@ 0xc0
 8002798:	039b      	lsls	r3, r3, #14
 800279a:	401a      	ands	r2, r3
 800279c:	4b2c      	ldr	r3, [pc, #176]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800279e:	430a      	orrs	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	23c0      	movs	r3, #192	@ 0xc0
 80027ac:	029b      	lsls	r3, r3, #10
 80027ae:	401a      	ands	r2, r3
 80027b0:	4b27      	ldr	r3, [pc, #156]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027b6:	2317      	movs	r3, #23
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d105      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c0:	4b23      	ldr	r3, [pc, #140]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027c4:	4b22      	ldr	r3, [pc, #136]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027c6:	4928      	ldr	r1, [pc, #160]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027c8:	400a      	ands	r2, r1
 80027ca:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2202      	movs	r2, #2
 80027d2:	4013      	ands	r3, r2
 80027d4:	d009      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027da:	220c      	movs	r2, #12
 80027dc:	4393      	bics	r3, r2
 80027de:	0019      	movs	r1, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027e6:	430a      	orrs	r2, r1
 80027e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2204      	movs	r2, #4
 80027f0:	4013      	ands	r3, r2
 80027f2:	d009      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027f4:	4b16      	ldr	r3, [pc, #88]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f8:	4a1c      	ldr	r2, [pc, #112]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	0019      	movs	r1, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	4b13      	ldr	r3, [pc, #76]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002804:	430a      	orrs	r2, r1
 8002806:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2208      	movs	r2, #8
 800280e:	4013      	ands	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002812:	4b0f      	ldr	r3, [pc, #60]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002816:	4a16      	ldr	r2, [pc, #88]	@ (8002870 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002818:	4013      	ands	r3, r2
 800281a:	0019      	movs	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	4b0b      	ldr	r3, [pc, #44]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002822:	430a      	orrs	r2, r1
 8002824:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2280      	movs	r2, #128	@ 0x80
 800282c:	4013      	ands	r3, r2
 800282e:	d009      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002830:	4b07      	ldr	r3, [pc, #28]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002834:	4a0f      	ldr	r2, [pc, #60]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002836:	4013      	ands	r3, r2
 8002838:	0019      	movs	r1, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	4b04      	ldr	r3, [pc, #16]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002840:	430a      	orrs	r2, r1
 8002842:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	0018      	movs	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	b006      	add	sp, #24
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
 8002858:	fffcffff 	.word	0xfffcffff
 800285c:	fff7ffff 	.word	0xfff7ffff
 8002860:	00001388 	.word	0x00001388
 8002864:	ffcfffff 	.word	0xffcfffff
 8002868:	efffffff 	.word	0xefffffff
 800286c:	fffff3ff 	.word	0xfffff3ff
 8002870:	ffffcfff 	.word	0xffffcfff
 8002874:	fff3ffff 	.word	0xfff3ffff

08002878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e044      	b.n	8002914 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d107      	bne.n	80028a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2278      	movs	r2, #120	@ 0x78
 8002896:	2100      	movs	r1, #0
 8002898:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	0018      	movs	r0, r3
 800289e:	f7fe f80f 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2224      	movs	r2, #36	@ 0x24
 80028a6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2101      	movs	r1, #1
 80028b4:	438a      	bics	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 f8a0 	bl	8002a00 <UART_SetConfig>
 80028c0:	0003      	movs	r3, r0
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e024      	b.n	8002914 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	0018      	movs	r0, r3
 80028d6:	f000 fadd 	bl	8002e94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	490d      	ldr	r1, [pc, #52]	@ (800291c <HAL_UART_Init+0xa4>)
 80028e6:	400a      	ands	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	212a      	movs	r1, #42	@ 0x2a
 80028f6:	438a      	bics	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2101      	movs	r1, #1
 8002906:	430a      	orrs	r2, r1
 8002908:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	0018      	movs	r0, r3
 800290e:	f000 fb75 	bl	8002ffc <UART_CheckIdleState>
 8002912:	0003      	movs	r3, r0
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	b002      	add	sp, #8
 800291a:	bd80      	pop	{r7, pc}
 800291c:	ffffb7ff 	.word	0xffffb7ff

08002920 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	1dbb      	adds	r3, r7, #6
 800292c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002932:	2b20      	cmp	r3, #32
 8002934:	d15b      	bne.n	80029ee <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_UART_Transmit_IT+0x24>
 800293c:	1dbb      	adds	r3, r7, #6
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e053      	b.n	80029f0 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	015b      	lsls	r3, r3, #5
 8002950:	429a      	cmp	r2, r3
 8002952:	d109      	bne.n	8002968 <HAL_UART_Transmit_IT+0x48>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d105      	bne.n	8002968 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2201      	movs	r2, #1
 8002960:	4013      	ands	r3, r2
 8002962:	d001      	beq.n	8002968 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e043      	b.n	80029f0 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1dba      	adds	r2, r7, #6
 8002972:	2150      	movs	r1, #80	@ 0x50
 8002974:	8812      	ldrh	r2, [r2, #0]
 8002976:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1dba      	adds	r2, r7, #6
 800297c:	2152      	movs	r1, #82	@ 0x52
 800297e:	8812      	ldrh	r2, [r2, #0]
 8002980:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2284      	movs	r2, #132	@ 0x84
 800298c:	2100      	movs	r1, #0
 800298e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2221      	movs	r2, #33	@ 0x21
 8002994:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	2380      	movs	r3, #128	@ 0x80
 800299c:	015b      	lsls	r3, r3, #5
 800299e:	429a      	cmp	r2, r3
 80029a0:	d107      	bne.n	80029b2 <HAL_UART_Transmit_IT+0x92>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d103      	bne.n	80029b2 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4a12      	ldr	r2, [pc, #72]	@ (80029f8 <HAL_UART_Transmit_IT+0xd8>)
 80029ae:	66da      	str	r2, [r3, #108]	@ 0x6c
 80029b0:	e002      	b.n	80029b8 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4a11      	ldr	r2, [pc, #68]	@ (80029fc <HAL_UART_Transmit_IT+0xdc>)
 80029b6:	66da      	str	r2, [r3, #108]	@ 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029b8:	f3ef 8310 	mrs	r3, PRIMASK
 80029bc:	613b      	str	r3, [r7, #16]
  return(result);
 80029be:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80029c0:	61fb      	str	r3, [r7, #28]
 80029c2:	2301      	movs	r3, #1
 80029c4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f383 8810 	msr	PRIMASK, r3
}
 80029cc:	46c0      	nop			@ (mov r8, r8)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2180      	movs	r1, #128	@ 0x80
 80029da:	430a      	orrs	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	f383 8810 	msr	PRIMASK, r3
}
 80029e8:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e000      	b.n	80029f0 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80029ee:	2302      	movs	r3, #2
  }
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b008      	add	sp, #32
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	0800339b 	.word	0x0800339b
 80029fc:	080032e9 	.word	0x080032e9

08002a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a00:	b5b0      	push	{r4, r5, r7, lr}
 8002a02:	b08e      	sub	sp, #56	@ 0x38
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a08:	231a      	movs	r3, #26
 8002a0a:	2218      	movs	r2, #24
 8002a0c:	189b      	adds	r3, r3, r2
 8002a0e:	19db      	adds	r3, r3, r7
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4ab4      	ldr	r2, [pc, #720]	@ (8002d04 <UART_SetConfig+0x304>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4aaf      	ldr	r2, [pc, #700]	@ (8002d08 <UART_SetConfig+0x308>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4aa9      	ldr	r2, [pc, #676]	@ (8002d0c <UART_SetConfig+0x30c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d004      	beq.n	8002a74 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a70:	4313      	orrs	r3, r2
 8002a72:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4aa5      	ldr	r2, [pc, #660]	@ (8002d10 <UART_SetConfig+0x310>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	0019      	movs	r1, r3
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a86:	430a      	orrs	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4aa1      	ldr	r2, [pc, #644]	@ (8002d14 <UART_SetConfig+0x314>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d131      	bne.n	8002af8 <UART_SetConfig+0xf8>
 8002a94:	4ba0      	ldr	r3, [pc, #640]	@ (8002d18 <UART_SetConfig+0x318>)
 8002a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a98:	220c      	movs	r2, #12
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b0c      	cmp	r3, #12
 8002a9e:	d01d      	beq.n	8002adc <UART_SetConfig+0xdc>
 8002aa0:	d823      	bhi.n	8002aea <UART_SetConfig+0xea>
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d00c      	beq.n	8002ac0 <UART_SetConfig+0xc0>
 8002aa6:	d820      	bhi.n	8002aea <UART_SetConfig+0xea>
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <UART_SetConfig+0xb2>
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d00e      	beq.n	8002ace <UART_SetConfig+0xce>
 8002ab0:	e01b      	b.n	8002aea <UART_SetConfig+0xea>
 8002ab2:	231b      	movs	r3, #27
 8002ab4:	2218      	movs	r2, #24
 8002ab6:	189b      	adds	r3, r3, r2
 8002ab8:	19db      	adds	r3, r3, r7
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e065      	b.n	8002b8c <UART_SetConfig+0x18c>
 8002ac0:	231b      	movs	r3, #27
 8002ac2:	2218      	movs	r2, #24
 8002ac4:	189b      	adds	r3, r3, r2
 8002ac6:	19db      	adds	r3, r3, r7
 8002ac8:	2202      	movs	r2, #2
 8002aca:	701a      	strb	r2, [r3, #0]
 8002acc:	e05e      	b.n	8002b8c <UART_SetConfig+0x18c>
 8002ace:	231b      	movs	r3, #27
 8002ad0:	2218      	movs	r2, #24
 8002ad2:	189b      	adds	r3, r3, r2
 8002ad4:	19db      	adds	r3, r3, r7
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	701a      	strb	r2, [r3, #0]
 8002ada:	e057      	b.n	8002b8c <UART_SetConfig+0x18c>
 8002adc:	231b      	movs	r3, #27
 8002ade:	2218      	movs	r2, #24
 8002ae0:	189b      	adds	r3, r3, r2
 8002ae2:	19db      	adds	r3, r3, r7
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e050      	b.n	8002b8c <UART_SetConfig+0x18c>
 8002aea:	231b      	movs	r3, #27
 8002aec:	2218      	movs	r2, #24
 8002aee:	189b      	adds	r3, r3, r2
 8002af0:	19db      	adds	r3, r3, r7
 8002af2:	2210      	movs	r2, #16
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	e049      	b.n	8002b8c <UART_SetConfig+0x18c>
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a83      	ldr	r2, [pc, #524]	@ (8002d0c <UART_SetConfig+0x30c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d13e      	bne.n	8002b80 <UART_SetConfig+0x180>
 8002b02:	4b85      	ldr	r3, [pc, #532]	@ (8002d18 <UART_SetConfig+0x318>)
 8002b04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b06:	23c0      	movs	r3, #192	@ 0xc0
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	22c0      	movs	r2, #192	@ 0xc0
 8002b0e:	0112      	lsls	r2, r2, #4
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d027      	beq.n	8002b64 <UART_SetConfig+0x164>
 8002b14:	22c0      	movs	r2, #192	@ 0xc0
 8002b16:	0112      	lsls	r2, r2, #4
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d82a      	bhi.n	8002b72 <UART_SetConfig+0x172>
 8002b1c:	2280      	movs	r2, #128	@ 0x80
 8002b1e:	0112      	lsls	r2, r2, #4
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d011      	beq.n	8002b48 <UART_SetConfig+0x148>
 8002b24:	2280      	movs	r2, #128	@ 0x80
 8002b26:	0112      	lsls	r2, r2, #4
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d822      	bhi.n	8002b72 <UART_SetConfig+0x172>
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d004      	beq.n	8002b3a <UART_SetConfig+0x13a>
 8002b30:	2280      	movs	r2, #128	@ 0x80
 8002b32:	00d2      	lsls	r2, r2, #3
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00e      	beq.n	8002b56 <UART_SetConfig+0x156>
 8002b38:	e01b      	b.n	8002b72 <UART_SetConfig+0x172>
 8002b3a:	231b      	movs	r3, #27
 8002b3c:	2218      	movs	r2, #24
 8002b3e:	189b      	adds	r3, r3, r2
 8002b40:	19db      	adds	r3, r3, r7
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e021      	b.n	8002b8c <UART_SetConfig+0x18c>
 8002b48:	231b      	movs	r3, #27
 8002b4a:	2218      	movs	r2, #24
 8002b4c:	189b      	adds	r3, r3, r2
 8002b4e:	19db      	adds	r3, r3, r7
 8002b50:	2202      	movs	r2, #2
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	e01a      	b.n	8002b8c <UART_SetConfig+0x18c>
 8002b56:	231b      	movs	r3, #27
 8002b58:	2218      	movs	r2, #24
 8002b5a:	189b      	adds	r3, r3, r2
 8002b5c:	19db      	adds	r3, r3, r7
 8002b5e:	2204      	movs	r2, #4
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	e013      	b.n	8002b8c <UART_SetConfig+0x18c>
 8002b64:	231b      	movs	r3, #27
 8002b66:	2218      	movs	r2, #24
 8002b68:	189b      	adds	r3, r3, r2
 8002b6a:	19db      	adds	r3, r3, r7
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	e00c      	b.n	8002b8c <UART_SetConfig+0x18c>
 8002b72:	231b      	movs	r3, #27
 8002b74:	2218      	movs	r2, #24
 8002b76:	189b      	adds	r3, r3, r2
 8002b78:	19db      	adds	r3, r3, r7
 8002b7a:	2210      	movs	r2, #16
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	e005      	b.n	8002b8c <UART_SetConfig+0x18c>
 8002b80:	231b      	movs	r3, #27
 8002b82:	2218      	movs	r2, #24
 8002b84:	189b      	adds	r3, r3, r2
 8002b86:	19db      	adds	r3, r3, r7
 8002b88:	2210      	movs	r2, #16
 8002b8a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a5e      	ldr	r2, [pc, #376]	@ (8002d0c <UART_SetConfig+0x30c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d000      	beq.n	8002b98 <UART_SetConfig+0x198>
 8002b96:	e084      	b.n	8002ca2 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b98:	231b      	movs	r3, #27
 8002b9a:	2218      	movs	r2, #24
 8002b9c:	189b      	adds	r3, r3, r2
 8002b9e:	19db      	adds	r3, r3, r7
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d01d      	beq.n	8002be2 <UART_SetConfig+0x1e2>
 8002ba6:	dc20      	bgt.n	8002bea <UART_SetConfig+0x1ea>
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d015      	beq.n	8002bd8 <UART_SetConfig+0x1d8>
 8002bac:	dc1d      	bgt.n	8002bea <UART_SetConfig+0x1ea>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <UART_SetConfig+0x1b8>
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d005      	beq.n	8002bc2 <UART_SetConfig+0x1c2>
 8002bb6:	e018      	b.n	8002bea <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bb8:	f7ff fd06 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002bc0:	e01c      	b.n	8002bfc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bc2:	4b55      	ldr	r3, [pc, #340]	@ (8002d18 <UART_SetConfig+0x318>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d002      	beq.n	8002bd2 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002bcc:	4b53      	ldr	r3, [pc, #332]	@ (8002d1c <UART_SetConfig+0x31c>)
 8002bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002bd0:	e014      	b.n	8002bfc <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002bd2:	4b53      	ldr	r3, [pc, #332]	@ (8002d20 <UART_SetConfig+0x320>)
 8002bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002bd6:	e011      	b.n	8002bfc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bd8:	f7ff fc46 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 8002bdc:	0003      	movs	r3, r0
 8002bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002be0:	e00c      	b.n	8002bfc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002be2:	2380      	movs	r3, #128	@ 0x80
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002be8:	e008      	b.n	8002bfc <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002bee:	231a      	movs	r3, #26
 8002bf0:	2218      	movs	r2, #24
 8002bf2:	189b      	adds	r3, r3, r2
 8002bf4:	19db      	adds	r3, r3, r7
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]
        break;
 8002bfa:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d100      	bne.n	8002c04 <UART_SetConfig+0x204>
 8002c02:	e12f      	b.n	8002e64 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	0013      	movs	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	189b      	adds	r3, r3, r2
 8002c0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d305      	bcc.n	8002c20 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d906      	bls.n	8002c2e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002c20:	231a      	movs	r3, #26
 8002c22:	2218      	movs	r2, #24
 8002c24:	189b      	adds	r3, r3, r2
 8002c26:	19db      	adds	r3, r3, r7
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
 8002c2c:	e11a      	b.n	8002e64 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	6939      	ldr	r1, [r7, #16]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	000b      	movs	r3, r1
 8002c3c:	0e1b      	lsrs	r3, r3, #24
 8002c3e:	0010      	movs	r0, r2
 8002c40:	0205      	lsls	r5, r0, #8
 8002c42:	431d      	orrs	r5, r3
 8002c44:	000b      	movs	r3, r1
 8002c46:	021c      	lsls	r4, r3, #8
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	085b      	lsrs	r3, r3, #1
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68b8      	ldr	r0, [r7, #8]
 8002c56:	68f9      	ldr	r1, [r7, #12]
 8002c58:	1900      	adds	r0, r0, r4
 8002c5a:	4169      	adcs	r1, r5
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	603b      	str	r3, [r7, #0]
 8002c62:	2300      	movs	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f7fd fad9 	bl	8000220 <__aeabi_uldivmod>
 8002c6e:	0002      	movs	r2, r0
 8002c70:	000b      	movs	r3, r1
 8002c72:	0013      	movs	r3, r2
 8002c74:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c78:	23c0      	movs	r3, #192	@ 0xc0
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d309      	bcc.n	8002c94 <UART_SetConfig+0x294>
 8002c80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c82:	2380      	movs	r3, #128	@ 0x80
 8002c84:	035b      	lsls	r3, r3, #13
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d204      	bcs.n	8002c94 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	e0e7      	b.n	8002e64 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002c94:	231a      	movs	r3, #26
 8002c96:	2218      	movs	r2, #24
 8002c98:	189b      	adds	r3, r3, r2
 8002c9a:	19db      	adds	r3, r3, r7
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	e0e0      	b.n	8002e64 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	69da      	ldr	r2, [r3, #28]
 8002ca6:	2380      	movs	r3, #128	@ 0x80
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d000      	beq.n	8002cb0 <UART_SetConfig+0x2b0>
 8002cae:	e082      	b.n	8002db6 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8002cb0:	231b      	movs	r3, #27
 8002cb2:	2218      	movs	r2, #24
 8002cb4:	189b      	adds	r3, r3, r2
 8002cb6:	19db      	adds	r3, r3, r7
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d834      	bhi.n	8002d28 <UART_SetConfig+0x328>
 8002cbe:	009a      	lsls	r2, r3, #2
 8002cc0:	4b18      	ldr	r3, [pc, #96]	@ (8002d24 <UART_SetConfig+0x324>)
 8002cc2:	18d3      	adds	r3, r2, r3
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cc8:	f7ff fc7e 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002cd0:	e033      	b.n	8002d3a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cd2:	f7ff fc8f 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002cda:	e02e      	b.n	8002d3a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d18 <UART_SetConfig+0x318>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d002      	beq.n	8002cec <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d1c <UART_SetConfig+0x31c>)
 8002ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002cea:	e026      	b.n	8002d3a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002cec:	4b0c      	ldr	r3, [pc, #48]	@ (8002d20 <UART_SetConfig+0x320>)
 8002cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002cf0:	e023      	b.n	8002d3a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cf2:	f7ff fbb9 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002cfa:	e01e      	b.n	8002d3a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cfc:	2380      	movs	r3, #128	@ 0x80
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002d02:	e01a      	b.n	8002d3a <UART_SetConfig+0x33a>
 8002d04:	efff69f3 	.word	0xefff69f3
 8002d08:	ffffcfff 	.word	0xffffcfff
 8002d0c:	40004800 	.word	0x40004800
 8002d10:	fffff4ff 	.word	0xfffff4ff
 8002d14:	40004400 	.word	0x40004400
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	003d0900 	.word	0x003d0900
 8002d20:	00f42400 	.word	0x00f42400
 8002d24:	080034ec 	.word	0x080034ec
      default:
        pclk = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002d2c:	231a      	movs	r3, #26
 8002d2e:	2218      	movs	r2, #24
 8002d30:	189b      	adds	r3, r3, r2
 8002d32:	19db      	adds	r3, r3, r7
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
        break;
 8002d38:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d100      	bne.n	8002d42 <UART_SetConfig+0x342>
 8002d40:	e090      	b.n	8002e64 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d44:	005a      	lsls	r2, r3, #1
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	18d2      	adds	r2, r2, r3
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	0019      	movs	r1, r3
 8002d54:	0010      	movs	r0, r2
 8002d56:	f7fd f9d7 	bl	8000108 <__udivsi3>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d60:	2b0f      	cmp	r3, #15
 8002d62:	d921      	bls.n	8002da8 <UART_SetConfig+0x3a8>
 8002d64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d66:	2380      	movs	r3, #128	@ 0x80
 8002d68:	025b      	lsls	r3, r3, #9
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d21c      	bcs.n	8002da8 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	200e      	movs	r0, #14
 8002d74:	2418      	movs	r4, #24
 8002d76:	1903      	adds	r3, r0, r4
 8002d78:	19db      	adds	r3, r3, r7
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	438a      	bics	r2, r1
 8002d7e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2207      	movs	r2, #7
 8002d88:	4013      	ands	r3, r2
 8002d8a:	b299      	uxth	r1, r3
 8002d8c:	1903      	adds	r3, r0, r4
 8002d8e:	19db      	adds	r3, r3, r7
 8002d90:	1902      	adds	r2, r0, r4
 8002d92:	19d2      	adds	r2, r2, r7
 8002d94:	8812      	ldrh	r2, [r2, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	1902      	adds	r2, r0, r4
 8002da0:	19d2      	adds	r2, r2, r7
 8002da2:	8812      	ldrh	r2, [r2, #0]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	e05d      	b.n	8002e64 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002da8:	231a      	movs	r3, #26
 8002daa:	2218      	movs	r2, #24
 8002dac:	189b      	adds	r3, r3, r2
 8002dae:	19db      	adds	r3, r3, r7
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e056      	b.n	8002e64 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002db6:	231b      	movs	r3, #27
 8002db8:	2218      	movs	r2, #24
 8002dba:	189b      	adds	r3, r3, r2
 8002dbc:	19db      	adds	r3, r3, r7
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d822      	bhi.n	8002e0a <UART_SetConfig+0x40a>
 8002dc4:	009a      	lsls	r2, r3, #2
 8002dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8002e84 <UART_SetConfig+0x484>)
 8002dc8:	18d3      	adds	r3, r2, r3
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dce:	f7ff fbfb 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002dd6:	e021      	b.n	8002e1c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dd8:	f7ff fc0c 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002de0:	e01c      	b.n	8002e1c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002de2:	4b29      	ldr	r3, [pc, #164]	@ (8002e88 <UART_SetConfig+0x488>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2210      	movs	r2, #16
 8002de8:	4013      	ands	r3, r2
 8002dea:	d002      	beq.n	8002df2 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002dec:	4b27      	ldr	r3, [pc, #156]	@ (8002e8c <UART_SetConfig+0x48c>)
 8002dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002df0:	e014      	b.n	8002e1c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8002df2:	4b27      	ldr	r3, [pc, #156]	@ (8002e90 <UART_SetConfig+0x490>)
 8002df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002df6:	e011      	b.n	8002e1c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002df8:	f7ff fb36 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002e00:	e00c      	b.n	8002e1c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e02:	2380      	movs	r3, #128	@ 0x80
 8002e04:	021b      	lsls	r3, r3, #8
 8002e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002e08:	e008      	b.n	8002e1c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002e0e:	231a      	movs	r3, #26
 8002e10:	2218      	movs	r2, #24
 8002e12:	189b      	adds	r3, r3, r2
 8002e14:	19db      	adds	r3, r3, r7
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
        break;
 8002e1a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d020      	beq.n	8002e64 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	085a      	lsrs	r2, r3, #1
 8002e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2a:	18d2      	adds	r2, r2, r3
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	0019      	movs	r1, r3
 8002e32:	0010      	movs	r0, r2
 8002e34:	f7fd f968 	bl	8000108 <__udivsi3>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3e:	2b0f      	cmp	r3, #15
 8002e40:	d90a      	bls.n	8002e58 <UART_SetConfig+0x458>
 8002e42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e44:	2380      	movs	r3, #128	@ 0x80
 8002e46:	025b      	lsls	r3, r3, #9
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d205      	bcs.n	8002e58 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	e005      	b.n	8002e64 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002e58:	231a      	movs	r3, #26
 8002e5a:	2218      	movs	r2, #24
 8002e5c:	189b      	adds	r3, r3, r2
 8002e5e:	19db      	adds	r3, r3, r7
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2200      	movs	r2, #0
 8002e68:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e70:	231a      	movs	r3, #26
 8002e72:	2218      	movs	r2, #24
 8002e74:	189b      	adds	r3, r3, r2
 8002e76:	19db      	adds	r3, r3, r7
 8002e78:	781b      	ldrb	r3, [r3, #0]
}
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b00e      	add	sp, #56	@ 0x38
 8002e80:	bdb0      	pop	{r4, r5, r7, pc}
 8002e82:	46c0      	nop			@ (mov r8, r8)
 8002e84:	08003510 	.word	0x08003510
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	003d0900 	.word	0x003d0900
 8002e90:	00f42400 	.word	0x00f42400

08002e94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d00b      	beq.n	8002ebe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4a4a      	ldr	r2, [pc, #296]	@ (8002fd8 <UART_AdvFeatureConfig+0x144>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d00b      	beq.n	8002ee0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4a43      	ldr	r2, [pc, #268]	@ (8002fdc <UART_AdvFeatureConfig+0x148>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d00b      	beq.n	8002f02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4a3b      	ldr	r2, [pc, #236]	@ (8002fe0 <UART_AdvFeatureConfig+0x14c>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	0019      	movs	r1, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	2208      	movs	r2, #8
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d00b      	beq.n	8002f24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4a34      	ldr	r2, [pc, #208]	@ (8002fe4 <UART_AdvFeatureConfig+0x150>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	0019      	movs	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	2210      	movs	r2, #16
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d00b      	beq.n	8002f46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	4a2c      	ldr	r2, [pc, #176]	@ (8002fe8 <UART_AdvFeatureConfig+0x154>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	0019      	movs	r1, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d00b      	beq.n	8002f68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	4a25      	ldr	r2, [pc, #148]	@ (8002fec <UART_AdvFeatureConfig+0x158>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	2240      	movs	r2, #64	@ 0x40
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d01d      	beq.n	8002fae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff0 <UART_AdvFeatureConfig+0x15c>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f8e:	2380      	movs	r3, #128	@ 0x80
 8002f90:	035b      	lsls	r3, r3, #13
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d10b      	bne.n	8002fae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a15      	ldr	r2, [pc, #84]	@ (8002ff4 <UART_AdvFeatureConfig+0x160>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb2:	2280      	movs	r2, #128	@ 0x80
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d00b      	beq.n	8002fd0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8002ff8 <UART_AdvFeatureConfig+0x164>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	0019      	movs	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	605a      	str	r2, [r3, #4]
  }
}
 8002fd0:	46c0      	nop			@ (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b002      	add	sp, #8
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	fffdffff 	.word	0xfffdffff
 8002fdc:	fffeffff 	.word	0xfffeffff
 8002fe0:	fffbffff 	.word	0xfffbffff
 8002fe4:	ffff7fff 	.word	0xffff7fff
 8002fe8:	ffffefff 	.word	0xffffefff
 8002fec:	ffffdfff 	.word	0xffffdfff
 8002ff0:	ffefffff 	.word	0xffefffff
 8002ff4:	ff9fffff 	.word	0xff9fffff
 8002ff8:	fff7ffff 	.word	0xfff7ffff

08002ffc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b092      	sub	sp, #72	@ 0x48
 8003000:	af02      	add	r7, sp, #8
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2284      	movs	r2, #132	@ 0x84
 8003008:	2100      	movs	r1, #0
 800300a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800300c:	f7fd fd70 	bl	8000af0 <HAL_GetTick>
 8003010:	0003      	movs	r3, r0
 8003012:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2208      	movs	r2, #8
 800301c:	4013      	ands	r3, r2
 800301e:	2b08      	cmp	r3, #8
 8003020:	d12c      	bne.n	800307c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003024:	2280      	movs	r2, #128	@ 0x80
 8003026:	0391      	lsls	r1, r2, #14
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4a46      	ldr	r2, [pc, #280]	@ (8003144 <UART_CheckIdleState+0x148>)
 800302c:	9200      	str	r2, [sp, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	f000 f88c 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 8003034:	1e03      	subs	r3, r0, #0
 8003036:	d021      	beq.n	800307c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003038:	f3ef 8310 	mrs	r3, PRIMASK
 800303c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003040:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003042:	2301      	movs	r3, #1
 8003044:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003048:	f383 8810 	msr	PRIMASK, r3
}
 800304c:	46c0      	nop			@ (mov r8, r8)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2180      	movs	r1, #128	@ 0x80
 800305a:	438a      	bics	r2, r1
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003060:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003064:	f383 8810 	msr	PRIMASK, r3
}
 8003068:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2278      	movs	r2, #120	@ 0x78
 8003074:	2100      	movs	r1, #0
 8003076:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e05f      	b.n	800313c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2204      	movs	r2, #4
 8003084:	4013      	ands	r3, r2
 8003086:	2b04      	cmp	r3, #4
 8003088:	d146      	bne.n	8003118 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800308a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800308c:	2280      	movs	r2, #128	@ 0x80
 800308e:	03d1      	lsls	r1, r2, #15
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	4a2c      	ldr	r2, [pc, #176]	@ (8003144 <UART_CheckIdleState+0x148>)
 8003094:	9200      	str	r2, [sp, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	f000 f858 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 800309c:	1e03      	subs	r3, r0, #0
 800309e:	d03b      	beq.n	8003118 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a0:	f3ef 8310 	mrs	r3, PRIMASK
 80030a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80030a6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80030aa:	2301      	movs	r3, #1
 80030ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f383 8810 	msr	PRIMASK, r3
}
 80030b4:	46c0      	nop			@ (mov r8, r8)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4921      	ldr	r1, [pc, #132]	@ (8003148 <UART_CheckIdleState+0x14c>)
 80030c2:	400a      	ands	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f383 8810 	msr	PRIMASK, r3
}
 80030d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d2:	f3ef 8310 	mrs	r3, PRIMASK
 80030d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80030d8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030da:	633b      	str	r3, [r7, #48]	@ 0x30
 80030dc:	2301      	movs	r3, #1
 80030de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f383 8810 	msr	PRIMASK, r3
}
 80030e6:	46c0      	nop			@ (mov r8, r8)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2101      	movs	r1, #1
 80030f4:	438a      	bics	r2, r1
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	f383 8810 	msr	PRIMASK, r3
}
 8003102:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2280      	movs	r2, #128	@ 0x80
 8003108:	2120      	movs	r1, #32
 800310a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2278      	movs	r2, #120	@ 0x78
 8003110:	2100      	movs	r1, #0
 8003112:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e011      	b.n	800313c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	2120      	movs	r1, #32
 8003124:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2278      	movs	r2, #120	@ 0x78
 8003136:	2100      	movs	r1, #0
 8003138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b010      	add	sp, #64	@ 0x40
 8003142:	bd80      	pop	{r7, pc}
 8003144:	01ffffff 	.word	0x01ffffff
 8003148:	fffffedf 	.word	0xfffffedf

0800314c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	1dfb      	adds	r3, r7, #7
 800315a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315c:	e04b      	b.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	3301      	adds	r3, #1
 8003162:	d048      	beq.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003164:	f7fd fcc4 	bl	8000af0 <HAL_GetTick>
 8003168:	0002      	movs	r2, r0
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	429a      	cmp	r2, r3
 8003172:	d302      	bcc.n	800317a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e04b      	b.n	8003216 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2204      	movs	r2, #4
 8003186:	4013      	ands	r3, r2
 8003188:	d035      	beq.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	2208      	movs	r2, #8
 8003192:	4013      	ands	r3, r2
 8003194:	2b08      	cmp	r3, #8
 8003196:	d111      	bne.n	80031bc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2208      	movs	r2, #8
 800319e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	0018      	movs	r0, r3
 80031a4:	f000 f83c 	bl	8003220 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2284      	movs	r2, #132	@ 0x84
 80031ac:	2108      	movs	r1, #8
 80031ae:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2278      	movs	r2, #120	@ 0x78
 80031b4:	2100      	movs	r1, #0
 80031b6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e02c      	b.n	8003216 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	2380      	movs	r3, #128	@ 0x80
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	401a      	ands	r2, r3
 80031c8:	2380      	movs	r3, #128	@ 0x80
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d112      	bne.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2280      	movs	r2, #128	@ 0x80
 80031d6:	0112      	lsls	r2, r2, #4
 80031d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	0018      	movs	r0, r3
 80031de:	f000 f81f 	bl	8003220 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2284      	movs	r2, #132	@ 0x84
 80031e6:	2120      	movs	r1, #32
 80031e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2278      	movs	r2, #120	@ 0x78
 80031ee:	2100      	movs	r1, #0
 80031f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e00f      	b.n	8003216 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	4013      	ands	r3, r2
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	425a      	negs	r2, r3
 8003206:	4153      	adcs	r3, r2
 8003208:	b2db      	uxtb	r3, r3
 800320a:	001a      	movs	r2, r3
 800320c:	1dfb      	adds	r3, r7, #7
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d0a4      	beq.n	800315e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b004      	add	sp, #16
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08e      	sub	sp, #56	@ 0x38
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003228:	f3ef 8310 	mrs	r3, PRIMASK
 800322c:	617b      	str	r3, [r7, #20]
  return(result);
 800322e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003230:	637b      	str	r3, [r7, #52]	@ 0x34
 8003232:	2301      	movs	r3, #1
 8003234:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	f383 8810 	msr	PRIMASK, r3
}
 800323c:	46c0      	nop			@ (mov r8, r8)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4926      	ldr	r1, [pc, #152]	@ (80032e4 <UART_EndRxTransfer+0xc4>)
 800324a:	400a      	ands	r2, r1
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003250:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f383 8810 	msr	PRIMASK, r3
}
 8003258:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800325a:	f3ef 8310 	mrs	r3, PRIMASK
 800325e:	623b      	str	r3, [r7, #32]
  return(result);
 8003260:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003262:	633b      	str	r3, [r7, #48]	@ 0x30
 8003264:	2301      	movs	r3, #1
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326a:	f383 8810 	msr	PRIMASK, r3
}
 800326e:	46c0      	nop			@ (mov r8, r8)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2101      	movs	r1, #1
 800327c:	438a      	bics	r2, r1
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003282:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003286:	f383 8810 	msr	PRIMASK, r3
}
 800328a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003290:	2b01      	cmp	r3, #1
 8003292:	d118      	bne.n	80032c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003294:	f3ef 8310 	mrs	r3, PRIMASK
 8003298:	60bb      	str	r3, [r7, #8]
  return(result);
 800329a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800329c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800329e:	2301      	movs	r3, #1
 80032a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f383 8810 	msr	PRIMASK, r3
}
 80032a8:	46c0      	nop			@ (mov r8, r8)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2110      	movs	r1, #16
 80032b6:	438a      	bics	r2, r1
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f383 8810 	msr	PRIMASK, r3
}
 80032c4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2280      	movs	r2, #128	@ 0x80
 80032ca:	2120      	movs	r1, #32
 80032cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80032da:	46c0      	nop			@ (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	b00e      	add	sp, #56	@ 0x38
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			@ (mov r8, r8)
 80032e4:	fffffedf 	.word	0xfffffedf

080032e8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08a      	sub	sp, #40	@ 0x28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032f4:	2b21      	cmp	r3, #33	@ 0x21
 80032f6:	d14c      	bne.n	8003392 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2252      	movs	r2, #82	@ 0x52
 80032fc:	5a9b      	ldrh	r3, [r3, r2]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d132      	bne.n	800336a <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003304:	f3ef 8310 	mrs	r3, PRIMASK
 8003308:	60bb      	str	r3, [r7, #8]
  return(result);
 800330a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
 800330e:	2301      	movs	r3, #1
 8003310:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f383 8810 	msr	PRIMASK, r3
}
 8003318:	46c0      	nop			@ (mov r8, r8)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2180      	movs	r1, #128	@ 0x80
 8003326:	438a      	bics	r2, r1
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f383 8810 	msr	PRIMASK, r3
}
 8003334:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003336:	f3ef 8310 	mrs	r3, PRIMASK
 800333a:	617b      	str	r3, [r7, #20]
  return(result);
 800333c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800333e:	623b      	str	r3, [r7, #32]
 8003340:	2301      	movs	r3, #1
 8003342:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	f383 8810 	msr	PRIMASK, r3
}
 800334a:	46c0      	nop			@ (mov r8, r8)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2140      	movs	r1, #64	@ 0x40
 8003358:	430a      	orrs	r2, r1
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f383 8810 	msr	PRIMASK, r3
}
 8003366:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003368:	e013      	b.n	8003392 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336e:	781a      	ldrb	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2252      	movs	r2, #82	@ 0x52
 8003384:	5a9b      	ldrh	r3, [r3, r2]
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b299      	uxth	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2252      	movs	r2, #82	@ 0x52
 8003390:	5299      	strh	r1, [r3, r2]
}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	46bd      	mov	sp, r7
 8003396:	b00a      	add	sp, #40	@ 0x28
 8003398:	bd80      	pop	{r7, pc}

0800339a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b08c      	sub	sp, #48	@ 0x30
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033a6:	2b21      	cmp	r3, #33	@ 0x21
 80033a8:	d151      	bne.n	800344e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2252      	movs	r2, #82	@ 0x52
 80033ae:	5a9b      	ldrh	r3, [r3, r2]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d132      	bne.n	800341c <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b6:	f3ef 8310 	mrs	r3, PRIMASK
 80033ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80033bc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80033be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033c0:	2301      	movs	r3, #1
 80033c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f383 8810 	msr	PRIMASK, r3
}
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2180      	movs	r1, #128	@ 0x80
 80033d8:	438a      	bics	r2, r1
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f383 8810 	msr	PRIMASK, r3
}
 80033e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e8:	f3ef 8310 	mrs	r3, PRIMASK
 80033ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80033ee:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f2:	2301      	movs	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f383 8810 	msr	PRIMASK, r3
}
 80033fc:	46c0      	nop			@ (mov r8, r8)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2140      	movs	r1, #64	@ 0x40
 800340a:	430a      	orrs	r2, r1
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	f383 8810 	msr	PRIMASK, r3
}
 8003418:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800341a:	e018      	b.n	800344e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003420:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	001a      	movs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	05d2      	lsls	r2, r2, #23
 800342e:	0dd2      	lsrs	r2, r2, #23
 8003430:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003436:	1c9a      	adds	r2, r3, #2
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2252      	movs	r2, #82	@ 0x52
 8003440:	5a9b      	ldrh	r3, [r3, r2]
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b299      	uxth	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2252      	movs	r2, #82	@ 0x52
 800344c:	5299      	strh	r1, [r3, r2]
}
 800344e:	46c0      	nop			@ (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	b00c      	add	sp, #48	@ 0x30
 8003454:	bd80      	pop	{r7, pc}

08003456 <memset>:
 8003456:	0003      	movs	r3, r0
 8003458:	1882      	adds	r2, r0, r2
 800345a:	4293      	cmp	r3, r2
 800345c:	d100      	bne.n	8003460 <memset+0xa>
 800345e:	4770      	bx	lr
 8003460:	7019      	strb	r1, [r3, #0]
 8003462:	3301      	adds	r3, #1
 8003464:	e7f9      	b.n	800345a <memset+0x4>
	...

08003468 <__libc_init_array>:
 8003468:	b570      	push	{r4, r5, r6, lr}
 800346a:	2600      	movs	r6, #0
 800346c:	4c0c      	ldr	r4, [pc, #48]	@ (80034a0 <__libc_init_array+0x38>)
 800346e:	4d0d      	ldr	r5, [pc, #52]	@ (80034a4 <__libc_init_array+0x3c>)
 8003470:	1b64      	subs	r4, r4, r5
 8003472:	10a4      	asrs	r4, r4, #2
 8003474:	42a6      	cmp	r6, r4
 8003476:	d109      	bne.n	800348c <__libc_init_array+0x24>
 8003478:	2600      	movs	r6, #0
 800347a:	f000 f819 	bl	80034b0 <_init>
 800347e:	4c0a      	ldr	r4, [pc, #40]	@ (80034a8 <__libc_init_array+0x40>)
 8003480:	4d0a      	ldr	r5, [pc, #40]	@ (80034ac <__libc_init_array+0x44>)
 8003482:	1b64      	subs	r4, r4, r5
 8003484:	10a4      	asrs	r4, r4, #2
 8003486:	42a6      	cmp	r6, r4
 8003488:	d105      	bne.n	8003496 <__libc_init_array+0x2e>
 800348a:	bd70      	pop	{r4, r5, r6, pc}
 800348c:	00b3      	lsls	r3, r6, #2
 800348e:	58eb      	ldr	r3, [r5, r3]
 8003490:	4798      	blx	r3
 8003492:	3601      	adds	r6, #1
 8003494:	e7ee      	b.n	8003474 <__libc_init_array+0xc>
 8003496:	00b3      	lsls	r3, r6, #2
 8003498:	58eb      	ldr	r3, [r5, r3]
 800349a:	4798      	blx	r3
 800349c:	3601      	adds	r6, #1
 800349e:	e7f2      	b.n	8003486 <__libc_init_array+0x1e>
 80034a0:	0800353c 	.word	0x0800353c
 80034a4:	0800353c 	.word	0x0800353c
 80034a8:	08003540 	.word	0x08003540
 80034ac:	0800353c 	.word	0x0800353c

080034b0 <_init>:
 80034b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b6:	bc08      	pop	{r3}
 80034b8:	469e      	mov	lr, r3
 80034ba:	4770      	bx	lr

080034bc <_fini>:
 80034bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c2:	bc08      	pop	{r3}
 80034c4:	469e      	mov	lr, r3
 80034c6:	4770      	bx	lr
